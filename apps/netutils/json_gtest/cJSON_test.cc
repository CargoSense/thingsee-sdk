#include <limits.h>
#include "gtest/gtest.h"
extern "C" {
#include "cJSON.h"
}

TEST(cJSON, subject_bc55769e9352d92a230b3212fee840c0) {
	// Whitespace
	// Whitespace
	// Whitespace
	// JSON: '\t\n\n'
	const char* json = "\t\n\n";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_73c6acc560ac89e1833f7be25699423d) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// JSON: ' \r{'
	const char* json = " \r{";
	std::cerr << "Plain JSON string from model: " << " \\r{" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4a46bb4992a72b6ab511f577e58f5f2e) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\t\t'
	const char* json = "{\t\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1aa9208c5f42c5d7ab62e47b14b71a2a) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '{ \"'
	const char* json = "{ \"";
	std::cerr << "Plain JSON string from model: " << "{ \\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_88a85476ac5647a61b53f64e16e204f6) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// JSON: '{\n\"'
	const char* json = "{\n\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_240e89751c08e8fe4fdf0ec719ddd8e1) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '{\r\n'
	const char* json = "{\r\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a0da694c1a1019e8365832235332cbb4) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// JSON: '{ \t'
	const char* json = "{ \t";
	std::cerr << "Plain JSON string from model: " << "{ \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_55764406abb4418bdef70d6a80f99d72) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// JSON: '{\n\n\r\n\n\t\"\\\"'
	const char* json = "{\n\n\r\n\n\t\"\\\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\r\\n\\n\\t\\\"\\\\\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9d36d126b924921b523b410f497c2285) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// JSON: '\n\n {\t\r\r\r\"\"'
	const char* json = "\n\n {\t\r\r\r\"\"";
	std::cerr << "Plain JSON string from model: " << "\\n\\n {\\t\\r\\r\\r\\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_791a2a1a12e5e2b5dfdc33f772535c6c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n{\"\\\\\"\n\r :'
	const char* json = "\n{\"\\\\\"\n\r :";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\\\\\\\\\"\\n\\r :" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3b26271614df0928fea3190ab5343f3c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '\n{\"\":\n\t\n0\t'
	const char* json = "\n{\"\":\n\t\n0\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\":\\n\\t\\n0\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_22f34556768105d75d1278649afe80e1) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// JSON: '{\n\n\r \t\r\"\" '
	const char* json = "{\n\n\r \t\r\"\" ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\r \\t\\r\\\"\\\" " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_95689e07fbe80201bc3d44149405e2e1) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '{ \r\n\r\"BcA\"'
	const char* json = "{ \r\n\r\"BcA\"";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\n\\r\\\"BcA\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6d532ba9b28e676a3882f9da60be6669) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\r\r\t\"\\t\"\r:'
	const char* json = "{\r\r\t\"\\t\"\r:";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\\"\\\\t\\\"\\r:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7ea0f2089d3612ce4819301967592b18) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// JSON: '{\t\n\"}qZ\\\"Z'
	const char* json = "{\t\n\"}qZ\\\"Z";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"}qZ\\\\\\\"Z" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_864f1e4524c647634536d7a28b7c75f6) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// JSON: '{\r \"\\r\\f\"\r'
	const char* json = "{\r \"\\r\\f\"\r";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"\\\\r\\\\f\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_556e7e960282068934cf90ca5137a9a4) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// JSON: '{\"\\r8t9\":\t'
	const char* json = "{\"\\r8t9\":\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\r8t9\\\":\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_663c830c6439fc53e1d550e162a478f7) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// JSON: '{\"\"\t :[],\"'
	const char* json = "{\"\"\t :[],\"";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\t :[],\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_60c32eb0970585ef1dae2c551db471e4) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\t \n\t  \"\":'
	const char* json = "{\t \n\t  \"\":";
	std::cerr << "Plain JSON string from model: " << "{\\t \\n\\t  \\\"\\\":" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8838fa2aa4c174e4f9339551e3d3dc9d) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\t\t \t\r\"\"\r:'
	const char* json = "{\t\t \t\r\"\"\r:";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t \\t\\r\\\"\\\"\\r:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d7cdd3484434d5a13fda28528d18f47f) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// JSON: '{\t\t\"9g\" \t\r'
	const char* json = "{\t\t\"9g\" \t\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"9g\\\" \\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_664ad6c0f388268c4d80d526f81f8160) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// JSON: '{\r\n\t\"\\t2\\b'
	const char* json = "{\r\n\t\"\\t2\\b";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\t\\\"\\\\t2\\\\b" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2e1d092e79edd99e12f090016e5dc5ef) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// JSON: '\t{\t\r\n \"\\n\"'
	const char* json = "\t{\t\r\n \"\\n\"";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\r\\n \\\"\\\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_982e90cc8f9e0431fff1ddfc712fc1ca) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\r\r\t\"\"\n\r:\n'
	const char* json = "{\r\r\t\"\"\n\r:\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\\"\\\"\\n\\r:\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2f406af6bbbc71de2592e8e8e7086751) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\t\t\"\"\t\t\r\n:'
	const char* json = "{\t\t\"\"\t\t\r\n:";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"\\\"\\t\\t\\r\\n:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_961a39b1ed93528c208d257b5ce23fc9) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// JSON: '\r\t\t{\r\n \"+\"'
	const char* json = "\r\t\t{\r\n \"+\"";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\t{\\r\\n \\\"+\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1ddb961bf0b944845f5566b1f8e0c489) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// JSON: '\n \n{ \t\t\t\" '
	const char* json = "\n \n{ \t\t\t\" ";
	std::cerr << "Plain JSON string from model: " << "\\n \\n{ \\t\\t\\t\\\" " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1657abbd7db364afe6ebec37e457704e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '\r\n\t{\r\n\r \r\"'
	const char* json = "\r\n\t{\r\n\r \r\"";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\t{\\r\\n\\r \\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f5c4cdf907d729118212bbd8007ad27d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: ' {\"8c\" :{\n'
	const char* json = " {\"8c\" :{\n";
	std::cerr << "Plain JSON string from model: " << " {\\\"8c\\\" :{\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6894c0035b92ba6e5bf2c46adb25adb2) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n\t{\"\"\r\t: -'
	const char* json = "\n\t{\"\"\r\t: -";
	std::cerr << "Plain JSON string from model: " << "\\n\\t{\\\"\\\"\\r\\t: -" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a79626f70a18aeca6d2437399620dd7e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '\r{\t\"\":-0E0'
	const char* json = "\r{\t\"\":-0E0";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\\"\\\":-0E0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bd0fdeffac466a3d89aa37ec6a6a0a34) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// JSON: '{\r \n\t\"\\f&r'
	const char* json = "{\r \n\t\"\\f&r";
	std::cerr << "Plain JSON string from model: " << "{\\r \\n\\t\\\"\\\\f&r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d9a2812e28487dae84749bcaff7cf466) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\n  \r\"g\"\t:'
	const char* json = "{\n  \r\"g\"\t:";
	std::cerr << "Plain JSON string from model: " << "{\\n  \\r\\\"g\\\"\\t:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6214d13ffb961b31d3580af8aa7c8eb3) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: ' \n {\"\\f3\" '
	const char* json = " \n {\"\\f3\" ";
	std::cerr << "Plain JSON string from model: " << " \\n {\\\"\\\\f3\\\" " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4c29da3aa1190860223197051bc96970) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '{\t\"*k\\f\\/\"'
	const char* json = "{\t\"*k\\f\\/\"";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"*k\\\\f\\\\/\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0ab12f4ecc7df7f9f343c9536c5839c6) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// JSON: '\r{\"\\r\":\t\t\"'
	const char* json = "\r{\"\\r\":\t\t\"";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\\r\\\":\\t\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_65f631cad29bf417540dd4d6f29f1cee) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\r\t\n\"\"\n:{\t'
	const char* json = "{\r\t\n\"\"\n:{\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\n\\\"\\\"\\n:{\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6faea246f36c15ee386868a9fb2b4be1) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// JSON: '\n\t\t{\t\r\t \"\"'
	const char* json = "\n\t\t{\t\r\t \"\"";
	std::cerr << "Plain JSON string from model: " << "\\n\\t\\t{\\t\\r\\t \\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_98d83716c77ca23cb2f8e726a9502d8a) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\n\t\"\"\t\n\t:\r'
	const char* json = "{\n\t\"\"\t\n\t:\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\\"\\\"\\t\\n\\t:\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2a9225a00abacc94a0ac16f6f03ade16) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// JSON: '{\"\\/\\t6O`C'
	const char* json = "{\"\\/\\t6O`C";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\/\\\\t6O`C" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_25d59d3c3db092856a371a9bae4a3784) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '{\r\t\n  \n\"\\b'
	const char* json = "{\r\t\n  \n\"\\b";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\n  \\n\\\"\\\\b" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3929ecac6acf03708598ee76eaaf0733) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// JSON: '{ \r\r\"5_\\\\\"'
	const char* json = "{ \r\r\"5_\\\\\"";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\r\\\"5_\\\\\\\\\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0febd31a41f6856980b32cc2f6b818e8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// JSON: ' {\n\"_\\n\\tm'
	const char* json = " {\n\"_\\n\\tm";
	std::cerr << "Plain JSON string from model: " << " {\\n\\\"_\\\\n\\\\tm" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1ff3160cb42338bb15d2ddc97f55dfb6) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// JSON: '{\n \r\r\"V[9V'
	const char* json = "{\n \r\r\"V[9V";
	std::cerr << "Plain JSON string from model: " << "{\\n \\r\\r\\\"V[9V" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f5433a002e0695d77efd0c24f008afc8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n{\r\n \"\":\t\r'
	const char* json = "\n{\r\n \"\":\t\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\n \\\"\\\":\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_404565d7c9c9b828ab6672bfa7396492) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '\r\r{\r\"\\\"\\\"\"'
	const char* json = "\r\r{\r\"\\\"\\\"\"";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\r\\\"\\\\\\\"\\\\\\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_437c30e04887e7e5fc5b4eb5ec07329f) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// JSON: '\n\n\r{\r\n\n\t\"\"'
	const char* json = "\n\n\r{\r\n\n\t\"\"";
	std::cerr << "Plain JSON string from model: " << "\\n\\n\\r{\\r\\n\\n\\t\\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_dad9df673f058295c70582b29f4a1ef1) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{ \t\"\\n\\f\":'
	const char* json = "{ \t\"\\n\\f\":";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"\\\\n\\\\f\\\":" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8d7e61056234b9bce773728897b0b8ee) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '\n\t\t{\r\n  \t\"'
	const char* json = "\n\t\t{\r\n  \t\"";
	std::cerr << "Plain JSON string from model: " << "\\n\\t\\t{\\r\\n  \\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9ed57761b7c68e2fe04b723cc40e8499) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// JSON: '\t\r\r{\t \t\r\"z'
	const char* json = "\t\r\r{\t \t\r\"z";
	std::cerr << "Plain JSON string from model: " << "\\t\\r\\r{\\t \\t\\r\\\"z" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f6f540c3332a5cfac6645b928b437f30) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// JSON: '{\r \t\"\\/\" \n'
	const char* json = "{\r \t\"\\/\" \n";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t\\\"\\\\/\\\" \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d760c1f735defe080d6084fafab23e0b) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// JSON: '{\n\r\t\t \"G\\b'
	const char* json = "{\n\r\t\t \"G\\b";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\t\\t \\\"G\\\\b" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c72e86d40d304dc31a3b554c05b290f4) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\r \"\\f\"\r: '
	const char* json = "{\r \"\\f\"\r: ";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"\\\\f\\\"\\r: " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_64c08f14ef88eb17bf5de3127c18da74) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// JSON: '\n{\r  \r\"\" \n'
	const char* json = "\n{\r  \r\"\" \n";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r  \\r\\\"\\\" \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9bda0b8a8c305c64b17681c1149fb599) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '\t\t\n{\n\n\r\"\\b'
	const char* json = "\t\t\n{\n\n\r\"\\b";
	std::cerr << "Plain JSON string from model: " << "\\t\\t\\n{\\n\\n\\r\\\"\\\\b" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_988c6f4c5ce9636e641cb2ca6fc709e4) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\t\n{\"\\\\\\t\"\r'
	const char* json = "\t\n{\"\\\\\\t\"\r";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{\\\"\\\\\\\\\\\\t\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3eb5099da753229a68285f2099e88d93) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// JSON: '{\r\n\n\"X\\\\\":\"a\"\r\r\n\n,\t '
	const char* json = "{\r\n\n\"X\\\\\":\"a\"\r\r\n\n,\t ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\n\\\"X\\\\\\\\\\\":\\\"a\\\"\\r\\r\\n\\n,\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4b9046e1875ffcadaafc0edb30b2702e) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{\t\"\\t\"\r\n:null\n\r,\n\t\r\n'
	const char* json = "{\t\"\\t\"\r\n:null\n\r,\n\t\r\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\t\\\"\\r\\n:null\\n\\r,\\n\\t\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3ae4221b935d55011f2a76601cc54ea9) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{\t\r\r\r\n\t\"\"\n\n\t\n :true,'
	const char* json = "{\t\r\r\r\n\t\"\"\n\n\t\n :true,";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\r\\r\\n\\t\\\"\\\"\\n\\n\\t\\n :true," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_68ce5e4923a17a58fa48e21266c70535) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// JSON: '{\n\n\n\"3\\n3\":{\n\"\" \r\r:{'
	const char* json = "{\n\n\n\"3\\n3\":{\n\"\" \r\r:{";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\n\\\"3\\\\n3\\\":{\\n\\\"\\\" \\r\\r:{" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0a0087329bf1ca2e385c6be78665a37f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// JSON: '\r{\t\"@\\b\" :\n-0.0E0,\r\t'
	const char* json = "\r{\t\"@\\b\" :\n-0.0E0,\r\t";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\\"@\\\\b\\\" :\\n-0.0E0,\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f97618af2dca5d7974c6a7e43d3d80a2) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '\t {\r\t\t\r\r\"\\n\\\"\"\t\t:\"\"\t'
	const char* json = "\t {\r\t\t\r\r\"\\n\\\"\"\t\t:\"\"\t";
	std::cerr << "Plain JSON string from model: " << "\\t {\\r\\t\\t\\r\\r\\\"\\\\n\\\\\\\"\\\"\\t\\t:\\\"\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7be3cb58ce95fce46e27421d7c566f54) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// JSON: '{  \"\\r\":true ,  \"\"\n\n'
	const char* json = "{  \"\\r\":true ,  \"\"\n\n";
	std::cerr << "Plain JSON string from model: " << "{  \\\"\\\\r\\\":true ,  \\\"\\\"\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b305a926e6d57aaa6c14810e053b8dfb) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// JSON: '\n{ \n\t\"\\\\\"\r\r:-0E-0 \t\n'
	const char* json = "\n{ \n\t\"\\\\\"\r\r:-0E-0 \t\n";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\n\\t\\\"\\\\\\\\\\\"\\r\\r:-0E-0 \\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e5314525a4bdf270ca3019f52a1f9cbb) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{ \n\t\"z_\"  :\r\t\ntrue,\r'
	const char* json = "{ \n\t\"z_\"  :\r\t\ntrue,\r";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\t\\\"z_\\\"  :\\r\\t\\ntrue,\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1e781a72339463d050ebde28af2b9d29) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '\t{\t\"\\\"\"\n\n\t: {}\r\n\r , '
	const char* json = "\t{\t\"\\\"\"\n\n\t: {}\r\n\r , ";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\\"\\\\\\\"\\\"\\n\\n\\t: {}\\r\\n\\r , " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_536e9e5791cbac1855bea257ce19763f) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// JSON: '\r {\r\r\r \"\":\n true,\r \t'
	const char* json = "\r {\r\r\r \"\":\n true,\r \t";
	std::cerr << "Plain JSON string from model: " << "\\r {\\r\\r\\r \\\"\\\":\\n true,\\r \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a8648891fa60d3f05308a3e1d3f29c66) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// JSON: '{ \n\"\\r\\\"\\/\\f\" \n\t \n: -'
	const char* json = "{ \n\"\\r\\\"\\/\\f\" \n\t \n: -";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\\r\\\\\\\"\\\\/\\\\f\\\" \\n\\t \\n: -" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1ea6416eeaa1fffbac14ecb36b1e341d) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '\t {\n\n\r\"n#\\\"2\"\t\t \r:\t\r'
	const char* json = "\t {\n\n\r\"n#\\\"2\"\t\t \r:\t\r";
	std::cerr << "Plain JSON string from model: " << "\\t {\\n\\n\\r\\\"n#\\\\\\\"2\\\"\\t\\t \\r:\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_629a0bf729190bf2e1bc63ab9c1444fd) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// JSON: '{\r \r\"\\\",Z\\tZ\"\t:\ttrue'
	const char* json = "{\r \r\"\\\",Z\\tZ\"\t:\ttrue";
	std::cerr << "Plain JSON string from model: " << "{\\r \\r\\\"\\\\\\\",Z\\\\tZ\\\"\\t:\\ttrue" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ab337a17cebae1f3268a76b049562fc6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// JSON: '{  \"\\/h\"\r\r : \nnull,\"'
	const char* json = "{  \"\\/h\"\r\r : \nnull,\"";
	std::cerr << "Plain JSON string from model: " << "{  \\\"\\\\/h\\\"\\r\\r : \\nnull,\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8bf70930bc61eb2b908f046785fa42de) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '{\r\"Bm@r\" \r\n: false  '
	const char* json = "{\r\"Bm@r\" \r\n: false  ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"Bm@r\\\" \\r\\n: false  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3072723cc442134ef6109acb69bc7640) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: '{\t\n\n\n\r\n\n\r \"x\"\t:\t\t\t\n['
	const char* json = "{\t\n\n\n\r\n\n\r \"x\"\t:\t\t\t\n[";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\n\\n\\r\\n\\n\\r \\\"x\\\"\\t:\\t\\t\\t\\n[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_425bfac01cb8bc05aa4901876560e31f) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// JSON: '{\"P^9\"\r:{ \"\":false\n\t'
	const char* json = "{\"P^9\"\r:{ \"\":false\n\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"P^9\\\"\\r:{ \\\"\\\":false\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d406d00e9888cc992b8b21acb52bc48a) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\n{\t\"\\/\\\"\" \n\n:-11\t\t ,'
	const char* json = "\n{\t\"\\/\\\"\" \n\n:-11\t\t ,";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\\"\\\\/\\\\\\\"\\\" \\n\\n:-11\\t\\t ," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d2ba64324dc7721a2a61f457c029c937) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// JSON: '{\n\n\r\"\\t\\bj\\/~\":\ttrue'
	const char* json = "{\n\n\r\"\\t\\bj\\/~\":\ttrue";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\r\\\"\\\\t\\\\bj\\\\/~\\\":\\ttrue" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3226ef45df49f5d8ca35b92f403f2d1d) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// JSON: '\r  {\t\n \"^\":\n\r\rnull\t\t'
	const char* json = "\r  {\t\n \"^\":\n\r\rnull\t\t";
	std::cerr << "Plain JSON string from model: " << "\\r  {\\t\\n \\\"^\\\":\\n\\r\\rnull\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b92819c7d7c00912e530526b14080d8a) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{\r\"\\nO<h\\t\":false\t, '
	const char* json = "{\r\"\\nO<h\\t\":false\t, ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\nO<h\\\\t\\\":false\\t, " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_55af26ba664f0d87f4bdd8c46687f9c5) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\t\t\n\"\\b\":null   ,\t\r\t'
	const char* json = "{\t\t\n\"\\b\":null   ,\t\r\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\n\\\"\\\\b\\\":null   ,\\t\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5b8de17f8677e7690cc83a0cda8234e4) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\n\n{\"\\b\\b\"\n:false \r,\n'
	const char* json = "\n\n{\"\\b\\b\"\n:false \r,\n";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{\\\"\\\\b\\\\b\\\"\\n:false \\r,\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_50f1b821347a693665192a05796e4b83) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '{ \"\\t,\" :\n \t \"\"\t ,\r\t'
	const char* json = "{ \"\\t,\" :\n \t \"\"\t ,\r\t";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\t,\\\" :\\n \\t \\\"\\\"\\t ,\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0d782b3269b52775ee0777a11f4a68ae) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// CloseElements
	// JSON: '\r{\"\\\\)WO\\\\\"\t:\r \t[\"\" '
	const char* json = "\r{\"\\\\)WO\\\\\"\t:\r \t[\"\" ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\\\\\\)WO\\\\\\\\\\\"\\t:\\r \\t[\\\"\\\" " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4f9a9dd6fe4a0318d531cfaf006b93ce) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\t\n {\r\t\r\"\"\n\t:\"I@\"\r\t,\t'
	const char* json = "\t\n {\r\t\r\"\"\n\t:\"I@\"\r\t,\t";
	std::cerr << "Plain JSON string from model: " << "\\t\\n {\\r\\t\\r\\\"\\\"\\n\\t:\\\"I@\\\"\\r\\t,\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f9a1b5b0106bf3d41ef51f954afa6f20) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\r\"M\"\n \r :[]\t,\r\r\n\"\":'
	const char* json = "{\r\"M\"\n \r :[]\t,\r\r\n\"\":";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"M\\\"\\n \\r :[]\\t,\\r\\r\\n\\\"\\\":" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_66ee0871bf4a6a09457ee1d5d994e19f) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// JSON: '{\n\t\"L\" \n:\rtrue\r ,\r\"1'
	const char* json = "{\n\t\"L\" \n:\rtrue\r ,\r\"1";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\\"L\\\" \\n:\\rtrue\\r ,\\r\\\"1" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fd5cb3b9d6b95251ed3faa7a2ce621ed) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// JSON: '{\t\t\"\\f\\rJ\\r\\b\"\t \t:{}'
	const char* json = "{\t\t\"\\f\\rJ\\r\\b\"\t \t:{}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"\\\\f\\\\rJ\\\\r\\\\b\\\"\\t \\t:{}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_18e59af2733f328712922e7ef70e4e14) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '{ \t \n\"\":\ttrue ,\r\t\"\\\"'
	const char* json = "{ \t \n\"\":\ttrue ,\r\t\"\\\"";
	std::cerr << "Plain JSON string from model: " << "{ \\t \\n\\\"\\\":\\ttrue ,\\r\\t\\\"\\\\\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9fc5ab9b180ca61cedd930d40b0a7bdb) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// JSON: '{\n\n\n\t\r\"\"\r:\"G\\b\"\t  ,\"'
	const char* json = "{\n\n\n\t\r\"\"\r:\"G\\b\"\t  ,\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\n\\t\\r\\\"\\\"\\r:\\\"G\\\\b\\\"\\t  ,\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7668a4dd0971c6ca79627099010c830f) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// JSON: '\n { \n \".\\\"PnV\":[ ]\r '
	const char* json = "\n { \n \".\\\"PnV\":[ ]\r ";
	std::cerr << "Plain JSON string from model: " << "\\n { \\n \\\".\\\\\\\"PnV\\\":[ ]\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_89e4c4c12877214f9452b9bb7d004a57) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// JSON: '{\t\"8\\\"\"\r \n\r\r\t: \n\t80.'
	const char* json = "{\t\"8\\\"\"\r \n\r\r\t: \n\t80.";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"8\\\\\\\"\\\"\\r \\n\\r\\r\\t: \\n\\t80." << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a13c360c8d33b970ceb11683c9f90149) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// JSON: ' {\">\"\n:-0\r \t\r,\"g\"\r\r '
	const char* json = " {\">\"\n:-0\r \t\r,\"g\"\r\r ";
	std::cerr << "Plain JSON string from model: " << " {\\\">\\\"\\n:-0\\r \\t\\r,\\\"g\\\"\\r\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_79c87b7f1ce0d899c573ca3258bff92c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// JSON: '{  \r\t\r\r\"_\"\r\n\n\r\t:40E-'
	const char* json = "{  \r\t\r\r\"_\"\r\n\n\r\t:40E-";
	std::cerr << "Plain JSON string from model: " << "{  \\r\\t\\r\\r\\\"_\\\"\\r\\n\\n\\r\\t:40E-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7f96f9ae70978757184171d01e5d636a) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\t\n\"\" \n\r\t:true\n\n, \r\n'
	const char* json = "{\t\n\"\" \n\r\t:true\n\n, \r\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"\\\" \\n\\r\\t:true\\n\\n, \\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_60cc677034da6f635f8790daf9efc7eb) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// JSON: '\t{\n\n\r\r\n\"F\"\n\t:\rnull \t'
	const char* json = "\t{\n\n\r\r\n\"F\"\n\t:\rnull \t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\n\\r\\r\\n\\\"F\\\"\\n\\t:\\rnull \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d1f73ad54c19e68ab3e2e18af12724d2) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\t{\t\r\n\n\r\"#\\r\\f\" :{},\r'
	const char* json = "\t{\t\r\n\n\r\"#\\r\\f\" :{},\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\r\\n\\n\\r\\\"#\\\\r\\\\f\\\" :{},\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3beeaad27b382384829be2d9a6c146db) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// JSON: '{\t\"Yc\"\n\n:  \r{\t\r\n\"\" \r'
	const char* json = "{\t\"Yc\"\n\n:  \r{\t\r\n\"\" \r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"Yc\\\"\\n\\n:  \\r{\\t\\r\\n\\\"\\\" \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c96b8430ea57508f71e9f3c68be9a1bf) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\"\"\r  : \t\nnull\t,\"?\"\t'
	const char* json = "{\"\"\r  : \t\nnull\t,\"?\"\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\r  : \\t\\nnull\\t,\\\"?\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c6d684bfe0c8b2c403f795a18e1cf21f) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// JSON: '{\r\"\" \r\r:{ \n\"Q\" :\r\r \r'
	const char* json = "{\r\"\" \r\r:{ \n\"Q\" :\r\r \r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\" \\r\\r:{ \\n\\\"Q\\\" :\\r\\r \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_651f730f48dcc7201d86e9bdc1068534) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// JSON: '{\t \n\r\"?\" :  true \n\n\r'
	const char* json = "{\t \n\r\"?\" :  true \n\n\r";
	std::cerr << "Plain JSON string from model: " << "{\\t \\n\\r\\\"?\\\" :  true \\n\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_449ad844df154f5fdd175abc253db645) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{\t\t\n \"\":\"\\rQ)*\"\t \t\n,'
	const char* json = "{\t\t\n \"\":\"\\rQ)*\"\t \t\n,";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\n \\\"\\\":\\\"\\\\rQ)*\\\"\\t \\t\\n," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8845d5fe5e7bc2528b5bbf8945cb3f00) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n{\t\"2\"\r\n\r:\n{\"\"\t\n :\n-'
	const char* json = "\n{\t\"2\"\r\n\r:\n{\"\"\t\n :\n-";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\\"2\\\"\\r\\n\\r:\\n{\\\"\\\"\\t\\n :\\n-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9fc5502a6c406d26783d325361ccacb5) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\n\t \"7\\r=8f\\b|\\\\\" :\n'
	const char* json = "{\n\t \"7\\r=8f\\b|\\\\\" :\n";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t \\\"7\\\\r=8f\\\\b|\\\\\\\\\\\" :\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7a1201f617218512f32fba9492e6a439) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\t \t{\"C\\r\\\"j\\f\"\t :\n[\t'
	const char* json = "\t \t{\"C\\r\\\"j\\f\"\t :\n[\t";
	std::cerr << "Plain JSON string from model: " << "\\t \\t{\\\"C\\\\r\\\\\\\"j\\\\f\\\"\\t :\\n[\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_814bff158940d1a4b2f56131871cbc87) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// JSON: '\t\r{\t\n\r \r\r\"H\"\n\r\r:\r\n\"\"'
	const char* json = "\t\r{\t\n\r \r\r\"H\"\n\r\r:\r\n\"\"";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{\\t\\n\\r \\r\\r\\\"H\\\"\\n\\r\\r:\\r\\n\\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_46b65069ef602a96362b734cfa5cad47) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// JSON: '{\r\"\": true\r \r,\r\r\r\"(#'
	const char* json = "{\r\"\": true\r \r,\r\r\r\"(#";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\": true\\r \\r,\\r\\r\\r\\\"(#" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0710987cd170cd43eb731dffde43a7ff) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '{\n\"\\n#\"\n:\r\t true,\t\n\"'
	const char* json = "{\n\"\\n#\"\n:\r\t true,\t\n\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\\n#\\\"\\n:\\r\\t true,\\t\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_384c75e4c42e61761f9a816fd31f0393) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\t\t{ \t\r \"\"\t:\t\rnull\r\r\r\r\r,\r\"\\\"\\b\\\"\":\t\n[\n\n\t-0e0 \t]\t,\r\r'
	const char* json = "\t\t{ \t\r \"\"\t:\t\rnull\r\r\r\r\r,\r\"\\\"\\b\\\"\":\t\n[\n\n\t-0e0 \t]\t,\r\r";
	std::cerr << "Plain JSON string from model: " << "\\t\\t{ \\t\\r \\\"\\\"\\t:\\t\\rnull\\r\\r\\r\\r\\r,\\r\\\"\\\\\\\"\\\\b\\\\\\\"\\\":\\t\\n[\\n\\n\\t-0e0 \\t]\\t,\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0ce85467151d9ced2683e27330f42797) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: '{\r\"Id\"\n\n: false\r\r,\n\t\"\\n\\\"m%NN+\\t\\t\\bkO\\nP\\\\\\/\"\r:\n['
	const char* json = "{\r\"Id\"\n\n: false\r\r,\n\t\"\\n\\\"m%NN+\\t\\t\\bkO\\nP\\\\\\/\"\r:\n[";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"Id\\\"\\n\\n: false\\r\\r,\\n\\t\\\"\\\\n\\\\\\\"m%NN+\\\\t\\\\t\\\\bkO\\\\nP\\\\\\\\\\\\/\\\"\\r:\\n[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b169f5692a30bab8748badbe19a3d6cd) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// JSON: '\n{\"\\/\" \r: false   \r\n,\n \r\"\" \r\t: \r\ntrue,\"H\":false  \t'
	const char* json = "\n{\"\\/\" \r: false   \r\n,\n \r\"\" \r\t: \r\ntrue,\"H\":false  \t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\\/\\\" \\r: false   \\r\\n,\\n \\r\\\"\\\" \\r\\t: \\r\\ntrue,\\\"H\\\":false  \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5a62ed1e6ddcffde438f64375cda827e) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '{  \"\\/\"\t\t \t:\rnull \n,\n\n\n\n\n\"\" :  \n{\"E\"\r  :true\n,\n \t\"'
	const char* json = "{  \"\\/\"\t\t \t:\rnull \n,\n\n\n\n\n\"\" :  \n{\"E\"\r  :true\n,\n \t\"";
	std::cerr << "Plain JSON string from model: " << "{  \\\"\\\\/\\\"\\t\\t \\t:\\rnull \\n,\\n\\n\\n\\n\\n\\\"\\\" :  \\n{\\\"E\\\"\\r  :true\\n,\\n \\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9218f4af13bc7526d5af3b840a58390f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '\t{\n\"&E\\f\\/\"\t:\"\" \r  ,\"\\t\\b\\n\" \n:\r\r\r-49E09\n\r \n\t,\r\r \r'
	const char* json = "\t{\n\"&E\\f\\/\"\t:\"\" \r  ,\"\\t\\b\\n\" \n:\r\r\r-49E09\n\r \n\t,\r\r \r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\\"&E\\\\f\\\\/\\\"\\t:\\\"\\\" \\r  ,\\\"\\\\t\\\\b\\\\n\\\" \\n:\\r\\r\\r-49E09\\n\\r \\n\\t,\\r\\r \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1e0fb114cabda80c9de5653963e985ef) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\t{\n \"\\r\\b\\\"w\"\n\t\t:\t70e+0\t\r\t\n\n,\n\r\r\t\":=\":\n \"\\\\i\"\t\r\n\r,'
	const char* json = "\t{\n \"\\r\\b\\\"w\"\n\t\t:\t70e+0\t\r\t\n\n,\n\r\r\t\":=\":\n \"\\\\i\"\t\r\n\r,";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n \\\"\\\\r\\\\b\\\\\\\"w\\\"\\n\\t\\t:\\t70e+0\\t\\r\\t\\n\\n,\\n\\r\\r\\t\\\":=\\\":\\n \\\"\\\\\\\\i\\\"\\t\\r\\n\\r," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a2c4f485e5bfb26527cb8a00616525e0) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: ' {\t \r \"\\n]\\t\\t\\rH_\"  : { \n \t\n\"\"\r\t \n:\nfalse \n\t},\r \n'
	const char* json = " {\t \r \"\\n]\\t\\t\\rH_\"  : { \n \t\n\"\"\r\t \n:\nfalse \n\t},\r \n";
	std::cerr << "Plain JSON string from model: " << " {\\t \\r \\\"\\\\n]\\\\t\\\\t\\\\rH_\\\"  : { \\n \\t\\n\\\"\\\"\\r\\t \\n:\\nfalse \\n\\t},\\r \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b00a07d011026eaeddeb0e805ee18d90) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '{\t \r\r\"k\"  \t\t:\t{} \n, \t \t\"\\b\"\t:true ,\r\n\t\n\"\\r\"\r:-8E-0'
	const char* json = "{\t \r\r\"k\"  \t\t:\t{} \n, \t \t\"\\b\"\t:true ,\r\n\t\n\"\\r\"\r:-8E-0";
	std::cerr << "Plain JSON string from model: " << "{\\t \\r\\r\\\"k\\\"  \\t\\t:\\t{} \\n, \\t \\t\\\"\\\\b\\\"\\t:true ,\\r\\n\\t\\n\\\"\\\\r\\\"\\r:-8E-0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ba409c761af7c669e6d4f5cfac89958d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// CloseElements
	// JSON: ' {\r\t\t\r\"\"\n\n\t:\n \nnull  ,\r\t \r\"L\":[[\nnull\r\t\n \r\n], \t\t-0'
	const char* json = " {\r\t\t\r\"\"\n\n\t:\n \nnull  ,\r\t \r\"L\":[[\nnull\r\t\n \r\n], \t\t-0";
	std::cerr << "Plain JSON string from model: " << " {\\r\\t\\t\\r\\\"\\\"\\n\\n\\t:\\n \\nnull  ,\\r\\t \\r\\\"L\\\":[[\\nnull\\r\\t\\n \\r\\n], \\t\\t-0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f343af554105f288cf99c89ce81ad678) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\t{\"\"\r\n\t: \n true,\"\\t<\\fW\\beX|U\":\n\n {\r\"+U\":null\n\n\n,\r'
	const char* json = "\t{\"\"\r\n\t: \n true,\"\\t<\\fW\\beX|U\":\n\n {\r\"+U\":null\n\n\n,\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"\\\"\\r\\n\\t: \\n true,\\\"\\\\t<\\\\fW\\\\beX|U\\\":\\n\\n {\\r\\\"+U\\\":null\\n\\n\\n,\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5103c730ea1eaffa7043b88f1a9e7ae2) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: ' \r{\n\t\t \"Nf\\t\"\n\t\n:\n\"x\\fS\\\\\\n\"\r\n\t\r \t,\r\r\t\"\\b\\\\\\\\\"\n\t\n:-'
	const char* json = " \r{\n\t\t \"Nf\\t\"\n\t\n:\n\"x\\fS\\\\\\n\"\r\n\t\r \t,\r\r\t\"\\b\\\\\\\\\"\n\t\n:-";
	std::cerr << "Plain JSON string from model: " << " \\r{\\n\\t\\t \\\"Nf\\\\t\\\"\\n\\t\\n:\\n\\\"x\\\\fS\\\\\\\\\\\\n\\\"\\r\\n\\t\\r \\t,\\r\\r\\t\\\"\\\\b\\\\\\\\\\\\\\\\\\\"\\n\\t\\n:-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2d0a62da42ace6cf542d9c49bf381278) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '{\r\"\\f\" \r:\ntrue\r ,\n\"\\r\"\r:\ntrue  \n\t\t\r,\r\"\\\\\" :-0e+023'
	const char* json = "{\r\"\\f\" \r:\ntrue\r ,\n\"\\r\"\r:\ntrue  \n\t\t\r,\r\"\\\\\" :-0e+023";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\f\\\" \\r:\\ntrue\\r ,\\n\\\"\\\\r\\\"\\r:\\ntrue  \\n\\t\\t\\r,\\r\\\"\\\\\\\\\\\" :-0e+023" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5e707b5ffe6241cfd4ef76c33633d240) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '\r{\n\"\\t2;e\":\n\"\"\t\r\t\n,\t\"\\b\\b4\":\t false\n,\n \",4\": {},\n '
	const char* json = "\r{\n\"\\t2;e\":\n\"\"\t\r\t\n,\t\"\\b\\b4\":\t false\n,\n \",4\": {},\n ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\\"\\\\t2;e\\\":\\n\\\"\\\"\\t\\r\\t\\n,\\t\\\"\\\\b\\\\b4\\\":\\t false\\n,\\n \\\",4\\\": {},\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4e675389748fc59e42e418aa0df2adf1) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\r \"1\" \t:\"$\\/\\r\\\\\"\n \n,\t\t\r\"_8\" \r:\t\n[]\t\r\n\n\t\t\r,\n\t\n\"\"\t'
	const char* json = "{\r \"1\" \t:\"$\\/\\r\\\\\"\n \n,\t\t\r\"_8\" \r:\t\n[]\t\r\n\n\t\t\r,\n\t\n\"\"\t";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"1\\\" \\t:\\\"$\\\\/\\\\r\\\\\\\\\\\"\\n \\n,\\t\\t\\r\\\"_8\\\" \\r:\\t\\n[]\\t\\r\\n\\n\\t\\t\\r,\\n\\t\\n\\\"\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4f676b089c4390980282ae43dc88e084) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// JSON: '{\"\"\r:\t\r\"\\b\"  ,\"\\/\\\\\\/\\\\\\\"x\\\\Bc\\/\"\t:false\r\t,\t\t\n\t\n\r\"'
	const char* json = "{\"\"\r:\t\r\"\\b\"  ,\"\\/\\\\\\/\\\\\\\"x\\\\Bc\\/\"\t:false\r\t,\t\t\n\t\n\r\"";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\r:\\t\\r\\\"\\\\b\\\"  ,\\\"\\\\/\\\\\\\\\\\\/\\\\\\\\\\\\\\\"x\\\\\\\\Bc\\\\/\\\"\\t:false\\r\\t,\\t\\t\\n\\t\\n\\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4ebf57a44670835bd804deb732dc9369) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\r\r\r\"\\n\\\\g\\f\"\n:5.010\r \t ,\r\r\r\"IS\\r\\n\\/\\n\\/\\bj<9\\bl\"'
	const char* json = "{\r\r\r\"\\n\\\\g\\f\"\n:5.010\r \t ,\r\r\r\"IS\\r\\n\\/\\n\\/\\bj<9\\bl\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\r\\\"\\\\n\\\\\\\\g\\\\f\\\"\\n:5.010\\r \\t ,\\r\\r\\r\\\"IS\\\\r\\\\n\\\\/\\\\n\\\\/\\\\bj<9\\\\bl\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3f3f3d5293cbadd0ede13235ff4806b9) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '\t{ \n \r \"N\": \n 0.0E021702\r\r\n\r,\n\r\r\"\\b)\\/\\f\\\\\": {}\r, '
	const char* json = "\t{ \n \r \"N\": \n 0.0E021702\r\r\n\r,\n\r\r\"\\b)\\/\\f\\\\\": {}\r, ";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\n \\r \\\"N\\\": \\n 0.0E021702\\r\\r\\n\\r,\\n\\r\\r\\\"\\\\b)\\\\/\\\\f\\\\\\\\\\\": {}\\r, " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f6f13ffb99b05c0b2d496dc650a6ad7f) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: ' \r{\"\"\r\t: {}\t\t,\t\r\t\"A!(\"\t:  \nfalse, \r  \t\r \"\\/e\"\r :\t['
	const char* json = " \r{\"\"\r\t: {}\t\t,\t\r\t\"A!(\"\t:  \nfalse, \r  \t\r \"\\/e\"\r :\t[";
	std::cerr << "Plain JSON string from model: " << " \\r{\\\"\\\"\\r\\t: {}\\t\\t,\\t\\r\\t\\\"A!(\\\"\\t:  \\nfalse, \\r  \\t\\r \\\"\\\\/e\\\"\\r :\\t[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3f96bc25462cda4b3924915babdc4756) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// JSON: ' \r\r{\r\n\t\r\"\"\t\t\r:\n\"\\r\\t\" \n\n,\n \n\n\t \"3\":[\t \r\n\t\t{}\n\r] , '
	const char* json = " \r\r{\r\n\t\r\"\"\t\t\r:\n\"\\r\\t\" \n\n,\n \n\n\t \"3\":[\t \r\n\t\t{}\n\r] , ";
	std::cerr << "Plain JSON string from model: " << " \\r\\r{\\r\\n\\t\\r\\\"\\\"\\t\\t\\r:\\n\\\"\\\\r\\\\t\\\" \\n\\n,\\n \\n\\n\\t \\\"3\\\":[\\t \\r\\n\\t\\t{}\\n\\r] , " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_13cdc77fb8348e5abf7b3d82d2900539) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// JSON: '\t{\n\"\\be\\fM2#\\f\"\t:\r\r-99e-0, \n\"L\":true  \r\r\n,\n\n\"u\\\\D`'
	const char* json = "\t{\n\"\\be\\fM2#\\f\"\t:\r\r-99e-0, \n\"L\":true  \r\r\n,\n\n\"u\\\\D`";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\\"\\\\be\\\\fM2#\\\\f\\\"\\t:\\r\\r-99e-0, \\n\\\"L\\\":true  \\r\\r\\n,\\n\\n\\\"u\\\\\\\\D`" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_df3bc8e7aab510f2fe71abe07671e59d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// JSON: '{\"\":\t[{}\r\r\n\n]\n \t\r, \"m\":\t\t\n{}\t,\r\r\t\"\\f$\\\";Z{\"\n: null'
	const char* json = "{\"\":\t[{}\r\r\n\n]\n \t\r, \"m\":\t\t\n{}\t,\r\r\t\"\\f$\\\";Z{\"\n: null";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\":\\t[{}\\r\\r\\n\\n]\\n \\t\\r, \\\"m\\\":\\t\\t\\n{}\\t,\\r\\r\\t\\\"\\\\f$\\\\\\\";Z{\\\"\\n: null" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b62d0116de8b001d445fa7ad6bdfe28b) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// JSON: '{\r\r \t\")\"\r\t\n\n: \r\n0e068095 \t, \t \t\"\\b\\\"\"\t:true \r ,\r\r '
	const char* json = "{\r\r \t\")\"\r\t\n\n: \r\n0e068095 \t, \t \t\"\\b\\\"\"\t:true \r ,\r\r ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r \\t\\\")\\\"\\r\\t\\n\\n: \\r\\n0e068095 \\t, \\t \\t\\\"\\\\b\\\\\\\"\\\"\\t:true \\r ,\\r\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_984d54629fe52ea5b86b1b76f41be639) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '{\r\r \"\"\r:\"\\ft\\/%n1\\\\\\rq\" \n\r\n,\"\\r|\\t\\f\\\"\\\\\\re\" :{ } '
	const char* json = "{\r\r \"\"\r:\"\\ft\\/%n1\\\\\\rq\" \n\r\n,\"\\r|\\t\\f\\\"\\\\\\re\" :{ } ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r \\\"\\\"\\r:\\\"\\\\ft\\\\/%n1\\\\\\\\\\\\rq\\\" \\n\\r\\n,\\\"\\\\r|\\\\t\\\\f\\\\\\\"\\\\\\\\\\\\re\\\" :{ } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f66bdfe65798db1bd394acf1dcdcbb1b) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\t\r\t\r\r\n\"\"\r\t\n\n:\"\\/\\n\"  \t, \r\t\r\n\"\\f\\\\[\\thWa>\\b\\b\\b\":['
	const char* json = "{\t\r\t\r\r\n\"\"\r\t\n\n:\"\\/\\n\"  \t, \r\t\r\n\"\\f\\\\[\\thWa>\\b\\b\\b\":[";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\t\\r\\r\\n\\\"\\\"\\r\\t\\n\\n:\\\"\\\\/\\\\n\\\"  \\t, \\r\\t\\r\\n\\\"\\\\f\\\\\\\\[\\\\thWa>\\\\b\\\\b\\\\b\\\":[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4435d5225a85d709e662c53f078e7dfe) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// JSON: '{\r \n\"\" \r\t:\t  -5\r\r \n, \n\r\",\\\\\\n\"\n\r:true\t\r\t,\r\"B\\f\\rq3'
	const char* json = "{\r \n\"\" \r\t:\t  -5\r\r \n, \n\r\",\\\\\\n\"\n\r:true\t\r\t,\r\"B\\f\\rq3";
	std::cerr << "Plain JSON string from model: " << "{\\r \\n\\\"\\\" \\r\\t:\\t  -5\\r\\r \\n, \\n\\r\\\",\\\\\\\\\\\\n\\\"\\n\\r:true\\t\\r\\t,\\r\\\"B\\\\f\\\\rq3" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cc709df21efe0074eafbd92839bb7db4) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{\t\t\n\n\"\"\r\n\t :null\t\t,\t\"[yN\\t\"\n :\r\r\r{\n\n\t\n\n \r\"]\"\t\t:\r{\t'
	const char* json = "{\t\t\n\n\"\"\r\n\t :null\t\t,\t\"[yN\\t\"\n :\r\r\r{\n\n\t\n\n \r\"]\"\t\t:\r{\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\n\\n\\\"\\\"\\r\\n\\t :null\\t\\t,\\t\\\"[yN\\\\t\\\"\\n :\\r\\r\\r{\\n\\n\\t\\n\\n \\r\\\"]\\\"\\t\\t:\\r{\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6ac2bd3c97d5941fb4659138a23509a6) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '\r\t {\n\"\\\\SO\":\r-50.0789e-0\t \n\r,\t\t\"\"\t\n:\r[]  \t \n,\t\r\r\n\"'
	const char* json = "\r\t {\n\"\\\\SO\":\r-50.0789e-0\t \n\r,\t\t\"\"\t\n:\r[]  \t \n,\t\r\r\n\"";
	std::cerr << "Plain JSON string from model: " << "\\r\\t {\\n\\\"\\\\\\\\SO\\\":\\r-50.0789e-0\\t \\n\\r,\\t\\t\\\"\\\"\\t\\n:\\r[]  \\t \\n,\\t\\r\\r\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c7971ddd8d93cfc3ff7123f22a25c4a3) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// JSON: '{\t\n\"4}\"\t\n:\"\",\n\t\"V\"\n\n:\"\\b\"\t\n\t\r,\n\"\\b\\b\"\r\n: \t\n[], \"\\/'
	const char* json = "{\t\n\"4}\"\t\n:\"\",\n\t\"V\"\n\n:\"\\b\"\t\n\t\r,\n\"\\b\\b\"\r\n: \t\n[], \"\\/";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"4}\\\"\\t\\n:\\\"\\\",\\n\\t\\\"V\\\"\\n\\n:\\\"\\\\b\\\"\\t\\n\\t\\r,\\n\\\"\\\\b\\\\b\\\"\\r\\n: \\t\\n[], \\\"\\\\/" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_80081069304ad0b5425e9c8ba10d89da) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\t\t \"M\\f\"  \r\n: \n\t\ttrue\r \t ,\t\n\"\\\\\"\n :-28E-08306,\r\t\n'
	const char* json = "{\t\t \"M\\f\"  \r\n: \n\t\ttrue\r \t ,\t\n\"\\\\\"\n :-28E-08306,\r\t\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t \\\"M\\\\f\\\"  \\r\\n: \\n\\t\\ttrue\\r \\t ,\\t\\n\\\"\\\\\\\\\\\"\\n :-28E-08306,\\r\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5899e801148dbd689e191e3a3661ca40) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '\n{\t\r \"\":-0.0e+02 ,\n \"1\"  \n:\n\"Q\\r\"\r, \t\r\"\\b\"\r \t :\t-0'
	const char* json = "\n{\t\r \"\":-0.0e+02 ,\n \"1\"  \n:\n\"Q\\r\"\r, \t\r\"\\b\"\r \t :\t-0";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\r \\\"\\\":-0.0e+02 ,\\n \\\"1\\\"  \\n:\\n\\\"Q\\\\r\\\"\\r, \\t\\r\\\"\\\\b\\\"\\r \\t :\\t-0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_20302951443a63d291eb73390de1dc49) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{ \n\r\"\"\r \r: \r\tnull \r ,\n\t \"\\r\\fH\"\n: \r null\t,\t\"\\f\\r\":'
	const char* json = "{ \n\r\"\"\r \r: \r\tnull \r ,\n\t \"\\r\\fH\"\n: \r null\t,\t\"\\f\\r\":";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\r\\\"\\\"\\r \\r: \\r\\tnull \\r ,\\n\\t \\\"\\\\r\\\\fH\\\"\\n: \\r null\\t,\\t\\\"\\\\f\\\\r\\\":" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9a4c84ef8cb88749d2834c6da3a5554f) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\t\r  \t\"\\t\"\r:true\t\n\r \t ,\t\"\"\r  \t:false \r,\n\n\"\\\"m\\rG\"\r'
	const char* json = "{\t\r  \t\"\\t\"\r:true\t\n\r \t ,\t\"\"\r  \t:false \r,\n\n\"\\\"m\\rG\"\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r  \\t\\\"\\\\t\\\"\\r:true\\t\\n\\r \\t ,\\t\\\"\\\"\\r  \\t:false \\r,\\n\\n\\\"\\\\\\\"m\\\\rG\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e241c8d39d80cdff6df9cc791dd15df9) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// JSON: ' {\t\"\"\n:6\r   ,\r\r\t\n\t\t\"\\/\"\r:{}\n\n \r\r,\r\t \r\"M\":{ \n\r\"R\\\\e'
	const char* json = " {\t\"\"\n:6\r   ,\r\r\t\n\t\t\"\\/\"\r:{}\n\n \r\r,\r\t \r\"M\":{ \n\r\"R\\\\e";
	std::cerr << "Plain JSON string from model: " << " {\\t\\\"\\\"\\n:6\\r   ,\\r\\r\\t\\n\\t\\t\\\"\\\\/\\\"\\r:{}\\n\\n \\r\\r,\\r\\t \\r\\\"M\\\":{ \\n\\r\\\"R\\\\\\\\e" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_50f32f12187cbfa3bfc546ed7a798492) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// JSON: ' { \t\t\"\\t%\":true  ,\"\" \t :\r-19   , \r\" \\\\\\n8\\\"\":\n\t\r\"('
	const char* json = " { \t\t\"\\t%\":true  ,\"\" \t :\r-19   , \r\" \\\\\\n8\\\"\":\n\t\r\"(";
	std::cerr << "Plain JSON string from model: " << " { \\t\\t\\\"\\\\t%\\\":true  ,\\\"\\\" \\t :\\r-19   , \\r\\\" \\\\\\\\\\\\n8\\\\\\\"\\\":\\n\\t\\r\\\"(" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c3ba486a3e10984a9b193d2d6d278538) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\n \n\r \r\t\"\\\\\":\tfalse,\"\\b2\"\t\n\n\r:\t[true]\n\t,\"\\\"\\\"\": \t\r'
	const char* json = "{\n \n\r \r\t\"\\\\\":\tfalse,\"\\b2\"\t\n\n\r:\t[true]\n\t,\"\\\"\\\"\": \t\r";
	std::cerr << "Plain JSON string from model: " << "{\\n \\n\\r \\r\\t\\\"\\\\\\\\\\\":\\tfalse,\\\"\\\\b2\\\"\\t\\n\\n\\r:\\t[true]\\n\\t,\\\"\\\\\\\"\\\\\\\"\\\": \\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c9ec1255e3b9da06d7df117c94e434f7) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{ \t\n\",@\\/a{\"\r:\n7275\r\t\r\n,\r \n\"\"\t\t\r\r:[\rfalse,\t[]\n\n],\r'
	const char* json = "{ \t\n\",@\\/a{\"\r:\n7275\r\t\r\n,\r \n\"\"\t\t\r\r:[\rfalse,\t[]\n\n],\r";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\n\\\",@\\\\/a{\\\"\\r:\\n7275\\r\\t\\r\\n,\\r \\n\\\"\\\"\\t\\t\\r\\r:[\\rfalse,\\t[]\\n\\n],\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_356803a96d7f1d837f687169258e6aae) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// CloseElements
	// JSON: '{ \n\r\"\"\t\t\n:  \"\\t\"\r \r\r\r\r,\"\\\"r\" \r:\r[[ \t\r[]  \n,[] \r\r]\r'
	const char* json = "{ \n\r\"\"\t\t\n:  \"\\t\"\r \r\r\r\r,\"\\\"r\" \r:\r[[ \t\r[]  \n,[] \r\r]\r";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\r\\\"\\\"\\t\\t\\n:  \\\"\\\\t\\\"\\r \\r\\r\\r\\r,\\\"\\\\\\\"r\\\" \\r:\\r[[ \\t\\r[]  \\n,[] \\r\\r]\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_827644c868b270ac0f73f5b5d8455ca9) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// JSON: '\r  {\r\r \"\\/\"\t:0,\r\"U!\\f\\/t3iGN\\fX\":-0 \t\r \r,\t \r\"\"\r  \t'
	const char* json = "\r  {\r\r \"\\/\"\t:0,\r\"U!\\f\\/t3iGN\\fX\":-0 \t\r \r,\t \r\"\"\r  \t";
	std::cerr << "Plain JSON string from model: " << "\\r  {\\r\\r \\\"\\\\/\\\"\\t:0,\\r\\\"U!\\\\f\\\\/t3iGN\\\\fX\\\":-0 \\t\\r \\r,\\t \\r\\\"\\\"\\r  \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_173a0b15bf59b5ebff50990bcbc3c763) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '\r\t\t{\r\r\t\"\\/\"  \t\r:\nfalse \t\n\n\t,\r\"\"\n \r:\t\n\rnull\r\r,\n\n\t\n\"'
	const char* json = "\r\t\t{\r\r\t\"\\/\"  \t\r:\nfalse \t\n\n\t,\r\"\"\n \r:\t\n\rnull\r\r,\n\n\t\n\"";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\t{\\r\\r\\t\\\"\\\\/\\\"  \\t\\r:\\nfalse \\t\\n\\n\\t,\\r\\\"\\\"\\n \\r:\\t\\n\\rnull\\r\\r,\\n\\n\\t\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_99bb7a806fe6139a3dafdd3fb5ba1495) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{ \"p5\"\t\r:{}, \r\r\n\"`\\/\": \r false\n\t  ,\r \n\n\"\\nFC\"  :\t\r'
	const char* json = "{ \"p5\"\t\r:{}, \r\r\n\"`\\/\": \r false\n\t  ,\r \n\n\"\\nFC\"  :\t\r";
	std::cerr << "Plain JSON string from model: " << "{ \\\"p5\\\"\\t\\r:{}, \\r\\r\\n\\\"`\\\\/\\\": \\r false\\n\\t  ,\\r \\n\\n\\\"\\\\nFC\\\"  :\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6a0abb7e9f3c5181ab7815fffd12e98b) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '{\n \n\"6\"\r\t\n:null \t\t,   \n\n\"\\t\\t\\r\\\"\\r>\"\r:\t\"t\\/1\"\t, \t'
	const char* json = "{\n \n\"6\"\r\t\n:null \t\t,   \n\n\"\\t\\t\\r\\\"\\r>\"\r:\t\"t\\/1\"\t, \t";
	std::cerr << "Plain JSON string from model: " << "{\\n \\n\\\"6\\\"\\r\\t\\n:null \\t\\t,   \\n\\n\\\"\\\\t\\\\t\\\\r\\\\\\\"\\\\r>\\\"\\r:\\t\\\"t\\\\/1\\\"\\t, \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7a706caaa6efac1739bfa249012cacf4) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\r{\r\t\"\" \r\r\n:\t{}\n\n,\n\"\\n\":\"X\\n\"\n\r\n\n,\n\t\r\"QCj\\/\"\t\t\r\n\t:\n-'
	const char* json = "\r{\r\t\"\" \r\r\n:\t{}\n\n,\n\"\\n\":\"X\\n\"\n\r\n\n,\n\t\r\"QCj\\/\"\t\t\r\n\t:\n-";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\t\\\"\\\" \\r\\r\\n:\\t{}\\n\\n,\\n\\\"\\\\n\\\":\\\"X\\\\n\\\"\\n\\r\\n\\n,\\n\\t\\r\\\"QCj\\\\/\\\"\\t\\t\\r\\n\\t:\\n-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cd5a1d4845e8c6468f2de628ca8b877a) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: ' {\r \t\"\\/\\r\\\"\"\r\n:\n\rnull\t\r\r,\t\t\n \"6k\"   \r\t:\t\t\nfalse\t\t'
	const char* json = " {\r \t\"\\/\\r\\\"\"\r\n:\n\rnull\t\r\r,\t\t\n \"6k\"   \r\t:\t\t\nfalse\t\t";
	std::cerr << "Plain JSON string from model: " << " {\\r \\t\\\"\\\\/\\\\r\\\\\\\"\\\"\\r\\n:\\n\\rnull\\t\\r\\r,\\t\\t\\n \\\"6k\\\"   \\r\\t:\\t\\t\\nfalse\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0c490229e08dd7a7a822b167ae3dfca7) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: ' \r{\r\r\r\"Cr\"\r\t:false\t\r\t   ,\r\t \"\"\r: \r\nfalse\r,\n\"h\\n\":\t'
	const char* json = " \r{\r\r\r\"Cr\"\r\t:false\t\r\t   ,\r\t \"\"\r: \r\nfalse\r,\n\"h\\n\":\t";
	std::cerr << "Plain JSON string from model: " << " \\r{\\r\\r\\r\\\"Cr\\\"\\r\\t:false\\t\\r\\t   ,\\r\\t \\\"\\\"\\r: \\r\\nfalse\\r,\\n\\\"h\\\\n\\\":\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d4102c9c3c100d937c89055c2fddc353) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '{  \t\"\"\n\r:\ntrue  \t \t\n,  \r\"\\b\"\r \t:\t\n[ null\r\n],\r\r\n\r\r\"'
	const char* json = "{  \t\"\"\n\r:\ntrue  \t \t\n,  \r\"\\b\"\r \t:\t\n[ null\r\n],\r\r\n\r\r\"";
	std::cerr << "Plain JSON string from model: " << "{  \\t\\\"\\\"\\n\\r:\\ntrue  \\t \\t\\n,  \\r\\\"\\\\b\\\"\\r \\t:\\t\\n[ null\\r\\n],\\r\\r\\n\\r\\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_11ca5f9e33fdaee5d928f890394708d7) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// JSON: '{\"\" :null\n\n\n,\n\t\r\"e\\\\j\\bM\\\\J\"\n: true \t ,\r\t\"\\f\" \n: \r-'
	const char* json = "{\"\" :null\n\n\n,\n\t\r\"e\\\\j\\bM\\\\J\"\n: true \t ,\r\t\"\\f\" \n: \r-";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\" :null\\n\\n\\n,\\n\\t\\r\\\"e\\\\\\\\j\\\\bM\\\\\\\\J\\\"\\n: true \\t ,\\r\\t\\\"\\\\f\\\" \\n: \\r-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5978d95300db8ecdd0174ca17ebf5014) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// JSON: ' {\r\t\r \n\"W>q\" \t:false\n\t\n,\t \"\\n\\f\":[true\r\t\t,[{\r\"RS\\\\'
	const char* json = " {\r\t\r \n\"W>q\" \t:false\n\t\n,\t \"\\n\\f\":[true\r\t\t,[{\r\"RS\\\\";
	std::cerr << "Plain JSON string from model: " << " {\\r\\t\\r \\n\\\"W>q\\\" \\t:false\\n\\t\\n,\\t \\\"\\\\n\\\\f\\\":[true\\r\\t\\t,[{\\r\\\"RS\\\\\\\\" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_436f1f377a2b6654a2137a9bbf49af28) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\n\r\t\">\\\"P\\f\\/-\": \"R]\\\\\"  ,\n\r \r\"\\b\":\r\n\ntrue ,\"\":\t{\r'
	const char* json = "{\n\r\t\">\\\"P\\f\\/-\": \"R]\\\\\"  ,\n\r \r\"\\b\":\r\n\ntrue ,\"\":\t{\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\t\\\">\\\\\\\"P\\\\f\\\\/-\\\": \\\"R]\\\\\\\\\\\"  ,\\n\\r \\r\\\"\\\\b\\\":\\r\\n\\ntrue ,\\\"\\\":\\t{\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_66f6fc88d2f765cd237895c6e40b3512) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '{\n\t\t  \"\\/\\\\\\t\"\r\n:0e0\t\n  ,\t \"\" \n\n:\"\\f\\\"0a\\fS\"\n,\r\"\\f'
	const char* json = "{\n\t\t  \"\\/\\\\\\t\"\r\n:0e0\t\n  ,\t \"\" \n\n:\"\\f\\\"0a\\fS\"\n,\r\"\\f";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\t  \\\"\\\\/\\\\\\\\\\\\t\\\"\\r\\n:0e0\\t\\n  ,\\t \\\"\\\" \\n\\n:\\\"\\\\f\\\\\\\"0a\\\\fS\\\"\\n,\\r\\\"\\\\f" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d247df083f455981e6426c79164db12d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: ' {\r\r\"~\":\"\"\n,\n\"\\\\\\r\\t\\t\\n\"\n:\t -50E-090\n\r\r\t\n\t\r,\"\\r\"\n'
	const char* json = " {\r\r\"~\":\"\"\n,\n\"\\\\\\r\\t\\t\\n\"\n:\t -50E-090\n\r\r\t\n\t\r,\"\\r\"\n";
	std::cerr << "Plain JSON string from model: " << " {\\r\\r\\\"~\\\":\\\"\\\"\\n,\\n\\\"\\\\\\\\\\\\r\\\\t\\\\t\\\\n\\\"\\n:\\t -50E-090\\n\\r\\r\\t\\n\\t\\r,\\\"\\\\r\\\"\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b0aec56e434c180230e57b8c4e6d979f) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '{\"\"\n\n\r:true \t,\t \t\t\"\\f#\"\r\t:\rfalse,\t  \"o{\"\t \t:\t0.070'
	const char* json = "{\"\"\n\n\r:true \t,\t \t\t\"\\f#\"\r\t:\rfalse,\t  \"o{\"\t \t:\t0.070";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\n\\n\\r:true \\t,\\t \\t\\t\\\"\\\\f#\\\"\\r\\t:\\rfalse,\\t  \\\"o{\\\"\\t \\t:\\t0.070" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_13085c2407ad3d8e9950e8f6f69b93b4) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '\n{\t \t\t \t\"\\/\\\":Q\\\\\"\n\n\n:\"\"\r, \"\\\\\\f\\f\":\"\\b0;\\t\\r\\\"c\"\t'
	const char* json = "\n{\t \t\t \t\"\\/\\\":Q\\\\\"\n\n\n:\"\"\r, \"\\\\\\f\\f\":\"\\b0;\\t\\r\\\"c\"\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t \\t\\t \\t\\\"\\\\/\\\\\\\":Q\\\\\\\\\\\"\\n\\n\\n:\\\"\\\"\\r, \\\"\\\\\\\\\\\\f\\\\f\\\":\\\"\\\\b0;\\\\t\\\\r\\\\\\\"c\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cd9d1badf86865ca8ea6832f335b0669) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// JSON: '{\r\r\t\"f\":\nfalse\r\t \r\n\n,\n \n \"\": []\t\t\r,\n\n\n\"\\f72\"\r \t:\"i'
	const char* json = "{\r\r\t\"f\":\nfalse\r\t \r\n\n,\n \n \"\": []\t\t\r,\n\n\n\"\\f72\"\r \t:\"i";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\\"f\\\":\\nfalse\\r\\t \\r\\n\\n,\\n \\n \\\"\\\": []\\t\\t\\r,\\n\\n\\n\\\"\\\\f72\\\"\\r \\t:\\\"i" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f272ae67ae5db78d0f4da9fd819964b4) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '{\r\n\n\"\\b La\\/\\r\\ny&\"\t:\n[]\r,  \n\t\n \"j\\r\\n\"\t\r:\n null\r '
	const char* json = "{\r\n\n\"\\b La\\/\\r\\ny&\"\t:\n[]\r,  \n\t\n \"j\\r\\n\"\t\r:\n null\r ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\n\\\"\\\\b La\\\\/\\\\r\\\\ny&\\\"\\t:\\n[]\\r,  \\n\\t\\n \\\"j\\\\r\\\\n\\\"\\t\\r:\\n null\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bde346a52f2e549230ca8cc9f0c047b6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// JSON: '{\r\"\\f\\b\\t\":\r\r\nnull,\"Q\\\\\\n\\\"\":\"\"\t ,\n\"\\r\" \n  \t:false'
	const char* json = "{\r\"\\f\\b\\t\":\r\r\nnull,\"Q\\\\\\n\\\"\":\"\"\t ,\n\"\\r\" \n  \t:false";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\f\\\\b\\\\t\\\":\\r\\r\\nnull,\\\"Q\\\\\\\\\\\\n\\\\\\\"\\\":\\\"\\\"\\t ,\\n\\\"\\\\r\\\" \\n  \\t:false" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_295a8705ec99c4bf3818c8aa416de676) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// JSON: '{\r\"\"\r \r:\t \rnull\n \r\r\n,\n\":.yt\\fD)\":\"3\"\t \t\n ,\t \r \r\n\"='
	const char* json = "{\r\"\"\r \r:\t \rnull\n \r\r\n,\n\":.yt\\fD)\":\"3\"\t \t\n ,\t \r \r\n\"=";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\r \\r:\\t \\rnull\\n \\r\\r\\n,\\n\\\":.yt\\\\fD)\\\":\\\"3\\\"\\t \\t\\n ,\\t \\r \\r\\n\\\"=" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0956c6b0cb6ce096001837745cd285cc) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '{\r\n\"h:\\\"\":-1E-063,\t\n \"Jq\" \t :{}\r,\t\t \"\":\ntrue\r \t, \r'
	const char* json = "{\r\n\"h:\\\"\":-1E-063,\t\n \"Jq\" \t :{}\r,\t\t \"\":\ntrue\r \t, \r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"h:\\\\\\\"\\\":-1E-063,\\t\\n \\\"Jq\\\" \\t :{}\\r,\\t\\t \\\"\\\":\\ntrue\\r \\t, \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_924c7bc7dbb223cec3c5b07352321524) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '\r\n {  \t\"\\f\"\t:\t\nnull\t\n   ,\r\t \t\"P\\n\": \t\r -10e-0\t,\n\r\t'
	const char* json = "\r\n {  \t\"\\f\"\t:\t\nnull\t\n   ,\r\t \t\"P\\n\": \t\r -10e-0\t,\n\r\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\n {  \\t\\\"\\\\f\\\"\\t:\\t\\nnull\\t\\n   ,\\r\\t \\t\\\"P\\\\n\\\": \\t\\r -10e-0\\t,\\n\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_84e00e52db6fecb0c6bf0e9e77142e31) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: ' {\"\\t\\\\\"\n\n:\n\t [\t[],false] \n\t\n ,\n\t\t\"\\r\":{\n\r\"\"\t\r\t:{\t'
	const char* json = " {\"\\t\\\\\"\n\n:\n\t [\t[],false] \n\t\n ,\n\t\t\"\\r\":{\n\r\"\"\t\r\t:{\t";
	std::cerr << "Plain JSON string from model: " << " {\\\"\\\\t\\\\\\\\\\\"\\n\\n:\\n\\t [\\t[],false] \\n\\t\\n ,\\n\\t\\t\\\"\\\\r\\\":{\\n\\r\\\"\\\"\\t\\r\\t:{\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0df34ebe77ad8d866329243ed4b4a7ed) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '\n{ \"\\\"\\r!\\\\\\\\>\\\"+\"\t\r:false\r,\t \"\"\t :\n\r-0e-0\t\r , \t\t\"'
	const char* json = "\n{ \"\\\"\\r!\\\\\\\\>\\\"+\"\t\r:false\r,\t \"\"\t :\n\r-0e-0\t\r , \t\t\"";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\\"\\\\\\\"\\\\r!\\\\\\\\\\\\\\\\>\\\\\\\"+\\\"\\t\\r:false\\r,\\t \\\"\\\"\\t :\\n\\r-0e-0\\t\\r , \\t\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_61db6599042a87d1591d1e32c2eb9123) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// JSON: '  \t{ \t\n\r\"\\t\":\r\r{\n \"jyB\": {\n\t\"\\nx\":{ \t\"\"\n\t\n:\tnull\r}'
	const char* json = "  \t{ \t\n\r\"\\t\":\r\r{\n \"jyB\": {\n\t\"\\nx\":{ \t\"\"\n\t\n:\tnull\r}";
	std::cerr << "Plain JSON string from model: " << "  \\t{ \\t\\n\\r\\\"\\\\t\\\":\\r\\r{\\n \\\"jyB\\\": {\\n\\t\\\"\\\\nx\\\":{ \\t\\\"\\\"\\n\\t\\n:\\tnull\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ac1f11ea1d7b295353c0c0c139fc7ff0) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\t { \"\"  \t:\t\"\\/[\"\t \r,\"\\/\\t\" :\ntrue ,\r\n  \"\\/`\\fz7\"\n:'
	const char* json = "\t { \"\"  \t:\t\"\\/[\"\t \r,\"\\/\\t\" :\ntrue ,\r\n  \"\\/`\\fz7\"\n:";
	std::cerr << "Plain JSON string from model: " << "\\t { \\\"\\\"  \\t:\\t\\\"\\\\/[\\\"\\t \\r,\\\"\\\\/\\\\t\\\" :\\ntrue ,\\r\\n  \\\"\\\\/`\\\\fz7\\\"\\n:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_18d3b292c259079c7841f8c9d478bcf8) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '{\r\r \"\"\n \t:null \n\r\r ,\n\r\n\"C\"\n\n: \t\"\\/\\f\\t\\f\"\t  ,\t \t \"'
	const char* json = "{\r\r \"\"\n \t:null \n\r\r ,\n\r\n\"C\"\n\n: \t\"\\/\\f\\t\\f\"\t  ,\t \t \"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r \\\"\\\"\\n \\t:null \\n\\r\\r ,\\n\\r\\n\\\"C\\\"\\n\\n: \\t\\\"\\\\/\\\\f\\\\t\\\\f\\\"\\t  ,\\t \\t \\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fea33ba5b249314c0f2d0b6e9a1aef3e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// JSON: '\t{\t\"4\\\"\"\t\t:\r\r null,  \n \"|k\"\t:-315.0 \t\r,\t\"_!\\b\": \"I'
	const char* json = "\t{\t\"4\\\"\"\t\t:\r\r null,  \n \"|k\"\t:-315.0 \t\r,\t\"_!\\b\": \"I";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\\"4\\\\\\\"\\\"\\t\\t:\\r\\r null,  \\n \\\"|k\\\"\\t:-315.0 \\t\\r,\\t\\\"_!\\\\b\\\": \\\"I" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4c2cac8671afe4161f7db7c159a53c28) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// JSON: '{\"TyK\"\r\t\t \r\n:\r\r74\r, \r\"\":[] , \t\">\\/1\"\n:[]\n\t,\"\\b\"\r\n '
	const char* json = "{\"TyK\"\r\t\t \r\n:\r\r74\r, \r\"\":[] , \t\">\\/1\"\n:[]\n\t,\"\\b\"\r\n ";
	std::cerr << "Plain JSON string from model: " << "{\\\"TyK\\\"\\r\\t\\t \\r\\n:\\r\\r74\\r, \\r\\\"\\\":[] , \\t\\\">\\\\/1\\\"\\n:[]\\n\\t,\\\"\\\\b\\\"\\r\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ffc2e107578e8b0e89facf8cafaff72c) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\"\":false\r\n\r \t,\n\n\r\"\\n\\b\\rV\" : null\t \t\t\t\n\n\t\r,\r\r\n\"n\"'
	const char* json = "{\"\":false\r\n\r \t,\n\n\r\"\\n\\b\\rV\" : null\t \t\t\t\n\n\t\r,\r\r\n\"n\"";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\":false\\r\\n\\r \\t,\\n\\n\\r\\\"\\\\n\\\\b\\\\rV\\\" : null\\t \\t\\t\\t\\n\\n\\t\\r,\\r\\r\\n\\\"n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5b70fa2a4348e0fc4c9255d6b673821e) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// JSON: '{\r\t\"\"\n\n: \t\t[]\r,\r\r\"\\/\":\"\\\"8\"\n,\n \"\\/\\bW@\":\n\n{} \n\r\r,\"'
	const char* json = "{\r\t\"\"\n\n: \t\t[]\r,\r\r\"\\/\":\"\\\"8\"\n,\n \"\\/\\bW@\":\n\n{} \n\r\r,\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"\\\"\\n\\n: \\t\\t[]\\r,\\r\\r\\\"\\\\/\\\":\\\"\\\\\\\"8\\\"\\n,\\n \\\"\\\\/\\\\bW@\\\":\\n\\n{} \\n\\r\\r,\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_10344bb1e809d8bb4dc7b04bd0780b5e) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// JSON: '\t\r{ \r\t\t\t \t \"\\b%\"\t: \"\\n \"  ,\t\"\": [false\r\r,\r\n[]\r\n\n ]'
	const char* json = "\t\r{ \r\t\t\t \t \"\\b%\"\t: \"\\n \"  ,\t\"\": [false\r\r,\r\n[]\r\n\n ]";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{ \\r\\t\\t\\t \\t \\\"\\\\b%\\\"\\t: \\\"\\\\n \\\"  ,\\t\\\"\\\": [false\\r\\r,\\r\\n[]\\r\\n\\n ]" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cfa9614cf40a508c79665f211cf756aa) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// JSON: '{ \"\"  :null\n \t,\"|\\rp\\r\\n\"\n :\t\"\\\"E\"  \r\t, \t \"\\/\\r\":\"'
	const char* json = "{ \"\"  :null\n \t,\"|\\rp\\r\\n\"\n :\t\"\\\"E\"  \r\t, \t \"\\/\\r\":\"";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"  :null\\n \\t,\\\"|\\\\rp\\\\r\\\\n\\\"\\n :\\t\\\"\\\\\\\"E\\\"  \\r\\t, \\t \\\"\\\\/\\\\r\\\":\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a0f1767f9afdc6d8c13e731eddec66a9) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// JSON: ' {\t\t\t\t\"\":[false \t\n,\rnull\r \r\n]\t,\r\t\r\"\\t\\fY\\f\\b\":\r\"\\n'
	const char* json = " {\t\t\t\t\"\":[false \t\n,\rnull\r \r\n]\t,\r\t\r\"\\t\\fY\\f\\b\":\r\"\\n";
	std::cerr << "Plain JSON string from model: " << " {\\t\\t\\t\\t\\\"\\\":[false \\t\\n,\\rnull\\r \\r\\n]\\t,\\r\\t\\r\\\"\\\\t\\\\fY\\\\f\\\\b\\\":\\r\\\"\\\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5758980f98731292420a19fe433c88d8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\n{\t\"\\r\"\t :\t\tnull\r \r  \n,\t\r\n\"$\\n\\/tXQC\"\r\r: \nnull\r , '
	const char* json = "\n{\t\"\\r\"\t :\t\tnull\r \r  \n,\t\r\n\"$\\n\\/tXQC\"\r\r: \nnull\r , ";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\\"\\\\r\\\"\\t :\\t\\tnull\\r \\r  \\n,\\t\\r\\n\\\"$\\\\n\\\\/tXQC\\\"\\r\\r: \\nnull\\r , " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_82e273247fbfc40c7ba33ee6abe92d71) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// JSON: '{\t  \n\n\"\\\\\\\"\\bO\"\r\r\r:true\t\r\n,\t\"\\tA\" :[[]\r,  \n0e074  '
	const char* json = "{\t  \n\n\"\\\\\\\"\\bO\"\r\r\r:true\t\r\n,\t\"\\tA\" :[[]\r,  \n0e074  ";
	std::cerr << "Plain JSON string from model: " << "{\\t  \\n\\n\\\"\\\\\\\\\\\\\\\"\\\\bO\\\"\\r\\r\\r:true\\t\\r\\n,\\t\\\"\\\\tA\\\" :[[]\\r,  \\n0e074  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ecc0a2aa3d09cfc937ad66c6158363d9) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\r\r\"R\\r\"\r\n:\tnull,\n\r\t\r\";\\/\\r]\"\t\t:true\n   ,\t\n\n\t\"\\b\"\t'
	const char* json = "{\r\r\"R\\r\"\r\n:\tnull,\n\r\t\r\";\\/\\r]\"\t\t:true\n   ,\t\n\n\t\"\\b\"\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\\"R\\\\r\\\"\\r\\n:\\tnull,\\n\\r\\t\\r\\\";\\\\/\\\\r]\\\"\\t\\t:true\\n   ,\\t\\n\\n\\t\\\"\\\\b\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f71a85fdaf4774f24c6f742866ae2bec) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// JSON: '\n{\r\t\"\\n'W\"\n:false\r\n,\r\n\n\t \t \n\"\"\r\r \n\r\t: false  \t\n\n,\n'
	const char* json = "\n{\r\t\"\\n'W\"\n:false\r\n,\r\n\n\t \t \n\"\"\r\r \n\r\t: false  \t\n\n,\n";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\t\\\"\\\\n'W\\\"\\n:false\\r\\n,\\r\\n\\n\\t \\t \\n\\\"\\\"\\r\\r \\n\\r\\t: false  \\t\\n\\n,\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_83aa87416e510bee6a846ff438251783) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\n\"\"\n:\r\"\\b\\\\\\b\" \t\n,\r\n\r\"ZI\" :\r\n0.0E+0\r\t\t\n,\r\r\n\"\\tm1\"'
	const char* json = "{\n\"\"\n:\r\"\\b\\\\\\b\" \t\n,\r\n\r\"ZI\" :\r\n0.0E+0\r\t\t\n,\r\r\n\"\\tm1\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\"\\n:\\r\\\"\\\\b\\\\\\\\\\\\b\\\" \\t\\n,\\r\\n\\r\\\"ZI\\\" :\\r\\n0.0E+0\\r\\t\\t\\n,\\r\\r\\n\\\"\\\\tm1\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1e7adc98fe9251d25d57ce8693caaa63) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\t\t{ \n\"\\n\\bI\"\n\r\n\r:\nfalse\t\t,\r\n\r\"m\"\n\t\r:null\n\r\t,\r  \"\" '
	const char* json = "\t\t{ \n\"\\n\\bI\"\n\r\n\r:\nfalse\t\t,\r\n\r\"m\"\n\t\r:null\n\r\t,\r  \"\" ";
	std::cerr << "Plain JSON string from model: " << "\\t\\t{ \\n\\\"\\\\n\\\\bI\\\"\\n\\r\\n\\r:\\nfalse\\t\\t,\\r\\n\\r\\\"m\\\"\\n\\t\\r:null\\n\\r\\t,\\r  \\\"\\\" " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_21a4d1a88cb88b6a415429500abf996a) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// JSON: '\r\n\t{\n\r \"\":[\t] \t,\r\n\n  \"\\r\"\n:true\n \t,\n\"\\\"\":\ttrue ,\t '
	const char* json = "\r\n\t{\n\r \"\":[\t] \t,\r\n\n  \"\\r\"\n:true\n \t,\n\"\\\"\":\ttrue ,\t ";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\t{\\n\\r \\\"\\\":[\\t] \\t,\\r\\n\\n  \\\"\\\\r\\\"\\n:true\\n \\t,\\n\\\"\\\\\\\"\\\":\\ttrue ,\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f3ec6ff25686c6132469002b597b83f8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// JSON: '\n{\n\t \t\"\"\r:null\n\t \r,\r\t\t \r\n\n\t\"Z\\\"\":\"\\f\"\t\r\t,\r\n\"\\/+h\\/'
	const char* json = "\n{\n\t \t\"\"\r:null\n\t \r,\r\t\t \r\n\n\t\"Z\\\"\":\"\\f\"\t\r\t,\r\n\"\\/+h\\/";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\t \\t\\\"\\\"\\r:null\\n\\t \\r,\\r\\t\\t \\r\\n\\n\\t\\\"Z\\\\\\\"\\\":\\\"\\\\f\\\"\\t\\r\\t,\\r\\n\\\"\\\\/+h\\\\/" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_95144cd36bdc3f64d4dbc963bcb69016) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// JSON: '{\t \t\t\n\n\r\"\\f\\b\\fC\": \"\\b}\\\\P\"\r\r\t\t,\r\t \n\"\\\"-\\bl\"\n:[ [\"'
	const char* json = "{\t \t\t\n\n\r\"\\f\\b\\fC\": \"\\b}\\\\P\"\r\r\t\t,\r\t \n\"\\\"-\\bl\"\n:[ [\"";
	std::cerr << "Plain JSON string from model: " << "{\\t \\t\\t\\n\\n\\r\\\"\\\\f\\\\b\\\\fC\\\": \\\"\\\\b}\\\\\\\\P\\\"\\r\\r\\t\\t,\\r\\t \\n\\\"\\\\\\\"-\\\\bl\\\"\\n:[ [\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_05d28c9bc150e343ef041004d2821089) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// JSON: '{\r \r\"\" :\tfalse,\t  \r\n\">\"\t\n:true\n\n\t,\"\\\"\"\t\t\t:false \t\r'
	const char* json = "{\r \r\"\" :\tfalse,\t  \r\n\">\"\t\n:true\n\n\t,\"\\\"\"\t\t\t:false \t\r";
	std::cerr << "Plain JSON string from model: " << "{\\r \\r\\\"\\\" :\\tfalse,\\t  \\r\\n\\\">\\\"\\t\\n:true\\n\\n\\t,\\\"\\\\\\\"\\\"\\t\\t\\t:false \\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e3bcd7afb3cfa07b917f05854370f32c) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// JSON: '{  \"9st\\fY\\r\":\"\\b5{\\r\" \t \n\n\r,\r  \n\n\r\"\\r0cv\"\r:null\t\t'
	const char* json = "{  \"9st\\fY\\r\":\"\\b5{\\r\" \t \n\n\r,\r  \n\n\r\"\\r0cv\"\r:null\t\t";
	std::cerr << "Plain JSON string from model: " << "{  \\\"9st\\\\fY\\\\r\\\":\\\"\\\\b5{\\\\r\\\" \\t \\n\\n\\r,\\r  \\n\\n\\r\\\"\\\\r0cv\\\"\\r:null\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8a22a42fd40d587df844137a2dc9bf66) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// CloseElements
	// JSON: '{\t\r\n\n\t\"\\\\\"\r\t\n:null\r\n\t\n\r,\r \t\r\r\"(bp\\n\\f\\\\\\b\" \r\n:[{\t}'
	const char* json = "{\t\r\n\n\t\"\\\\\"\r\t\n:null\r\n\t\n\r,\r \t\r\r\"(bp\\n\\f\\\\\\b\" \r\n:[{\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\n\\n\\t\\\"\\\\\\\\\\\"\\r\\t\\n:null\\r\\n\\t\\n\\r,\\r \\t\\r\\r\\\"(bp\\\\n\\\\f\\\\\\\\\\\\b\\\" \\r\\n:[{\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fd94d07b8ac77b0c2677a13af4cc634a) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// JSON: ' \n\n{\n\"j\":\rnull\n\n,\n\r\t \n\"\" :[],\t\t\n\"te\\\\\\\"h\":{  }\t, \r'
	const char* json = " \n\n{\n\"j\":\rnull\n\n,\n\r\t \n\"\" :[],\t\t\n\"te\\\\\\\"h\":{  }\t, \r";
	std::cerr << "Plain JSON string from model: " << " \\n\\n{\\n\\\"j\\\":\\rnull\\n\\n,\\n\\r\\t \\n\\\"\\\" :[],\\t\\t\\n\\\"te\\\\\\\\\\\\\\\"h\\\":{  }\\t, \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ccba720efcae1c8615f4c96d76b8b15d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// JSON: ' {\t\"\\f\\b\\t\"\n\n\t:\"\\/\\f\\\\\"\r,\"\"\t: \t-2.025\n,\"\\/\\\\f*\"\r:\n'
	const char* json = " {\t\"\\f\\b\\t\"\n\n\t:\"\\/\\f\\\\\"\r,\"\"\t: \t-2.025\n,\"\\/\\\\f*\"\r:\n";
	std::cerr << "Plain JSON string from model: " << " {\\t\\\"\\\\f\\\\b\\\\t\\\"\\n\\n\\t:\\\"\\\\/\\\\f\\\\\\\\\\\"\\r,\\\"\\\"\\t: \\t-2.025\\n,\\\"\\\\/\\\\\\\\f*\\\"\\r:\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4a7892bb85ee024e9745de738cf9fae0) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// JSON: '\r{\"\"\r:84\t\r\r,\t\n\r\"A\\\"\"\t\n :\n\r0e-0, \t\"9\" \t\t:\"*\\f\"\n,\r\"&'
	const char* json = "\r{\"\"\r:84\t\r\r,\t\n\r\"A\\\"\"\t\n :\n\r0e-0, \t\"9\" \t\t:\"*\\f\"\n,\r\"&";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\"\\r:84\\t\\r\\r,\\t\\n\\r\\\"A\\\\\\\"\\\"\\t\\n :\\n\\r0e-0, \\t\\\"9\\\" \\t\\t:\\\"*\\\\f\\\"\\n,\\r\\\"&" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_dfefa81a35003f000abc577c87a87f43) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// JSON: '\r{\t \"\\tM\\b\":0 \r\n,\t\r\"\\t\"\r:\n\n0e0,\t\n\"\"\r\t\r\n:\t null,\r\"W'
	const char* json = "\r{\t \"\\tM\\b\":0 \r\n,\t\r\"\\t\"\r:\n\n0e0,\t\n\"\"\r\t\r\n:\t null,\r\"W";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t \\\"\\\\tM\\\\b\\\":0 \\r\\n,\\t\\r\\\"\\\\t\\\"\\r:\\n\\n0e0,\\t\\n\\\"\\\"\\r\\t\\r\\n:\\t null,\\r\\\"W" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5a0281d1ebf830bac6f5130e859af61b) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// JSON: '{\r\"\\r\\nN1\" \t\n:\rtrue\r,\"\"   : false\n,\n\"5rs\\bkbR\":\"&@'
	const char* json = "{\r\"\\r\\nN1\" \t\n:\rtrue\r,\"\"   : false\n,\n\"5rs\\bkbR\":\"&@";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\r\\\\nN1\\\" \\t\\n:\\rtrue\\r,\\\"\\\"   : false\\n,\\n\\\"5rs\\\\bkbR\\\":\\\"&@" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f982baae94ec75c4dac610c14d9293f2) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: ' {\r\r\r\n\"-,\\f&\"\n\n:\"4\\/\\/\" \n\n,\n \t\":l\"\n\r\t \r:null\r\t \r\t,'
	const char* json = " {\r\r\r\n\"-,\\f&\"\n\n:\"4\\/\\/\" \n\n,\n \t\":l\"\n\r\t \r:null\r\t \r\t,";
	std::cerr << "Plain JSON string from model: " << " {\\r\\r\\r\\n\\\"-,\\\\f&\\\"\\n\\n:\\\"4\\\\/\\\\/\\\" \\n\\n,\\n \\t\\\":l\\\"\\n\\r\\t \\r:null\\r\\t \\r\\t," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fec3644154e6f880aa838d1058cb9725) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// JSON: '  \r{\n  \t\"\\n\"\n:{\t}\n\n,\r\n\t\t\"\" \r\t\t:0.0   \r \r\n,\n \r\";\"\r\r'
	const char* json = "  \r{\n  \t\"\\n\"\n:{\t}\n\n,\r\n\t\t\"\" \r\t\t:0.0   \r \r\n,\n \r\";\"\r\r";
	std::cerr << "Plain JSON string from model: " << "  \\r{\\n  \\t\\\"\\\\n\\\"\\n:{\\t}\\n\\n,\\r\\n\\t\\t\\\"\\\" \\r\\t\\t:0.0   \\r \\r\\n,\\n \\r\\\";\\\"\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4e76590b2e3b96a43621b88aacc09ad3) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// JSON: '\t {\n\n\"\\b\"\r \r \r\t:\n\r[\n{}]\n  \t,\n\"\\n\" \t\t:\n\r-0.09  \t,\n\n'
	const char* json = "\t {\n\n\"\\b\"\r \r \r\t:\n\r[\n{}]\n  \t,\n\"\\n\" \t\t:\n\r-0.09  \t,\n\n";
	std::cerr << "Plain JSON string from model: " << "\\t {\\n\\n\\\"\\\\b\\\"\\r \\r \\r\\t:\\n\\r[\\n{}]\\n  \\t,\\n\\\"\\\\n\\\" \\t\\t:\\n\\r-0.09  \\t,\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_af11ca8db57756b6307297014259ac55) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '\r{\t\n\"\\n\" : \ntrue,\n\r\n\n\"\\f|v\\n\"   :true,\"\":\r\tnull,\r\"'
	const char* json = "\r{\t\n\"\\n\" : \ntrue,\n\r\n\n\"\\f|v\\n\"   :true,\"\":\r\tnull,\r\"";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\n\\\"\\\\n\\\" : \\ntrue,\\n\\r\\n\\n\\\"\\\\f|v\\\\n\\\"   :true,\\\"\\\":\\r\\tnull,\\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3085db68220bd75812bc03e48e0f1421) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '{ \"\\n>!\\\"p\":\t \n{ \n \"L&\\/\"\t \n:{}\t\n}\r\r \n\t \n ,\n\"\\\"\\b\"'
	const char* json = "{ \"\\n>!\\\"p\":\t \n{ \n \"L&\\/\"\t \n:{}\t\n}\r\r \n\t \n ,\n\"\\\"\\b\"";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\n>!\\\\\\\"p\\\":\\t \\n{ \\n \\\"L&\\\\/\\\"\\t \\n:{}\\t\\n}\\r\\r \\n\\t \\n ,\\n\\\"\\\\\\\"\\\\b\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2e6f9793173cedd7e35a3117a8175acb) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// JSON: '{ \r\n\r\"\":\"@\"\r\r,   \n\"C\"\t\n :null\n\r,\t\"d\\b\\\\\\/\\b\"\t\t:{\"t'
	const char* json = "{ \r\n\r\"\":\"@\"\r\r,   \n\"C\"\t\n :null\n\r,\t\"d\\b\\\\\\/\\b\"\t\t:{\"t";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\n\\r\\\"\\\":\\\"@\\\"\\r\\r,   \\n\\\"C\\\"\\t\\n :null\\n\\r,\\t\\\"d\\\\b\\\\\\\\\\\\/\\\\b\\\"\\t\\t:{\\\"t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3ea1352e6ee14d8aa1d5161a6e86db6e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// JSON: '\r{\"\\b\\b\\/B\\\"\"\n\n:\ntrue   ,\r\n \n\t\"\\t\\\"I\"\t \t\t\r:\r[[\n \n{'
	const char* json = "\r{\"\\b\\b\\/B\\\"\"\n\n:\ntrue   ,\r\n \n\t\"\\t\\\"I\"\t \t\t\r:\r[[\n \n{";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\\b\\\\b\\\\/B\\\\\\\"\\\"\\n\\n:\\ntrue   ,\\r\\n \\n\\t\\\"\\\\t\\\\\\\"I\\\"\\t \\t\\t\\r:\\r[[\\n \\n{" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3c38b5aef21d7856dacf05938606a36e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\r{\"\\\"M\\\\\\b\\\\\\\":\"\r\t:false\r\t,\t\n\t \t\"L\"  \r:\rfalse\r\t\r\t,'
	const char* json = "\r{\"\\\"M\\\\\\b\\\\\\\":\"\r\t:false\r\t,\t\n\t \t\"L\"  \r:\rfalse\r\t\r\t,";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\\\\\"M\\\\\\\\\\\\b\\\\\\\\\\\\\\\":\\\"\\r\\t:false\\r\\t,\\t\\n\\t \\t\\\"L\\\"  \\r:\\rfalse\\r\\t\\r\\t," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d86e7d0378364bee73a15a13de6a2b9d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// JSON: '{ \t\"u\\r\"\n:false\t\r ,\n \"\":\r{\"K\\b\\td\" \t: \rtrue \n ,\r \r'
	const char* json = "{ \t\"u\\r\"\n:false\t\r ,\n \"\":\r{\"K\\b\\td\" \t: \rtrue \n ,\r \r";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"u\\\\r\\\"\\n:false\\t\\r ,\\n \\\"\\\":\\r{\\\"K\\\\b\\\\td\\\" \\t: \\rtrue \\n ,\\r \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f781060ac81e8f4d2808ef9f4167d2dd) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// JSON: '{\r\r\"\\r\":{}\t\n,\t\"\":\r[\t]\r\r\r\n\r,\"K\\/ag\\r\\\"x\"\r  :{\r}\t\n\n\t'
	const char* json = "{\r\r\"\\r\":{}\t\n,\t\"\":\r[\t]\r\r\r\n\r,\"K\\/ag\\r\\\"x\"\r  :{\r}\t\n\n\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\\"\\\\r\\\":{}\\t\\n,\\t\\\"\\\":\\r[\\t]\\r\\r\\r\\n\\r,\\\"K\\\\/ag\\\\r\\\\\\\"x\\\"\\r  :{\\r}\\t\\n\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5a613a6905bc8e0d687f656c53234de6) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// JSON: '{ \r\r  \"\":null \r\t,   \"Xc\\t\" \r\r:\n\n\ttrue\t \r\n,\t\t\n\n\"\\bE'
	const char* json = "{ \r\r  \"\":null \r\t,   \"Xc\\t\" \r\r:\n\n\ttrue\t \r\n,\t\t\n\n\"\\bE";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\r  \\\"\\\":null \\r\\t,   \\\"Xc\\\\t\\\" \\r\\r:\\n\\n\\ttrue\\t \\r\\n,\\t\\t\\n\\n\\\"\\\\bE" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_487202e4d9cb637084a34a46c58af9e5) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\r\t\n\"\"\r\n:\t\"?\" \n, \n\n\n\"B0\\t\"\r\n \n:null,\r\"\\r\" \r:\t\r\t{ \n'
	const char* json = "{\r\t\n\"\"\r\n:\t\"?\" \n, \n\n\n\"B0\\t\"\r\n \n:null,\r\"\\r\" \r:\t\r\t{ \n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\n\\\"\\\"\\r\\n:\\t\\\"?\\\" \\n, \\n\\n\\n\\\"B0\\\\t\\\"\\r\\n \\n:null,\\r\\\"\\\\r\\\" \\r:\\t\\r\\t{ \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c1a0c3bd2a953a2f867d2c15e48a0166) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// JSON: '{\n \"!\"\t:\n0e0438\n,\r\n\"\\f\\b\\n|K\" \r:\t [\r\tnull\n \n\t]\t,\"V'
	const char* json = "{\n \"!\"\t:\n0e0438\n,\r\n\"\\f\\b\\n|K\" \r:\t [\r\tnull\n \n\t]\t,\"V";
	std::cerr << "Plain JSON string from model: " << "{\\n \\\"!\\\"\\t:\\n0e0438\\n,\\r\\n\\\"\\\\f\\\\b\\\\n|K\\\" \\r:\\t [\\r\\tnull\\n \\n\\t]\\t,\\\"V" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a8e93af5b94bbec159adac4776d87be4) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\t{\t\r\n\"\\f\"\t: [\n {\n\r\t\r\n\n\"\"\n \r\n:null\r \t\n,  \r \t\"e\\/'\"\t'
	const char* json = "\t{\t\r\n\"\\f\"\t: [\n {\n\r\t\r\n\n\"\"\n \r\n:null\r \t\n,  \r \t\"e\\/'\"\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\r\\n\\\"\\\\f\\\"\\t: [\\n {\\n\\r\\t\\r\\n\\n\\\"\\\"\\n \\r\\n:null\\r \\t\\n,  \\r \\t\\\"e\\\\/'\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e14002a740aa614efc6f66af86d3c32d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '\r{\"U\"\r:\nnull\r ,\n \r \t\"\\/\\f\\\"h&\" \n \n:\"\"\t   \t\r\t\n,\n  \t'
	const char* json = "\r{\"U\"\r:\nnull\r ,\n \r \t\"\\/\\f\\\"h&\" \n \n:\"\"\t   \t\r\t\n,\n  \t";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"U\\\"\\r:\\nnull\\r ,\\n \\r \\t\\\"\\\\/\\\\f\\\\\\\"h&\\\" \\n \\n:\\\"\\\"\\t   \\t\\r\\t\\n,\\n  \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_947b577e8ae4328e04dc86e309b347d6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// JSON: '{ \n\"\\b\\/\":null\t\r\t\r,  \r\r\n\t\"P5F\\r\"\t:[\n\r \ttrue ,false'
	const char* json = "{ \n\"\\b\\/\":null\t\r\t\r,  \r\r\n\t\"P5F\\r\"\t:[\n\r \ttrue ,false";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\\b\\\\/\\\":null\\t\\r\\t\\r,  \\r\\r\\n\\t\\\"P5F\\\\r\\\"\\t:[\\n\\r \\ttrue ,false" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e4efb21ec8bfc37f4d9a20fa17518faa) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// JSON: '{\n\".\\r\"\r  \t:\tfalse\n \t  ,\t \r\"\\n\\r\"\n\r\r\n:\t{\n}\r\r,\t\t \"^'
	const char* json = "{\n\".\\r\"\r  \t:\tfalse\n \t  ,\t \r\"\\n\\r\"\n\r\r\n:\t{\n}\r\r,\t\t \"^";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\".\\\\r\\\"\\r  \\t:\\tfalse\\n \\t  ,\\t \\r\\\"\\\\n\\\\r\\\"\\n\\r\\r\\n:\\t{\\n}\\r\\r,\\t\\t \\\"^" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_39f9b3aadc6a403e38b32e25cd1bd290) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// JSON: '\r {\r\"\":true\n, \t\t\n\t\"SMK\":\r \nfalse\n\r\r\n, \"-^0\\b4\\b\"\n\n'
	const char* json = "\r {\r\"\":true\n, \t\t\n\t\"SMK\":\r \nfalse\n\r\r\n, \"-^0\\b4\\b\"\n\n";
	std::cerr << "Plain JSON string from model: " << "\\r {\\r\\\"\\\":true\\n, \\t\\t\\n\\t\\\"SMK\\\":\\r \\nfalse\\n\\r\\r\\n, \\\"-^0\\\\b4\\\\b\\\"\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3e9693c30ead008fe44bb7a539ed5246) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// JSON: '{\n\n \n\"4a\":\n-0.06 ,\n\"\\fx\"\r:0E+0\n\t\n \n\r\t,\t\r\r \"\\\\\":[] '
	const char* json = "{\n\n \n\"4a\":\n-0.06 ,\n\"\\fx\"\r:0E+0\n\t\n \n\r\t,\t\r\r \"\\\\\":[] ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n \\n\\\"4a\\\":\\n-0.06 ,\\n\\\"\\\\fx\\\"\\r:0E+0\\n\\t\\n \\n\\r\\t,\\t\\r\\r \\\"\\\\\\\\\\\":[] " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6337ca3c1d2f545c05827019a817bad4) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// JSON: ' {\t \r\t\"\\\"~\":\n0\t\r, \n\t\"\\b\\\\\\r?\\t<\\r\\b\\t+FW\\tj{\"\r\r\n\t\r'
	const char* json = " {\t \r\t\"\\\"~\":\n0\t\r, \n\t\"\\b\\\\\\r?\\t<\\r\\b\\t+FW\\tj{\"\r\r\n\t\r";
	std::cerr << "Plain JSON string from model: " << " {\\t \\r\\t\\\"\\\\\\\"~\\\":\\n0\\t\\r, \\n\\t\\\"\\\\b\\\\\\\\\\\\r?\\\\t<\\\\r\\\\b\\\\t+FW\\\\tj{\\\"\\r\\r\\n\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ba73c65babac119c5573b66484a95ad7) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// JSON: '{\n\n\r \r\t\"\"\r\n:\n{}\t,\t\r\"\\b9cd\"\t\n:\r\r\ntrue \t \r,\n\r\"\\f\"\n\n\t'
	const char* json = "{\n\n\r \r\t\"\"\r\n:\n{}\t,\t\r\"\\b9cd\"\t\n:\r\r\ntrue \t \r,\n\r\"\\f\"\n\n\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\r \\r\\t\\\"\\\"\\r\\n:\\n{}\\t,\\t\\r\\\"\\\\b9cd\\\"\\t\\n:\\r\\r\\ntrue \\t \\r,\\n\\r\\\"\\\\f\\\"\\n\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_dabd1f05bd67b3b75166e751f67d4aff) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\r\n\"\" \n\n: 0.04703,\t\r\"\\\\\":null, \n\"|\\n\"\n\t\t : {  \n\"m\"'
	const char* json = "{\r\n\"\" \n\n: 0.04703,\t\r\"\\\\\":null, \n\"|\\n\"\n\t\t : {  \n\"m\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"\\\" \\n\\n: 0.04703,\\t\\r\\\"\\\\\\\\\\\":null, \\n\\\"|\\\\n\\\"\\n\\t\\t : {  \\n\\\"m\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f05d2ad86a8a465f8a06797f8f27d341) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\r \"\"\r  :\r\r[ ]\n,  \t\r \"X\" \t: {}\t ,\"i\\/\":{ \r\"\\\\\\b@n\"'
	const char* json = "{\r \"\"\r  :\r\r[ ]\n,  \t\r \"X\" \t: {}\t ,\"i\\/\":{ \r\"\\\\\\b@n\"";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"\\\"\\r  :\\r\\r[ ]\\n,  \\t\\r \\\"X\\\" \\t: {}\\t ,\\\"i\\\\/\\\":{ \\r\\\"\\\\\\\\\\\\b@n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4fd4fcf4eeb0b99c6b5cecbc96520710) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\t\t\n\t\n\n\"\\n\"\r:\ntrue\t\n, \r\t\"\\\"\" :\n\n\"\"\t \r\r,  \n\n\n\r\n\")i\"'
	const char* json = "{\t\t\n\t\n\n\"\\n\"\r:\ntrue\t\n, \r\t\"\\\"\" :\n\n\"\"\t \r\r,  \n\n\n\r\n\")i\"";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\n\\t\\n\\n\\\"\\\\n\\\"\\r:\\ntrue\\t\\n, \\r\\t\\\"\\\\\\\"\\\" :\\n\\n\\\"\\\"\\t \\r\\r,  \\n\\n\\n\\r\\n\\\")i\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c9f4a1ed5a5bbe9c9f16d1600a469506) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// JSON: '{\r\"\\r\\n\\\"D \\r\"\t\r:\r\n\r-0.0E-0,\t\"\" \r:\t\tfalse\n\t,\r\n\"\\/{'
	const char* json = "{\r\"\\r\\n\\\"D \\r\"\t\r:\r\n\r-0.0E-0,\t\"\" \r:\t\tfalse\n\t,\r\n\"\\/{";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\r\\\\n\\\\\\\"D \\\\r\\\"\\t\\r:\\r\\n\\r-0.0E-0,\\t\\\"\\\" \\r:\\t\\tfalse\\n\\t,\\r\\n\\\"\\\\/{" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_79266ab757fe25e35d1cf249132afb05) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// JSON: '\t{\t\r \"\\n\\f\\tL\\\"\\f\":\"\\r\\t]z[\\/>\\nK\\/\",\t\n\"%\\r\\bS2\\rW'
	const char* json = "\t{\t\r \"\\n\\f\\tL\\\"\\f\":\"\\r\\t]z[\\/>\\nK\\/\",\t\n\"%\\r\\bS2\\rW";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\r \\\"\\\\n\\\\f\\\\tL\\\\\\\"\\\\f\\\":\\\"\\\\r\\\\t]z[\\\\/>\\\\nK\\\\/\\\",\\t\\n\\\"%\\\\r\\\\bS2\\\\rW" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_914e71d9112ebdfd02bc82dd4d3b68b8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// JSON: '\n{\n \t\t \"&9\"\r :\ttrue\t,\r\"%\":\n[]\r\t\r,\n\t\t\r\"W\\t\"\r\r :\".ez'
	const char* json = "\n{\n \t\t \"&9\"\r :\ttrue\t,\r\"%\":\n[]\r\t\r,\n\t\t\r\"W\\t\"\r\r :\".ez";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n \\t\\t \\\"&9\\\"\\r :\\ttrue\\t,\\r\\\"%\\\":\\n[]\\r\\t\\r,\\n\\t\\t\\r\\\"W\\\\t\\\"\\r\\r :\\\".ez" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ba4cb9baba687be16d9921b2a1b9faac) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: ' \n\r{\t\t\n\n\r\n \"\\n\\r\\/\":\rfalse \t \t, \n\n\"\\t\\\\m34\" \r\r:\r ['
	const char* json = " \n\r{\t\t\n\n\r\n \"\\n\\r\\/\":\rfalse \t \t, \n\n\"\\t\\\\m34\" \r\r:\r [";
	std::cerr << "Plain JSON string from model: " << " \\n\\r{\\t\\t\\n\\n\\r\\n \\\"\\\\n\\\\r\\\\/\\\":\\rfalse \\t \\t, \\n\\n\\\"\\\\t\\\\\\\\m34\\\" \\r\\r:\\r [" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4fc82bc11d572b794294a09bee3b2f92) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '\n \t{\n \"E\\t\" :-0\n\n, \t\r\"\\/\\b\"\t:{\n}\r, \"dT]\"\n\t\r:\ntrue\t'
	const char* json = "\n \t{\n \"E\\t\" :-0\n\n, \t\r\"\\/\\b\"\t:{\n}\r, \"dT]\"\n\t\r:\ntrue\t";
	std::cerr << "Plain JSON string from model: " << "\\n \\t{\\n \\\"E\\\\t\\\" :-0\\n\\n, \\t\\r\\\"\\\\/\\\\b\\\"\\t:{\\n}\\r, \\\"dT]\\\"\\n\\t\\r:\\ntrue\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a39fe319ed870c170971edd5867c50c0) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\"h(\"\n: \r\tnull\n\t\r, \r\n\n  \"\" \t\r:true\n\n,\n\n\r\".\\f\\r} I\"'
	const char* json = "{\"h(\"\n: \r\tnull\n\t\r, \r\n\n  \"\" \t\r:true\n\n,\n\n\r\".\\f\\r} I\"";
	std::cerr << "Plain JSON string from model: " << "{\\\"h(\\\"\\n: \\r\\tnull\\n\\t\\r, \\r\\n\\n  \\\"\\\" \\t\\r:true\\n\\n,\\n\\n\\r\\\".\\\\f\\\\r} I\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0dbfd6e43fa7d05b406c1455ba22cd3d) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// JSON: '{\n\":[q\\/I\"\r :true\t\r\r\n,\t \t\n\"\\r\"\n\r\t: null\n \n, \"\"\t:\"*'
	const char* json = "{\n\":[q\\/I\"\r :true\t\r\r\n,\t \t\n\"\\r\"\n\r\t: null\n \n, \"\"\t:\"*";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\":[q\\\\/I\\\"\\r :true\\t\\r\\r\\n,\\t \\t\\n\\\"\\\\r\\\"\\n\\r\\t: null\\n \\n, \\\"\\\"\\t:\\\"*" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6007e9fb4e615ba5b2adb6d204996d8a) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// JSON: '{\"b8\" \r:\t\rfalse \n\r,\n\t\t\"\\to\":\r\t[ ]\n\n,\t\"_\"\t:[null \t]'
	const char* json = "{\"b8\" \r:\t\rfalse \n\r,\n\t\t\"\\to\":\r\t[ ]\n\n,\t\"_\"\t:[null \t]";
	std::cerr << "Plain JSON string from model: " << "{\\\"b8\\\" \\r:\\t\\rfalse \\n\\r,\\n\\t\\t\\\"\\\\to\\\":\\r\\t[ ]\\n\\n,\\t\\\"_\\\"\\t:[null \\t]" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_025058e37b52c4170e0dbf31191b0f5c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n\r\t{ \r\n  \"=q\":false\r\r\r\t,\t\"\":{\n} \t\r\r\t\r,\".#\\bi\"\r\t\t\r:-'
	const char* json = "\n\r\t{ \r\n  \"=q\":false\r\r\r\t,\t\"\":{\n} \t\r\r\t\r,\".#\\bi\"\r\t\t\r:-";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{ \\r\\n  \\\"=q\\\":false\\r\\r\\r\\t,\\t\\\"\\\":{\\n} \\t\\r\\r\\t\\r,\\\".#\\\\bi\\\"\\r\\t\\t\\r:-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_75394f706b057e8012521bcd1355ce04) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// JSON: '\r  {\r\t\"m#R;\"   :\t[]\r\n,\t\n\"\" :\"\\f\" \t\n,\"\\\"\":\"^\\r\\r&P\"'
	const char* json = "\r  {\r\t\"m#R;\"   :\t[]\r\n,\t\n\"\" :\"\\f\" \t\n,\"\\\"\":\"^\\r\\r&P\"";
	std::cerr << "Plain JSON string from model: " << "\\r  {\\r\\t\\\"m#R;\\\"   :\\t[]\\r\\n,\\t\\n\\\"\\\" :\\\"\\\\f\\\" \\t\\n,\\\"\\\\\\\"\\\":\\\"^\\\\r\\\\r&P\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a3320b4b4ef58d3c9de3d11a1a8a340f) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: ' {\t\"l\\\"]\\b\"\r\r:\r\t \"\" \t\n ,\"\\rO\"\r\t:\r{\n}\r,\n\"\\t\" \r :\t -'
	const char* json = " {\t\"l\\\"]\\b\"\r\r:\r\t \"\" \t\n ,\"\\rO\"\r\t:\r{\n}\r,\n\"\\t\" \r :\t -";
	std::cerr << "Plain JSON string from model: " << " {\\t\\\"l\\\\\\\"]\\\\b\\\"\\r\\r:\\r\\t \\\"\\\" \\t\\n ,\\\"\\\\rO\\\"\\r\\t:\\r{\\n}\\r,\\n\\\"\\\\t\\\" \\r :\\t -" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1935917351cf3312aea25a341b6b56e7) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '\t\r{\"\\\\=\\f\"\t\r\t\t\r:\r \"\",\n\r\r\n\"5\"\n  :   false\n,\n \n\"5vU\"'
	const char* json = "\t\r{\"\\\\=\\f\"\t\r\t\t\r:\r \"\",\n\r\r\n\"5\"\n  :   false\n,\n \n\"5vU\"";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{\\\"\\\\\\\\=\\\\f\\\"\\t\\r\\t\\t\\r:\\r \\\"\\\",\\n\\r\\r\\n\\\"5\\\"\\n  :   false\\n,\\n \\n\\\"5vU\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b0c3f5bc1984d5b068872526dc00ea75) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\r\t\"\\b\"\t \r:\r\t\nfalse\t\n\r\r,\t\n\r\n\"\\n\"  \n:false\n\n,\r \"\"\t:-'
	const char* json = "{\r\t\"\\b\"\t \r:\r\t\nfalse\t\n\r\r,\t\n\r\n\"\\n\"  \n:false\n\n,\r \"\"\t:-";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"\\\\b\\\"\\t \\r:\\r\\t\\nfalse\\t\\n\\r\\r,\\t\\n\\r\\n\\\"\\\\n\\\"  \\n:false\\n\\n,\\r \\\"\\\"\\t:-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6bdfe744cb936955019f81f5fb7e5e66) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// JSON: ' \n{ \n\"@}\" :349e+0\r,\"8\\\\kH7\\/\":null\n \n\r ,\n\r\t\"\\b\\fM='
	const char* json = " \n{ \n\"@}\" :349e+0\r,\"8\\\\kH7\\/\":null\n \n\r ,\n\r\t\"\\b\\fM=";
	std::cerr << "Plain JSON string from model: " << " \\n{ \\n\\\"@}\\\" :349e+0\\r,\\\"8\\\\\\\\kH7\\\\/\\\":null\\n \\n\\r ,\\n\\r\\t\\\"\\\\b\\\\fM=" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_68fc99adffc8b759e2523e56ce1ff016) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// JSON: ' {\"\\t\":\"\\b\"\n\r\r ,\n\n\r\"\\/\"\n\t\n:\r\ttrue \r,\t\r\t\"\"\n\t:\n\r\t{\t\n'
	const char* json = " {\"\\t\":\"\\b\"\n\r\r ,\n\n\r\"\\/\"\n\t\n:\r\ttrue \r,\t\r\t\"\"\n\t:\n\r\t{\t\n";
	std::cerr << "Plain JSON string from model: " << " {\\\"\\\\t\\\":\\\"\\\\b\\\"\\n\\r\\r ,\\n\\n\\r\\\"\\\\/\\\"\\n\\t\\n:\\r\\ttrue \\r,\\t\\r\\t\\\"\\\"\\n\\t:\\n\\r\\t{\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_95c8fea2485620c4735bc1c378bbfe37) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// JSON: '\t\r{\n\"\"\r\t:\r\t6e0601,\r \"\\\\\"\r\n \t:\t[-50]\n\t,\t\t\r\n\n\"\\\"\\f\"\n'
	const char* json = "\t\r{\n\"\"\r\t:\r\t6e0601,\r \"\\\\\"\r\n \t:\t[-50]\n\t,\t\t\r\n\n\"\\\"\\f\"\n";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{\\n\\\"\\\"\\r\\t:\\r\\t6e0601,\\r \\\"\\\\\\\\\\\"\\r\\n \\t:\\t[-50]\\n\\t,\\t\\t\\r\\n\\n\\\"\\\\\\\"\\\\f\\\"\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_832967b6ee983425cef4d685098a8ed3) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\n   \"on\\\"\\rV\"\r:{\n\t\"\\/Ht\"\t\n:\t\r[],\r\r \n\"\\n0\\f\\t\\\"W|\"'
	const char* json = "{\n   \"on\\\"\\rV\"\r:{\n\t\"\\/Ht\"\t\n:\t\r[],\r\r \n\"\\n0\\f\\t\\\"W|\"";
	std::cerr << "Plain JSON string from model: " << "{\\n   \\\"on\\\\\\\"\\\\rV\\\"\\r:{\\n\\t\\\"\\\\/Ht\\\"\\t\\n:\\t\\r[],\\r\\r \\n\\\"\\\\n0\\\\f\\\\t\\\\\\\"W|\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e0534d84fb3c428a8f2e06710041d43a) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// JSON: '  {\r\t\n\"K\"\t \t:\r  true\n ,\n\"\":\nnull\n\r \r,\t\r\r\"\\tMf\\tlyA'
	const char* json = "  {\r\t\n\"K\"\t \t:\r  true\n ,\n\"\":\nnull\n\r \r,\t\r\r\"\\tMf\\tlyA";
	std::cerr << "Plain JSON string from model: " << "  {\\r\\t\\n\\\"K\\\"\\t \\t:\\r  true\\n ,\\n\\\"\\\":\\nnull\\n\\r \\r,\\t\\r\\r\\\"\\\\tMf\\\\tlyA" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b0153399aee7655bb81aa3099224d264) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\n \n\"\\b\"\r :\"Lu\"\n\r,\n \"\"\t\r \t:{} , \"_\\\"\" :[false\t \r,\n-'
	const char* json = "{\n \n\"\\b\"\r :\"Lu\"\n\r,\n \"\"\t\r \t:{} , \"_\\\"\" :[false\t \r,\n-";
	std::cerr << "Plain JSON string from model: " << "{\\n \\n\\\"\\\\b\\\"\\r :\\\"Lu\\\"\\n\\r,\\n \\\"\\\"\\t\\r \\t:{} , \\\"_\\\\\\\"\\\" :[false\\t \\r,\\n-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2c95f707b3f9a4cb5bb963f5bb1963d0) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\r\r \"x\" :\t\r{\r}\n \n,\r\t\t\"@\"\n\t:\r null\t \n \n, \"3\\\"\\nuk\"\n'
	const char* json = "{\r\r \"x\" :\t\r{\r}\n \n,\r\t\t\"@\"\n\t:\r null\t \n \n, \"3\\\"\\nuk\"\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r \\\"x\\\" :\\t\\r{\\r}\\n \\n,\\r\\t\\t\\\"@\\\"\\n\\t:\\r null\\t \\n \\n, \\\"3\\\\\\\"\\\\nuk\\\"\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f985b010626956919d6faf9ab0e4902f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\r{\r\"\\b\\n\":\nfalse  \t\t ,\t\r\n\r\"\"\t\t: false  ,  \"\\t;Y\"\r:-'
	const char* json = "\r{\r\"\\b\\n\":\nfalse  \t\t ,\t\r\n\r\"\"\t\t: false  ,  \"\\t;Y\"\r:-";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\\"\\\\b\\\\n\\\":\\nfalse  \\t\\t ,\\t\\r\\n\\r\\\"\\\"\\t\\t: false  ,  \\\"\\\\t;Y\\\"\\r:-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ff395eb766b56fc7c94bc7c1fd750c2a) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// JSON: '\r{\r\"\\\"]\"\t\n:\r\n22\t, \t \t\"\\n%\\/n\\tE\\b\\\"\\f\"\t :null   \n '
	const char* json = "\r{\r\"\\\"]\"\t\n:\r\n22\t, \t \t\"\\n%\\/n\\tE\\b\\\"\\f\"\t :null   \n ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\\"\\\\\\\"]\\\"\\t\\n:\\r\\n22\\t, \\t \\t\\\"\\\\n%\\\\/n\\\\tE\\\\b\\\\\\\"\\\\f\\\"\\t :null   \\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_112178f0007ee694ce5b146f564111de) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: ' {\n\t\r\"\":[],\r\t\t\"\\bbt\" \r\t :\n\ttrue ,\"\\r0\\\"\" \n\n\r\r:-6.0'
	const char* json = " {\n\t\r\"\":[],\r\t\t\"\\bbt\" \r\t :\n\ttrue ,\"\\r0\\\"\" \n\n\r\r:-6.0";
	std::cerr << "Plain JSON string from model: " << " {\\n\\t\\r\\\"\\\":[],\\r\\t\\t\\\"\\\\bbt\\\" \\r\\t :\\n\\ttrue ,\\\"\\\\r0\\\\\\\"\\\" \\n\\n\\r\\r:-6.0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a8e0cea32b8844f222e371d9fdfd860a) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\"\\t\\/\"\r :true\r\t\r\r\t,\t\t\n \"\\\"\\\\SLe\":\t\"\" \r \t\n\r,  \t\"E\"'
	const char* json = "{\"\\t\\/\"\r :true\r\t\r\r\t,\t\t\n \"\\\"\\\\SLe\":\t\"\" \r \t\n\r,  \t\"E\"";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\t\\\\/\\\"\\r :true\\r\\t\\r\\r\\t,\\t\\t\\n \\\"\\\\\\\"\\\\\\\\SLe\\\":\\t\\\"\\\" \\r \\t\\n\\r,  \\t\\\"E\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bf815efe31ffe2e8073dbfb4651a8b70) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// JSON: '\t{\"\\b\\/\"\t\n\r:\"\\\\\\f\"\r\n\r\r, \t\r\n\r\"\"\n \n:\r\r{ \"g\":null  \t\t'
	const char* json = "\t{\"\\b\\/\"\t\n\r:\"\\\\\\f\"\r\n\r\r, \t\r\n\r\"\"\n \n:\r\r{ \"g\":null  \t\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"\\\\b\\\\/\\\"\\t\\n\\r:\\\"\\\\\\\\\\\\f\\\"\\r\\n\\r\\r, \\t\\r\\n\\r\\\"\\\"\\n \\n:\\r\\r{ \\\"g\\\":null  \\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_17b34ce2a8fb6ebef93c129ec79f1587) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// JSON: '\n{ \t\t\n\"\" :\n\r\"LB>\\tSb|W\"\n\r ,\r \n\"\\f\"\n\r  :\nfalse,\r\">p'
	const char* json = "\n{ \t\t\n\"\" :\n\r\"LB>\\tSb|W\"\n\r ,\r \n\"\\f\"\n\r  :\nfalse,\r\">p";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t\\t\\n\\\"\\\" :\\n\\r\\\"LB>\\\\tSb|W\\\"\\n\\r ,\\r \\n\\\"\\\\f\\\"\\n\\r  :\\nfalse,\\r\\\">p" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_48a90f3dbe5c1291cd155043434531d6) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\n\n\"\\n\\t\\\\\\t\"\t  :true\r, \r\"|\\r\" :\t {}\t\t\t\t\r,\r \n\"\" :\t'
	const char* json = "{\n\n\"\\n\\t\\\\\\t\"\t  :true\r, \r\"|\\r\" :\t {}\t\t\t\t\r,\r \n\"\" :\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\\"\\\\n\\\\t\\\\\\\\\\\\t\\\"\\t  :true\\r, \\r\\\"|\\\\r\\\" :\\t {}\\t\\t\\t\\t\\r,\\r \\n\\\"\\\" :\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_24dd47977ea081abb171fd8a300c64d3) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// JSON: '\n{\n\t \n\";]\"\n \n:\r\n\r[ ]\r\r\n ,\"@\\/\\t\": true\t\t, \r \"\\b3\\\\'
	const char* json = "\n{\n\t \n\";]\"\n \n:\r\n\r[ ]\r\r\n ,\"@\\/\\t\": true\t\t, \r \"\\b3\\\\";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\t \\n\\\";]\\\"\\n \\n:\\r\\n\\r[ ]\\r\\r\\n ,\\\"@\\\\/\\\\t\\\": true\\t\\t, \\r \\\"\\\\b3\\\\\\\\" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c9bc20492fea00d9c9665b12d73f34da) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// JSON: '{\n\r\n\r \t\"E\\b\\/\" \t:\tfalse,\t \n \"+\\f\"\n\n:\n {\t\"u\\b\" \t:\"|'
	const char* json = "{\n\r\n\r \t\"E\\b\\/\" \t:\tfalse,\t \n \"+\\f\"\n\n:\n {\t\"u\\b\" \t:\"|";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\n\\r \\t\\\"E\\\\b\\\\/\\\" \\t:\\tfalse,\\t \\n \\\"+\\\\f\\\"\\n\\n:\\n {\\t\\\"u\\\\b\\\" \\t:\\\"|" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f699c6a8bbc96558a7c9f27ae57cffe8) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// JSON: '\r\r\n{\t\r\"0\\r\\n\"\t\n\n :{}\n\r\t ,\r\n\r\r\n\t\n\"{(\\\\5\\f\":\t\t false'
	const char* json = "\r\r\n{\t\r\"0\\r\\n\"\t\n\n :{}\n\r\t ,\r\n\r\r\n\t\n\"{(\\\\5\\f\":\t\t false";
	std::cerr << "Plain JSON string from model: " << "\\r\\r\\n{\\t\\r\\\"0\\\\r\\\\n\\\"\\t\\n\\n :{}\\n\\r\\t ,\\r\\n\\r\\r\\n\\t\\n\\\"{(\\\\\\\\5\\\\f\\\":\\t\\t false" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1d15c839bc80627d38a2cef24b1f8e58) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: '{\t \r\"\"\r\t:true\r\t\r\r,\r\r\n\"Z\\r\"\r \n\n:-0\r, \n\"]\\\\\" \n\n\n\r: ['
	const char* json = "{\t \r\"\"\r\t:true\r\t\r\r,\r\r\n\"Z\\r\"\r \n\n:-0\r, \n\"]\\\\\" \n\n\n\r: [";
	std::cerr << "Plain JSON string from model: " << "{\\t \\r\\\"\\\"\\r\\t:true\\r\\t\\r\\r,\\r\\r\\n\\\"Z\\\\r\\\"\\r \\n\\n:-0\\r, \\n\\\"]\\\\\\\\\\\" \\n\\n\\n\\r: [" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_16b139d6d9711b66f4973636e3ac5065) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// JSON: '{\t\n   \"\"\r\r\t:\t\t\"+rp\"\r,\r\"\\/\" \n\n:\t\"\\t\\r\\r\\r\" \t \r,\t\t\n\"'
	const char* json = "{\t\n   \"\"\r\r\t:\t\t\"+rp\"\r,\r\"\\/\" \n\n:\t\"\\t\\r\\r\\r\" \t \r,\t\t\n\"";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n   \\\"\\\"\\r\\r\\t:\\t\\t\\\"+rp\\\"\\r,\\r\\\"\\\\/\\\" \\n\\n:\\t\\\"\\\\t\\\\r\\\\r\\\\r\\\" \\t \\r,\\t\\t\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1033105266f4e8178e2fbb206300700c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '\t\n\r{ \r\"\\\"\\b,\"\t:\nfalse,\n\n \"x\\tcK(\"  :\n\t\r\t9\n\t\r\n\n,\r \r'
	const char* json = "\t\n\r{ \r\"\\\"\\b,\"\t:\nfalse,\n\n \"x\\tcK(\"  :\n\t\r\t9\n\t\r\n\n,\r \r";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\r{ \\r\\\"\\\\\\\"\\\\b,\\\"\\t:\\nfalse,\\n\\n \\\"x\\\\tcK(\\\"  :\\n\\t\\r\\t9\\n\\t\\r\\n\\n,\\r \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_74042260afe28a5a87058d8ac5332d51) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\r{\r\r\"\\t\" \t\n\t: true\t \n \n\t,\r\r\n\"\"\t   \n:{\t\n\"\\f\\n\"\n\r:\n[-'
	const char* json = "\r{\r\r\"\\t\" \t\n\t: true\t \n \n\t,\r\r\n\"\"\t   \n:{\t\n\"\\f\\n\"\n\r:\n[-";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\r\\\"\\\\t\\\" \\t\\n\\t: true\\t \\n \\n\\t,\\r\\r\\n\\\"\\\"\\t   \\n:{\\t\\n\\\"\\\\f\\\\n\\\"\\n\\r:\\n[-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_181768f6ea58639bb00495a918b0839e) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// JSON: ' \t{   \n \t\"\\\\\" \t\n  :[\rtrue,\r[]  ,\t\n\"\"\r\n,\nnull \r ,0.'
	const char* json = " \t{   \n \t\"\\\\\" \t\n  :[\rtrue,\r[]  ,\t\n\"\"\r\n,\nnull \r ,0.";
	std::cerr << "Plain JSON string from model: " << " \\t{   \\n \\t\\\"\\\\\\\\\\\" \\t\\n  :[\\rtrue,\\r[]  ,\\t\\n\\\"\\\"\\r\\n,\\nnull \\r ,0." << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_70dcb855c920ed8dd5c702f12d47d36d) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// JSON: '{\r  \r\"j\": \n0.040e+0 \n , \n\"\\nD\"\r \t\n:-0E+0,\t\"\\\\\" :\t\n'
	const char* json = "{\r  \r\"j\": \n0.040e+0 \n , \n\"\\nD\"\r \t\n:-0E+0,\t\"\\\\\" :\t\n";
	std::cerr << "Plain JSON string from model: " << "{\\r  \\r\\\"j\\\": \\n0.040e+0 \\n , \\n\\\"\\\\nD\\\"\\r \\t\\n:-0E+0,\\t\\\"\\\\\\\\\\\" :\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f82451c28b43d1afbf527365b443fa02) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '{\r\n\r \"\\\"Zn\"\t : \"\\\"\"\t\n\r,\"'\"\t:{\"F\"\t\t:true\r\n}\t\t ,\n\t\t\"'
	const char* json = "{\r\n\r \"\\\"Zn\"\t : \"\\\"\"\t\n\r,\"'\"\t:{\"F\"\t\t:true\r\n}\t\t ,\n\t\t\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\r \\\"\\\\\\\"Zn\\\"\\t : \\\"\\\\\\\"\\\"\\t\\n\\r,\\\"'\\\"\\t:{\\\"F\\\"\\t\\t:true\\r\\n}\\t\\t ,\\n\\t\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cf7faecdbe02b8d821435932dc46779f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '\t{\"~n\":[ ]\n,\"\\/\" \r :true\n\t\t\t,\r\"v2\":{\r\r\t\"\"\t\r\r:\r\r\r20'
	const char* json = "\t{\"~n\":[ ]\n,\"\\/\" \r :true\n\t\t\t,\r\"v2\":{\r\r\t\"\"\t\r\r:\r\r\r20";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"~n\\\":[ ]\\n,\\\"\\\\/\\\" \\r :true\\n\\t\\t\\t,\\r\\\"v2\\\":{\\r\\r\\t\\\"\\\"\\t\\r\\r:\\r\\r\\r20" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_62a19529a0d7967b3e299e3f51242d93) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: ' { \r \t\"d\\t\": \tnull\n, \n\"\\\\p\\f7\\f\":\n\tfalse \r,\"\\t\\/\"\r'
	const char* json = " { \r \t\"d\\t\": \tnull\n, \n\"\\\\p\\f7\\f\":\n\tfalse \r,\"\\t\\/\"\r";
	std::cerr << "Plain JSON string from model: " << " { \\r \\t\\\"d\\\\t\\\": \\tnull\\n, \\n\\\"\\\\\\\\p\\\\f7\\\\f\\\":\\n\\tfalse \\r,\\\"\\\\t\\\\/\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_16e212ab9cf4f14336b2044ea90f3659) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// JSON: '{\r\"\\\"\":null\r,\r\n \r\"\\/\":null\t\r \t\r,\r\r\t\r\"\"\n\r\r\t:\t70.070 ,  \t\r\"w\" :2,\r\"D\"\r \n\r:\n{}  \t,\t\"\\n\"\n \t :false\n ,\n\"0'
	const char* json = "{\r\"\\\"\":null\r,\r\n \r\"\\/\":null\t\r \t\r,\r\r\t\r\"\"\n\r\r\t:\t70.070 ,  \t\r\"w\" :2,\r\"D\"\r \n\r:\n{}  \t,\t\"\\n\"\n \t :false\n ,\n\"0";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\\\\"\\\":null\\r,\\r\\n \\r\\\"\\\\/\\\":null\\t\\r \\t\\r,\\r\\r\\t\\r\\\"\\\"\\n\\r\\r\\t:\\t70.070 ,  \\t\\r\\\"w\\\" :2,\\r\\\"D\\\"\\r \\n\\r:\\n{}  \\t,\\t\\\"\\\\n\\\"\\n \\t :false\\n ,\\n\\\"0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9c991174fd75f29dc71984d242ec993d) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// JSON: '\r {\r\"B\"\t\t:\n\"n\\r\"\t,\n\t\n\"\\f\"\t: \nnull ,\n\"U\\tK\"\r: [] \r,\r\r\n \"\"\n\r\t:null  \r,\n\n\"\\\\\" \n:\rtrue\r\t \t,\n\"\\b\\/\":2 \r\t '
	const char* json = "\r {\r\"B\"\t\t:\n\"n\\r\"\t,\n\t\n\"\\f\"\t: \nnull ,\n\"U\\tK\"\r: [] \r,\r\r\n \"\"\n\r\t:null  \r,\n\n\"\\\\\" \n:\rtrue\r\t \t,\n\"\\b\\/\":2 \r\t ";
	std::cerr << "Plain JSON string from model: " << "\\r {\\r\\\"B\\\"\\t\\t:\\n\\\"n\\\\r\\\"\\t,\\n\\t\\n\\\"\\\\f\\\"\\t: \\nnull ,\\n\\\"U\\\\tK\\\"\\r: [] \\r,\\r\\r\\n \\\"\\\"\\n\\r\\t:null  \\r,\\n\\n\\\"\\\\\\\\\\\" \\n:\\rtrue\\r\\t \\t,\\n\\\"\\\\b\\\\/\\\":2 \\r\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_529b40b01033422f9606efda5cb0d70b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// JSON: '\n{\n\r\n\t \n\"\\b\\n(\": \"\",\r\n\"f\\\"\\t\\t\"\n:\ttrue\t\t \t\n,\r \"$\" : \rtrue ,\n\t\t  \"`\\b\":-0 \r\t\t,\n\"\\\\\":null ,\r\"\\r\\n\"\t \r\n'
	const char* json = "\n{\n\r\n\t \n\"\\b\\n(\": \"\",\r\n\"f\\\"\\t\\t\"\n:\ttrue\t\t \t\n,\r \"$\" : \rtrue ,\n\t\t  \"`\\b\":-0 \r\t\t,\n\"\\\\\":null ,\r\"\\r\\n\"\t \r\n";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\r\\n\\t \\n\\\"\\\\b\\\\n(\\\": \\\"\\\",\\r\\n\\\"f\\\\\\\"\\\\t\\\\t\\\"\\n:\\ttrue\\t\\t \\t\\n,\\r \\\"$\\\" : \\rtrue ,\\n\\t\\t  \\\"`\\\\b\\\":-0 \\r\\t\\t,\\n\\\"\\\\\\\\\\\":null ,\\r\\\"\\\\r\\\\n\\\"\\t \\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_446173b40734f620a02ea2cfeb1f5bd6) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\r\t {\n\"\"\n:null\r\n\t\n ,\t\"\\b\" \r:\n \t[true\t ,\nnull\t],\n\"\\n\": \"3\"\n  \t\t, \n\r \"I\\b\\n\": {},\n\t\n \r\"\\tZ\\r\\\"P\"  :\n[ \n-'
	const char* json = "\r\t {\n\"\"\n:null\r\n\t\n ,\t\"\\b\" \r:\n \t[true\t ,\nnull\t],\n\"\\n\": \"3\"\n  \t\t, \n\r \"I\\b\\n\": {},\n\t\n \r\"\\tZ\\r\\\"P\"  :\n[ \n-";
	std::cerr << "Plain JSON string from model: " << "\\r\\t {\\n\\\"\\\"\\n:null\\r\\n\\t\\n ,\\t\\\"\\\\b\\\" \\r:\\n \\t[true\\t ,\\nnull\\t],\\n\\\"\\\\n\\\": \\\"3\\\"\\n  \\t\\t, \\n\\r \\\"I\\\\b\\\\n\\\": {},\\n\\t\\n \\r\\\"\\\\tZ\\\\r\\\\\\\"P\\\"  :\\n[ \\n-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_20ec126ecd76d23314776a967b0db84e) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: '{\t\"\" \r\n\r:\t\r\nnull\n,   \"\\\\\"\t\r:false,\r\n \t\"\\/\\\"\"\n:\n\t null,\t\"2|\"\t \n:\n\n\ttrue\t,\r\r\"\\b\\/\":\ttrue\t\n\r,\n\"Q\\tCb\":['
	const char* json = "{\t\"\" \r\n\r:\t\r\nnull\n,   \"\\\\\"\t\r:false,\r\n \t\"\\/\\\"\"\n:\n\t null,\t\"2|\"\t \n:\n\n\ttrue\t,\r\r\"\\b\\/\":\ttrue\t\n\r,\n\"Q\\tCb\":[";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\" \\r\\n\\r:\\t\\r\\nnull\\n,   \\\"\\\\\\\\\\\"\\t\\r:false,\\r\\n \\t\\\"\\\\/\\\\\\\"\\\"\\n:\\n\\t null,\\t\\\"2|\\\"\\t \\n:\\n\\n\\ttrue\\t,\\r\\r\\\"\\\\b\\\\/\\\":\\ttrue\\t\\n\\r,\\n\\\"Q\\\\tCb\\\":[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6c5cc8c0cf48e4f77248b5650ce86d81) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\"\\\"<\" \t\n:\"D\\\\\", \t\"\": \n\"L\"\r \n\n\t,\r\r\t\r\"\\t\\n\":\nfalse\t  ,\"\\t&k;x \\/\" : \t  90E+0\t,\"{?\":\r\t\r[],\n\n\n  \"\\b\\/\"\t'
	const char* json = "{\"\\\"<\" \t\n:\"D\\\\\", \t\"\": \n\"L\"\r \n\n\t,\r\r\t\r\"\\t\\n\":\nfalse\t  ,\"\\t&k;x \\/\" : \t  90E+0\t,\"{?\":\r\t\r[],\n\n\n  \"\\b\\/\"\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\\\\"<\\\" \\t\\n:\\\"D\\\\\\\\\\\", \\t\\\"\\\": \\n\\\"L\\\"\\r \\n\\n\\t,\\r\\r\\t\\r\\\"\\\\t\\\\n\\\":\\nfalse\\t  ,\\\"\\\\t&k;x \\\\/\\\" : \\t  90E+0\\t,\\\"{?\\\":\\r\\t\\r[],\\n\\n\\n  \\\"\\\\b\\\\/\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_28d1e731869b7dcb34667bd0012afcd0) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// JSON: '{\r\t\t\n\"\\f\\r\\b\\t\\\\8\\t,>\":\r\tfalse,\"\\tp\\/i\"\n :-30\n \t\t\r,\r \"\\\\3F\\b`\"\r:\"\" \n \r, \t\"\\r\\/\\r\\fG6; t\" :\t[null \n]\t'
	const char* json = "{\r\t\t\n\"\\f\\r\\b\\t\\\\8\\t,>\":\r\tfalse,\"\\tp\\/i\"\n :-30\n \t\t\r,\r \"\\\\3F\\b`\"\r:\"\" \n \r, \t\"\\r\\/\\r\\fG6; t\" :\t[null \n]\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\t\\n\\\"\\\\f\\\\r\\\\b\\\\t\\\\\\\\8\\\\t,>\\\":\\r\\tfalse,\\\"\\\\tp\\\\/i\\\"\\n :-30\\n \\t\\t\\r,\\r \\\"\\\\\\\\3F\\\\b`\\\"\\r:\\\"\\\" \\n \\r, \\t\\\"\\\\r\\\\/\\\\r\\\\fG6; t\\\" :\\t[null \\n]\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_edf881ded5ea762a51ccee97634e9299) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: ' \r{\t \r \t \"\\r|\\/\"\t\n\n:false \n\t\r,\n\n\r\n\"\"\t\t:{\r\"E\\\\\\tT\\tn\\\"P\" \r:\nnull\t\t ,    \"\\r\"\r\t\r:\n\n\">\\bD\\n\", \":\":\t[\n\t\n'
	const char* json = " \r{\t \r \t \"\\r|\\/\"\t\n\n:false \n\t\r,\n\n\r\n\"\"\t\t:{\r\"E\\\\\\tT\\tn\\\"P\" \r:\nnull\t\t ,    \"\\r\"\r\t\r:\n\n\">\\bD\\n\", \":\":\t[\n\t\n";
	std::cerr << "Plain JSON string from model: " << " \\r{\\t \\r \\t \\\"\\\\r|\\\\/\\\"\\t\\n\\n:false \\n\\t\\r,\\n\\n\\r\\n\\\"\\\"\\t\\t:{\\r\\\"E\\\\\\\\\\\\tT\\\\tn\\\\\\\"P\\\" \\r:\\nnull\\t\\t ,    \\\"\\\\r\\\"\\r\\t\\r:\\n\\n\\\">\\\\bD\\\\n\\\", \\\":\\\":\\t[\\n\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2df73a814bc4d2f460fc6b67044b3562) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '\r\n{ \r\"\\tg\"\r\n :true\n,\n\"\"\n:\t\r[]\t\r,\";\\/;T\"\n\t\t:null\t\t \r,\t\"B\": true\t\r \r \r,\t\r\r\r\"\\tKeZX\"\n\n :false\n\n \t\r,\t\"\\t'
	const char* json = "\r\n{ \r\"\\tg\"\r\n :true\n,\n\"\"\n:\t\r[]\t\r,\";\\/;T\"\n\t\t:null\t\t \r,\t\"B\": true\t\r \r \r,\t\r\r\r\"\\tKeZX\"\n\n :false\n\n \t\r,\t\"\\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{ \\r\\\"\\\\tg\\\"\\r\\n :true\\n,\\n\\\"\\\"\\n:\\t\\r[]\\t\\r,\\\";\\\\/;T\\\"\\n\\t\\t:null\\t\\t \\r,\\t\\\"B\\\": true\\t\\r \\r \\r,\\t\\r\\r\\r\\\"\\\\tKeZX\\\"\\n\\n :false\\n\\n \\t\\r,\\t\\\"\\\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0b0a718e0a6f1a3c3907f2e22fc44bdb) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '{  \"\": \"\\\\\"\t,\n \n\r\r\":\"\t:false\n\n\n,\t\t\t\"\\b\"\r\r:\ntrue,   \t\"\\\"`(\\r\"\r:\n-0.020805907,\t\"]d6^\\\"\\n%%>\\\\I\"\t \n: -7'
	const char* json = "{  \"\": \"\\\\\"\t,\n \n\r\r\":\"\t:false\n\n\n,\t\t\t\"\\b\"\r\r:\ntrue,   \t\"\\\"`(\\r\"\r:\n-0.020805907,\t\"]d6^\\\"\\n%%>\\\\I\"\t \n: -7";
	std::cerr << "Plain JSON string from model: " << "{  \\\"\\\": \\\"\\\\\\\\\\\"\\t,\\n \\n\\r\\r\\\":\\\"\\t:false\\n\\n\\n,\\t\\t\\t\\\"\\\\b\\\"\\r\\r:\\ntrue,   \\t\\\"\\\\\\\"`(\\\\r\\\"\\r:\\n-0.020805907,\\t\\\"]d6^\\\\\\\"\\\\n%%>\\\\\\\\I\\\"\\t \\n: -7" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_318acaf74e865c62508117fc460ac07a) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\"o\"\n :0 \n\n\n\r,  \n \"\":\n\n [\n\tfalse]\r\n\t\r ,\n\n\r\"\\r\\rp\\r\"\n\n \r\r:\"\\r\\f=k\"\t,\r\r\"\\\"\": {\t\r \"D\\b\\f\\tK\"\r:true\t \t,\t'
	const char* json = "{\"o\"\n :0 \n\n\n\r,  \n \"\":\n\n [\n\tfalse]\r\n\t\r ,\n\n\r\"\\r\\rp\\r\"\n\n \r\r:\"\\r\\f=k\"\t,\r\r\"\\\"\": {\t\r \"D\\b\\f\\tK\"\r:true\t \t,\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"o\\\"\\n :0 \\n\\n\\n\\r,  \\n \\\"\\\":\\n\\n [\\n\\tfalse]\\r\\n\\t\\r ,\\n\\n\\r\\\"\\\\r\\\\rp\\\\r\\\"\\n\\n \\r\\r:\\\"\\\\r\\\\f=k\\\"\\t,\\r\\r\\\"\\\\\\\"\\\": {\\t\\r \\\"D\\\\b\\\\f\\\\tK\\\"\\r:true\\t \\t,\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ccd0984b63d8e10af7db26d22bd12c36) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// JSON: '{ \n\r\"\" \n\n:[ ]\r\n\r\t,\t\r\"k\"\r: \"i\\n:Z\" ,\"p]\"\r\r:null,\n\t\r\"P\"\n\r\r:\t\r\r-270.06022077809\t\t\t \r ,\n\"\\b\\/\" \n\n:{\n\"V\\n'
	const char* json = "{ \n\r\"\" \n\n:[ ]\r\n\r\t,\t\r\"k\"\r: \"i\\n:Z\" ,\"p]\"\r\r:null,\n\t\r\"P\"\n\r\r:\t\r\r-270.06022077809\t\t\t \r ,\n\"\\b\\/\" \n\n:{\n\"V\\n";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\r\\\"\\\" \\n\\n:[ ]\\r\\n\\r\\t,\\t\\r\\\"k\\\"\\r: \\\"i\\\\n:Z\\\" ,\\\"p]\\\"\\r\\r:null,\\n\\t\\r\\\"P\\\"\\n\\r\\r:\\t\\r\\r-270.06022077809\\t\\t\\t \\r ,\\n\\\"\\\\b\\\\/\\\" \\n\\n:{\\n\\\"V\\\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_79b8543b68aa7af9852e9e97138bc322) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: ' {\r  \r\n\"\\n$4\\b\"\r\t \t:\r \t0\t\t\n\t,\"\\/8\":false ,\"DJT=\" :\nnull\n\r\n\r,\"\\/\"\n \n:\t\t\r [null,\n\t\tfalse,\r\rnull\t\r]\r\n \t'
	const char* json = " {\r  \r\n\"\\n$4\\b\"\r\t \t:\r \t0\t\t\n\t,\"\\/8\":false ,\"DJT=\" :\nnull\n\r\n\r,\"\\/\"\n \n:\t\t\r [null,\n\t\tfalse,\r\rnull\t\r]\r\n \t";
	std::cerr << "Plain JSON string from model: " << " {\\r  \\r\\n\\\"\\\\n$4\\\\b\\\"\\r\\t \\t:\\r \\t0\\t\\t\\n\\t,\\\"\\\\/8\\\":false ,\\\"DJT=\\\" :\\nnull\\n\\r\\n\\r,\\\"\\\\/\\\"\\n \\n:\\t\\t\\r [null,\\n\\t\\tfalse,\\r\\rnull\\t\\r]\\r\\n \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d2574dedf53faa5071555a51cfef8963) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// JSON: '\r\n\t{\n\n \"\"\t\r:-5.0e+01 , \r \r\"\\f,\\ru,IBVxL@\"\r :null \t\t,\"\\nT\\t3\\rkY\\\\0\"\r:[]\n\n\r\r,  \"!\"\n\n :false\t\t\n\t\t\t,\"\\b'
	const char* json = "\r\n\t{\n\n \"\"\t\r:-5.0e+01 , \r \r\"\\f,\\ru,IBVxL@\"\r :null \t\t,\"\\nT\\t3\\rkY\\\\0\"\r:[]\n\n\r\r,  \"!\"\n\n :false\t\t\n\t\t\t,\"\\b";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\t{\\n\\n \\\"\\\"\\t\\r:-5.0e+01 , \\r \\r\\\"\\\\f,\\\\ru,IBVxL@\\\"\\r :null \\t\\t,\\\"\\\\nT\\\\t3\\\\rkY\\\\\\\\0\\\"\\r:[]\\n\\n\\r\\r,  \\\"!\\\"\\n\\n :false\\t\\t\\n\\t\\t\\t,\\\"\\\\b" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_395069e34770f93771cc76519fa892a9) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\r\r\"-\\f\\\\\\bF\"\n :\r\t[\nfalse\r  ,\ntrue\r\n\r,\"\"\r,false\t\t\t]\t\r\n\n\r \t,\r \"\\f\"\t  :\t-4237.0E045 \n\t\r\t,\n\r\r\n\"?\":[\t\n\r\n-'
	const char* json = "{\r\r\"-\\f\\\\\\bF\"\n :\r\t[\nfalse\r  ,\ntrue\r\n\r,\"\"\r,false\t\t\t]\t\r\n\n\r \t,\r \"\\f\"\t  :\t-4237.0E045 \n\t\r\t,\n\r\r\n\"?\":[\t\n\r\n-";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\\"-\\\\f\\\\\\\\\\\\bF\\\"\\n :\\r\\t[\\nfalse\\r  ,\\ntrue\\r\\n\\r,\\\"\\\"\\r,false\\t\\t\\t]\\t\\r\\n\\n\\r \\t,\\r \\\"\\\\f\\\"\\t  :\\t-4237.0E045 \\n\\t\\r\\t,\\n\\r\\r\\n\\\"?\\\":[\\t\\n\\r\\n-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_19b33370aa557c4a05e48f344e53c0d7) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// JSON: ' \r\r{\n\t \r\"v0\\t\"\n\t: null,    \"J9K\"\r \r\t:[] \t\r, \n \n\t\"\\\\1O\\nLQq,\\f\\f\\r\\t>\" :{ }\t,\"2\" \n\r:{},\t\n\n \"\\/\\b'\"\t\n\t'
	const char* json = " \r\r{\n\t \r\"v0\\t\"\n\t: null,    \"J9K\"\r \r\t:[] \t\r, \n \n\t\"\\\\1O\\nLQq,\\f\\f\\r\\t>\" :{ }\t,\"2\" \n\r:{},\t\n\n \"\\/\\b'\"\t\n\t";
	std::cerr << "Plain JSON string from model: " << " \\r\\r{\\n\\t \\r\\\"v0\\\\t\\\"\\n\\t: null,    \\\"J9K\\\"\\r \\r\\t:[] \\t\\r, \\n \\n\\t\\\"\\\\\\\\1O\\\\nLQq,\\\\f\\\\f\\\\r\\\\t>\\\" :{ }\\t,\\\"2\\\" \\n\\r:{},\\t\\n\\n \\\"\\\\/\\\\b'\\\"\\t\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9cf9b4dd467d67148d03cbde1322b924) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// JSON: '{\n\r\"\" \n:\n\t\"x\\/\",\r  \"xI\\/\"\n\t\t:\r-90\r\t \t,\r\r\t\r\r\"y\" :\r\nnull\n\r, \t\"\\b\\b\\t\":\"3\" \t, \n\n\t\r\"=\"\r:-0,\"\\f~\" \r\t\r:\r\t\"'
	const char* json = "{\n\r\"\" \n:\n\t\"x\\/\",\r  \"xI\\/\"\n\t\t:\r-90\r\t \t,\r\r\t\r\r\"y\" :\r\nnull\n\r, \t\"\\b\\b\\t\":\"3\" \t, \n\n\t\r\"=\"\r:-0,\"\\f~\" \r\t\r:\r\t\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\\"\\\" \\n:\\n\\t\\\"x\\\\/\\\",\\r  \\\"xI\\\\/\\\"\\n\\t\\t:\\r-90\\r\\t \\t,\\r\\r\\t\\r\\r\\\"y\\\" :\\r\\nnull\\n\\r, \\t\\\"\\\\b\\\\b\\\\t\\\":\\\"3\\\" \\t, \\n\\n\\t\\r\\\"=\\\"\\r:-0,\\\"\\\\f~\\\" \\r\\t\\r:\\r\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_df652aebbfa1c9ca9b2c03e1a199cfe6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// JSON: '{ \"`[\\\\\\n\":true\t,\t\r\r\r\"\" : \t{ }  ,  \"\\\\\\\"\\/\"\t:\"FQ\", \n\r\"(_|\"   \t:\"\\r\\/\\f#Pq\\r~\\/\\t\"\t,  \t \t\r\"V'\":\nfalse'
	const char* json = "{ \"`[\\\\\\n\":true\t,\t\r\r\r\"\" : \t{ }  ,  \"\\\\\\\"\\/\"\t:\"FQ\", \n\r\"(_|\"   \t:\"\\r\\/\\f#Pq\\r~\\/\\t\"\t,  \t \t\r\"V'\":\nfalse";
	std::cerr << "Plain JSON string from model: " << "{ \\\"`[\\\\\\\\\\\\n\\\":true\\t,\\t\\r\\r\\r\\\"\\\" : \\t{ }  ,  \\\"\\\\\\\\\\\\\\\"\\\\/\\\"\\t:\\\"FQ\\\", \\n\\r\\\"(_|\\\"   \\t:\\\"\\\\r\\\\/\\\\f#Pq\\\\r~\\\\/\\\\t\\\"\\t,  \\t \\t\\r\\\"V'\\\":\\nfalse" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1b3542f0dba024171ec63732eb0b9e88) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '{\r\"o\"\n\n:\r-0.0\r\n  ,\n\"g\\nR\\\\\\t\\fn\\\"\\/sr\\f\\/U#\"\t \n:\"6\"\t\n \t\n, \t\"!\"\t\t:\rfalse\r\t,\n\t\"d\"\r\t \t:\r\n{}\t\r  ,\r\"\\\\\\f\"'
	const char* json = "{\r\"o\"\n\n:\r-0.0\r\n  ,\n\"g\\nR\\\\\\t\\fn\\\"\\/sr\\f\\/U#\"\t \n:\"6\"\t\n \t\n, \t\"!\"\t\t:\rfalse\r\t,\n\t\"d\"\r\t \t:\r\n{}\t\r  ,\r\"\\\\\\f\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"o\\\"\\n\\n:\\r-0.0\\r\\n  ,\\n\\\"g\\\\nR\\\\\\\\\\\\t\\\\fn\\\\\\\"\\\\/sr\\\\f\\\\/U#\\\"\\t \\n:\\\"6\\\"\\t\\n \\t\\n, \\t\\\"!\\\"\\t\\t:\\rfalse\\r\\t,\\n\\t\\\"d\\\"\\r\\t \\t:\\r\\n{}\\t\\r  ,\\r\\\"\\\\\\\\\\\\f\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_110c5117f640fa1db8af2674635d2ecf) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '{\n \t\r\"\\b\"\r\r:\rfalse\t\r \r,\r\n\n\r\t\"%z\"\n:\"a\\r\\n\"\r\n, \t\"\"\t\n:\r\"\\n|X^.\\\"T\\b\\r\\r\\\"U\",\"<\\f\":\t\"w'\\\\k\" ,  \r\";D\"\r:-4'
	const char* json = "{\n \t\r\"\\b\"\r\r:\rfalse\t\r \r,\r\n\n\r\t\"%z\"\n:\"a\\r\\n\"\r\n, \t\"\"\t\n:\r\"\\n|X^.\\\"T\\b\\r\\r\\\"U\",\"<\\f\":\t\"w'\\\\k\" ,  \r\";D\"\r:-4";
	std::cerr << "Plain JSON string from model: " << "{\\n \\t\\r\\\"\\\\b\\\"\\r\\r:\\rfalse\\t\\r \\r,\\r\\n\\n\\r\\t\\\"%z\\\"\\n:\\\"a\\\\r\\\\n\\\"\\r\\n, \\t\\\"\\\"\\t\\n:\\r\\\"\\\\n|X^.\\\\\\\"T\\\\b\\\\r\\\\r\\\\\\\"U\\\",\\\"<\\\\f\\\":\\t\\\"w'\\\\\\\\k\\\" ,  \\r\\\";D\\\"\\r:-4" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_beb50e48a3834509bf341d77cbd5a925) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// JSON: '\n{\t\r\n\t\"Y\"\n\n\n\t\t:\t -0e+060520\t,\"\\n\\nz\\\"\\r\\f\\\"\":[  true,true\n  ]\n\t\t,\n\r\"&\"\r \n\n:\n\n{\n\t \"\":true\r\r\r}\t\n\r\r\r,\"''
	const char* json = "\n{\t\r\n\t\"Y\"\n\n\n\t\t:\t -0e+060520\t,\"\\n\\nz\\\"\\r\\f\\\"\":[  true,true\n  ]\n\t\t,\n\r\"&\"\r \n\n:\n\n{\n\t \"\":true\r\r\r}\t\n\r\r\r,\"'";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\r\\n\\t\\\"Y\\\"\\n\\n\\n\\t\\t:\\t -0e+060520\\t,\\\"\\\\n\\\\nz\\\\\\\"\\\\r\\\\f\\\\\\\"\\\":[  true,true\\n  ]\\n\\t\\t,\\n\\r\\\"&\\\"\\r \\n\\n:\\n\\n{\\n\\t \\\"\\\":true\\r\\r\\r}\\t\\n\\r\\r\\r,\\\"'" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_811705a2763c2d8b60ead00b287df001) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// JSON: '\n \t{ \n\n\r\"\"\r: {}\n\n \n\t\r \r,\n\"%%\"\n:true\t \r\t,   \"p\\\\\"\t\r :\r-0\n \r,\n\r\t\"d\"\n:true,\r\"\\n\\\"~\\\\$\": \ttrue \n , \t\r\n\"0'
	const char* json = "\n \t{ \n\n\r\"\"\r: {}\n\n \n\t\r \r,\n\"%%\"\n:true\t \r\t,   \"p\\\\\"\t\r :\r-0\n \r,\n\r\t\"d\"\n:true,\r\"\\n\\\"~\\\\$\": \ttrue \n , \t\r\n\"0";
	std::cerr << "Plain JSON string from model: " << "\\n \\t{ \\n\\n\\r\\\"\\\"\\r: {}\\n\\n \\n\\t\\r \\r,\\n\\\"%%\\\"\\n:true\\t \\r\\t,   \\\"p\\\\\\\\\\\"\\t\\r :\\r-0\\n \\r,\\n\\r\\t\\\"d\\\"\\n:true,\\r\\\"\\\\n\\\\\\\"~\\\\\\\\$\\\": \\ttrue \\n , \\t\\r\\n\\\"0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1b9fc8e7c0f92409443495e1a5f8958a) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\r\r\t\n\"\"\n:\t \r\r-0.0   \t,\n\r\"I\\f\"\n \r\n\t\r:false,\n\r \t \"\\t,.6C?\\n\"  \t:true \t\r  \n,\t\"\\/\\r\"\t:true\r, \n\n \n\n\" a\"\t:'
	const char* json = "{\r\r\t\n\"\"\n:\t \r\r-0.0   \t,\n\r\"I\\f\"\n \r\n\t\r:false,\n\r \t \"\\t,.6C?\\n\"  \t:true \t\r  \n,\t\"\\/\\r\"\t:true\r, \n\n \n\n\" a\"\t:";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\n\\\"\\\"\\n:\\t \\r\\r-0.0   \\t,\\n\\r\\\"I\\\\f\\\"\\n \\r\\n\\t\\r:false,\\n\\r \\t \\\"\\\\t,.6C?\\\\n\\\"  \\t:true \\t\\r  \\n,\\t\\\"\\\\/\\\\r\\\"\\t:true\\r, \\n\\n \\n\\n\\\" a\\\"\\t:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a52a342eb889fad282d819bcaa6f9c94) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// JSON: '{\n\r\"\\/\"\r \r:\n[]\t\r\r,\r\n \n\"@=U9\\t\\rFQ\":null\n,\"iT\":true\n,\t\"\":true \r, \t \"\\\\\\/\"  :false\n \t\t\t,\r\t\n\"\\f\" :\r\t \"8'
	const char* json = "{\n\r\"\\/\"\r \r:\n[]\t\r\r,\r\n \n\"@=U9\\t\\rFQ\":null\n,\"iT\":true\n,\t\"\":true \r, \t \"\\\\\\/\"  :false\n \t\t\t,\r\t\n\"\\f\" :\r\t \"8";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\\"\\\\/\\\"\\r \\r:\\n[]\\t\\r\\r,\\r\\n \\n\\\"@=U9\\\\t\\\\rFQ\\\":null\\n,\\\"iT\\\":true\\n,\\t\\\"\\\":true \\r, \\t \\\"\\\\\\\\\\\\/\\\"  :false\\n \\t\\t\\t,\\r\\t\\n\\\"\\\\f\\\" :\\r\\t \\\"8" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5214214448132b96c2409f0b16accaf9) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// JSON: '{\t\"\"\t\n\r : -0.02594080\n\r\r,\n\"\\/'\\b\\r\"\n:[\"\\\\\\\"gu!\"\r, \n\r0\n] \r  ,\r \t\"\\\"0)\\r\\\"R\"\t  \n\n : -0.0608\r\n\r, \t\"OU_U'
	const char* json = "{\t\"\"\t\n\r : -0.02594080\n\r\r,\n\"\\/'\\b\\r\"\n:[\"\\\\\\\"gu!\"\r, \n\r0\n] \r  ,\r \t\"\\\"0)\\r\\\"R\"\t  \n\n : -0.0608\r\n\r, \t\"OU_U";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\"\\t\\n\\r : -0.02594080\\n\\r\\r,\\n\\\"\\\\/'\\\\b\\\\r\\\"\\n:[\\\"\\\\\\\\\\\\\\\"gu!\\\"\\r, \\n\\r0\\n] \\r  ,\\r \\t\\\"\\\\\\\"0)\\\\r\\\\\\\"R\\\"\\t  \\n\\n : -0.0608\\r\\n\\r, \\t\\\"OU_U" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1b3abfe737468f5e08d7c55e4be1912b) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// JSON: '{ \n\"\" :[ [-0E+060\t\r \t],[\t \"\\\\v\\\\5\\ni\" ,[{}\t  ]\n]\r]\r\r,\n  \";\\f]j\":\r[\n]\r\n,\"\\/\\n8?\":\t{} \r\t\t\n, \r\"l\\\\A\\\"\\n'
	const char* json = "{ \n\"\" :[ [-0E+060\t\r \t],[\t \"\\\\v\\\\5\\ni\" ,[{}\t  ]\n]\r]\r\r,\n  \";\\f]j\":\r[\n]\r\n,\"\\/\\n8?\":\t{} \r\t\t\n, \r\"l\\\\A\\\"\\n";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\" :[ [-0E+060\\t\\r \\t],[\\t \\\"\\\\\\\\v\\\\\\\\5\\\\ni\\\" ,[{}\\t  ]\\n]\\r]\\r\\r,\\n  \\\";\\\\f]j\\\":\\r[\\n]\\r\\n,\\\"\\\\/\\\\n8?\\\":\\t{} \\r\\t\\t\\n, \\r\\\"l\\\\\\\\A\\\\\\\"\\\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9b432d338cbb112ef4994572cd02ec14) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// CloseElements
	// JSON: '{ \r\n\n\"\"\t :\t\n null\n,\n\n\"g3[l\":true\r,\t\t \t\r \"\\r\\b\\/\"\t\n\n\r\n: \n\n{}\r,\n\t\t\"\\/\" :null\t\n\t\t,\"\\r\" \r\t\t\r\n:\n[ \t true\n'
	const char* json = "{ \r\n\n\"\"\t :\t\n null\n,\n\n\"g3[l\":true\r,\t\t \t\r \"\\r\\b\\/\"\t\n\n\r\n: \n\n{}\r,\n\t\t\"\\/\" :null\t\n\t\t,\"\\r\" \r\t\t\r\n:\n[ \t true\n";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\n\\n\\\"\\\"\\t :\\t\\n null\\n,\\n\\n\\\"g3[l\\\":true\\r,\\t\\t \\t\\r \\\"\\\\r\\\\b\\\\/\\\"\\t\\n\\n\\r\\n: \\n\\n{}\\r,\\n\\t\\t\\\"\\\\/\\\" :null\\t\\n\\t\\t,\\\"\\\\r\\\" \\r\\t\\t\\r\\n:\\n[ \\t true\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b45aa78789382928da1f5a243a7d398e) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// JSON: '{\"\":true\n\n\t\n, \"\\t\\/\\\\\":  \ttrue\r\n, \"2\"\t:\ttrue\t, \"\\r~\"\r \n\r:\r\n\"\\r\\b\\nc\"\n,\n \t\"\\\\\\bU\\r\\\"\\/\\t{\\\"\"\t\r \t:[]\r '
	const char* json = "{\"\":true\n\n\t\n, \"\\t\\/\\\\\":  \ttrue\r\n, \"2\"\t:\ttrue\t, \"\\r~\"\r \n\r:\r\n\"\\r\\b\\nc\"\n,\n \t\"\\\\\\bU\\r\\\"\\/\\t{\\\"\"\t\r \t:[]\r ";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\":true\\n\\n\\t\\n, \\\"\\\\t\\\\/\\\\\\\\\\\":  \\ttrue\\r\\n, \\\"2\\\"\\t:\\ttrue\\t, \\\"\\\\r~\\\"\\r \\n\\r:\\r\\n\\\"\\\\r\\\\b\\\\nc\\\"\\n,\\n \\t\\\"\\\\\\\\\\\\bU\\\\r\\\\\\\"\\\\/\\\\t{\\\\\\\"\\\"\\t\\r \\t:[]\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_970a9de1c8ec8b560a6fab15ff1cbaa0) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\t  \"\" \t\t: \t{\n \"\\/\" \n:\r{} \n ,\t \t\"\\\\\" :[\rnull\r\t\r]\t,\r\r\t\t\r\"\\f\"\n \n\t:false \t\n\n,\r\n\"t\"\t:null, \t\t\t\"D\\n`\\ts\":'
	const char* json = "{\t  \"\" \t\t: \t{\n \"\\/\" \n:\r{} \n ,\t \t\"\\\\\" :[\rnull\r\t\r]\t,\r\r\t\t\r\"\\f\"\n \n\t:false \t\n\n,\r\n\"t\"\t:null, \t\t\t\"D\\n`\\ts\":";
	std::cerr << "Plain JSON string from model: " << "{\\t  \\\"\\\" \\t\\t: \\t{\\n \\\"\\\\/\\\" \\n:\\r{} \\n ,\\t \\t\\\"\\\\\\\\\\\" :[\\rnull\\r\\t\\r]\\t,\\r\\r\\t\\t\\r\\\"\\\\f\\\"\\n \\n\\t:false \\t\\n\\n,\\r\\n\\\"t\\\"\\t:null, \\t\\t\\t\\\"D\\\\n`\\\\ts\\\":" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_057ca1e5c88a4371544fb38f3200a207) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// JSON: ' {\t \n\"\\/\\r\\n\\\"\\nId\"\r\t\r\n\n :\t\ntrue\r\r\r \r, \"J\\r\"\r: \ttrue\n, \"\"\n\t\n:[ true \t  \n\r\t]  \t\r,\n\r \"\\n\\/\\/\"\r:\"\\t\\rXe'
	const char* json = " {\t \n\"\\/\\r\\n\\\"\\nId\"\r\t\r\n\n :\t\ntrue\r\r\r \r, \"J\\r\"\r: \ttrue\n, \"\"\n\t\n:[ true \t  \n\r\t]  \t\r,\n\r \"\\n\\/\\/\"\r:\"\\t\\rXe";
	std::cerr << "Plain JSON string from model: " << " {\\t \\n\\\"\\\\/\\\\r\\\\n\\\\\\\"\\\\nId\\\"\\r\\t\\r\\n\\n :\\t\\ntrue\\r\\r\\r \\r, \\\"J\\\\r\\\"\\r: \\ttrue\\n, \\\"\\\"\\n\\t\\n:[ true \\t  \\n\\r\\t]  \\t\\r,\\n\\r \\\"\\\\n\\\\/\\\\/\\\"\\r:\\\"\\\\t\\\\rXe" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c873ed86888e666ec386d7e92699ce62) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '\n{\r\t\r\"0\" :\tfalse\n\r  ,\t \r\"\\t\"\r\t \n:null,\n \t\"\\f=\"\r\t:\t\"\" \r ,\r\n\r\"t\":\"9\"\n  \n\r \r,\".5\\/\\n\\r1\\\"\\b\\\"\": {\r\t} ,\t'
	const char* json = "\n{\r\t\r\"0\" :\tfalse\n\r  ,\t \r\"\\t\"\r\t \n:null,\n \t\"\\f=\"\r\t:\t\"\" \r ,\r\n\r\"t\":\"9\"\n  \n\r \r,\".5\\/\\n\\r1\\\"\\b\\\"\": {\r\t} ,\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\t\\r\\\"0\\\" :\\tfalse\\n\\r  ,\\t \\r\\\"\\\\t\\\"\\r\\t \\n:null,\\n \\t\\\"\\\\f=\\\"\\r\\t:\\t\\\"\\\" \\r ,\\r\\n\\r\\\"t\\\":\\\"9\\\"\\n  \\n\\r \\r,\\\".5\\\\/\\\\n\\\\r1\\\\\\\"\\\\b\\\\\\\"\\\": {\\r\\t} ,\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f0455d44b952954f7c54d0b32b4d894b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// JSON: '\n{\"8\":\t\"hg\" \t,\t \r \n\n\"\"\n:null\n \n , \n\"\\fX\" \t :\nnull\t\r,\r\r\n\"{~xb\\n\\\"h\"\n:-0e050\t \t\n,\r\n\n\"\\r\"\t\n\t:\n -90.09 \n'
	const char* json = "\n{\"8\":\t\"hg\" \t,\t \r \n\n\"\"\n:null\n \n , \n\"\\fX\" \t :\nnull\t\r,\r\r\n\"{~xb\\n\\\"h\"\n:-0e050\t \t\n,\r\n\n\"\\r\"\t\n\t:\n -90.09 \n";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"8\\\":\\t\\\"hg\\\" \\t,\\t \\r \\n\\n\\\"\\\"\\n:null\\n \\n , \\n\\\"\\\\fX\\\" \\t :\\nnull\\t\\r,\\r\\r\\n\\\"{~xb\\\\n\\\\\\\"h\\\"\\n:-0e050\\t \\t\\n,\\r\\n\\n\\\"\\\\r\\\"\\t\\n\\t:\\n -90.09 \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_99b38a56b9396171d8475ec25921c2af) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// JSON: ' {\n\"\\n2\\/\\\\e\\rni\":null\r\r\n\n\t,\n\r \"\\bk\":\t0  \r,\r\r\"\\\\5f[K\\t\"\r\r: \n[]\n\t,\n\t\n\r\"f\"\n\t\t:\t\t\r[ false\t,\t0.060208\n ]'
	const char* json = " {\n\"\\n2\\/\\\\e\\rni\":null\r\r\n\n\t,\n\r \"\\bk\":\t0  \r,\r\r\"\\\\5f[K\\t\"\r\r: \n[]\n\t,\n\t\n\r\"f\"\n\t\t:\t\t\r[ false\t,\t0.060208\n ]";
	std::cerr << "Plain JSON string from model: " << " {\\n\\\"\\\\n2\\\\/\\\\\\\\e\\\\rni\\\":null\\r\\r\\n\\n\\t,\\n\\r \\\"\\\\bk\\\":\\t0  \\r,\\r\\r\\\"\\\\\\\\5f[K\\\\t\\\"\\r\\r: \\n[]\\n\\t,\\n\\t\\n\\r\\\"f\\\"\\n\\t\\t:\\t\\t\\r[ false\\t,\\t0.060208\\n ]" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_37c873cafe3afc343138d7b81f4eb3d9) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// JSON: '\r{\t\t\r \t \"\"\r\t\t:\ttrue\t\t\t\n\r,\t\t\r\"\\b\"\t :true\r\n\r,\t\r\"\\r1\"\r: \t\n0E089 ,\t\r\"F\":[\n\t\n\"WK\\f\\/\" ,116.0\t , \"l\\bZs\"\t]'
	const char* json = "\r{\t\t\r \t \"\"\r\t\t:\ttrue\t\t\t\n\r,\t\t\r\"\\b\"\t :true\r\n\r,\t\r\"\\r1\"\r: \t\n0E089 ,\t\r\"F\":[\n\t\n\"WK\\f\\/\" ,116.0\t , \"l\\bZs\"\t]";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\t\\r \\t \\\"\\\"\\r\\t\\t:\\ttrue\\t\\t\\t\\n\\r,\\t\\t\\r\\\"\\\\b\\\"\\t :true\\r\\n\\r,\\t\\r\\\"\\\\r1\\\"\\r: \\t\\n0E089 ,\\t\\r\\\"F\\\":[\\n\\t\\n\\\"WK\\\\f\\\\/\\\" ,116.0\\t , \\\"l\\\\bZs\\\"\\t]" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_816f9c95c87e52cd4de9c66ecf63d8ae) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// JSON: '\n\t{ \n\n \n \"\\f\\\\\":null\t\n,\r \n \"jJ\":{} \r \r\t\n, \t\"\\f\\\"\\t\" \n\n:\ntrue,\n\"\\t\\\\\\/6\"\t\n  :\rfalse\t,\r \"\"\t \r : \n\"\\n\\\\'
	const char* json = "\n\t{ \n\n \n \"\\f\\\\\":null\t\n,\r \n \"jJ\":{} \r \r\t\n, \t\"\\f\\\"\\t\" \n\n:\ntrue,\n\"\\t\\\\\\/6\"\t\n  :\rfalse\t,\r \"\"\t \r : \n\"\\n\\\\";
	std::cerr << "Plain JSON string from model: " << "\\n\\t{ \\n\\n \\n \\\"\\\\f\\\\\\\\\\\":null\\t\\n,\\r \\n \\\"jJ\\\":{} \\r \\r\\t\\n, \\t\\\"\\\\f\\\\\\\"\\\\t\\\" \\n\\n:\\ntrue,\\n\\\"\\\\t\\\\\\\\\\\\/6\\\"\\t\\n  :\\rfalse\\t,\\r \\\"\\\"\\t \\r : \\n\\\"\\\\n\\\\\\\\" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b736fb2d49715f21f9c4bfec96cd4248) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// JSON: ' { \r\r\n\n\n\"\":-80e+0,\t\"b\" \n\r: false\r\t\n\r\n,\r\r\"eY\" :\r\nnull\t\r,\r\r\r\"M\\fT7\"\n: false\r,\n \t\r\r\n\"r\\b\"\n:\"\\n\", \r\"\\/,\"'
	const char* json = " { \r\r\n\n\n\"\":-80e+0,\t\"b\" \n\r: false\r\t\n\r\n,\r\r\"eY\" :\r\nnull\t\r,\r\r\r\"M\\fT7\"\n: false\r,\n \t\r\r\n\"r\\b\"\n:\"\\n\", \r\"\\/,\"";
	std::cerr << "Plain JSON string from model: " << " { \\r\\r\\n\\n\\n\\\"\\\":-80e+0,\\t\\\"b\\\" \\n\\r: false\\r\\t\\n\\r\\n,\\r\\r\\\"eY\\\" :\\r\\nnull\\t\\r,\\r\\r\\r\\\"M\\\\fT7\\\"\\n: false\\r,\\n \\t\\r\\r\\n\\\"r\\\\b\\\"\\n:\\\"\\\\n\\\", \\r\\\"\\\\/,\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_32535acd433ae1f330cdea561963f72c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// JSON: '{\t\t\t\"v\\r\\\\T\" :\n-0E+0\n\t,\r \r\t\n\n\"T\\n\\\\\":\n-50\r\t\n,\t\r\r\"\":\t\nnull\t\t\n\r,\n\r \r\r\r\t\"\\b(\\t\":\r false\t\n\r\r\n,\r\r \"\\rL\\/\"'
	const char* json = "{\t\t\t\"v\\r\\\\T\" :\n-0E+0\n\t,\r \r\t\n\n\"T\\n\\\\\":\n-50\r\t\n,\t\r\r\"\":\t\nnull\t\t\n\r,\n\r \r\r\r\t\"\\b(\\t\":\r false\t\n\r\r\n,\r\r \"\\rL\\/\"";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\t\\\"v\\\\r\\\\\\\\T\\\" :\\n-0E+0\\n\\t,\\r \\r\\t\\n\\n\\\"T\\\\n\\\\\\\\\\\":\\n-50\\r\\t\\n,\\t\\r\\r\\\"\\\":\\t\\nnull\\t\\t\\n\\r,\\n\\r \\r\\r\\r\\t\\\"\\\\b(\\\\t\\\":\\r false\\t\\n\\r\\r\\n,\\r\\r \\\"\\\\rL\\\\/\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cf0819c4e8c7d675b118cb101719a0fc) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// JSON: ' \t{ \t  \n\"O\\r\":\n\t\n[-4.06050208E0 \t ]\n ,\r \r\"gv\" \n:\n\nnull,\n\"[|\\/L\" \n:true,\n\r \r\t\"\" :\r-1.0\r  ,\r\r\r\r\n\"\\tb\\t'
	const char* json = " \t{ \t  \n\"O\\r\":\n\t\n[-4.06050208E0 \t ]\n ,\r \r\"gv\" \n:\n\nnull,\n\"[|\\/L\" \n:true,\n\r \r\t\"\" :\r-1.0\r  ,\r\r\r\r\n\"\\tb\\t";
	std::cerr << "Plain JSON string from model: " << " \\t{ \\t  \\n\\\"O\\\\r\\\":\\n\\t\\n[-4.06050208E0 \\t ]\\n ,\\r \\r\\\"gv\\\" \\n:\\n\\nnull,\\n\\\"[|\\\\/L\\\" \\n:true,\\n\\r \\r\\t\\\"\\\" :\\r-1.0\\r  ,\\r\\r\\r\\r\\n\\\"\\\\tb\\\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0d03b137688955c75c711184b54f20c5) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\r \t\"\\\"+\\n=J\":\n [\n] \n\r, \r\n\"\"\t :-0E05040\r\t \r\r,\r\"\\f\\f2\"\r\t\n\t:\n 7.07  ,\r\n\n\"\\/\\/?-c\\b\" :false\n,\n\t \r\"\\\\y\":'
	const char* json = "{\r \t\"\\\"+\\n=J\":\n [\n] \n\r, \r\n\"\"\t :-0E05040\r\t \r\r,\r\"\\f\\f2\"\r\t\n\t:\n 7.07  ,\r\n\n\"\\/\\/?-c\\b\" :false\n,\n\t \r\"\\\\y\":";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t\\\"\\\\\\\"+\\\\n=J\\\":\\n [\\n] \\n\\r, \\r\\n\\\"\\\"\\t :-0E05040\\r\\t \\r\\r,\\r\\\"\\\\f\\\\f2\\\"\\r\\t\\n\\t:\\n 7.07  ,\\r\\n\\n\\\"\\\\/\\\\/?-c\\\\b\\\" :false\\n,\\n\\t \\r\\\"\\\\\\\\y\\\":" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ec9c172cba29f29b8207ea0fb86c35ff) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: ' \t\r{ \"v\"\t\t\r:true\n\r\n\r\n\t\r, \"\\f\\\"\\/\": \t\t-0.0902170e0703\t,\r\r\r\n\"\\\"rt)\"\t \n:{}  \t,  \t \n \"\\/\\t\" \n: \n\t-7\t\r,\t '
	const char* json = " \t\r{ \"v\"\t\t\r:true\n\r\n\r\n\t\r, \"\\f\\\"\\/\": \t\t-0.0902170e0703\t,\r\r\r\n\"\\\"rt)\"\t \n:{}  \t,  \t \n \"\\/\\t\" \n: \n\t-7\t\r,\t ";
	std::cerr << "Plain JSON string from model: " << " \\t\\r{ \\\"v\\\"\\t\\t\\r:true\\n\\r\\n\\r\\n\\t\\r, \\\"\\\\f\\\\\\\"\\\\/\\\": \\t\\t-0.0902170e0703\\t,\\r\\r\\r\\n\\\"\\\\\\\"rt)\\\"\\t \\n:{}  \\t,  \\t \\n \\\"\\\\/\\\\t\\\" \\n: \\n\\t-7\\t\\r,\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1723a7edd65cdcdf868c5bde9d2d0209) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// JSON: '{\"V\":\"\\/\"\t\r\n,\t\n\"\\r\\f\\n\\r\"\r\r:\tfalse\t, \r\n\"\"\t:[\t\ttrue] \n\t,\t\"\\/\\\\\"\t:\n\t\r-20\t\t\n, \"s\" :\n \r\n[] \r\t\r\t\r, \r\"\\/8:'
	const char* json = "{\"V\":\"\\/\"\t\r\n,\t\n\"\\r\\f\\n\\r\"\r\r:\tfalse\t, \r\n\"\"\t:[\t\ttrue] \n\t,\t\"\\/\\\\\"\t:\n\t\r-20\t\t\n, \"s\" :\n \r\n[] \r\t\r\t\r, \r\"\\/8:";
	std::cerr << "Plain JSON string from model: " << "{\\\"V\\\":\\\"\\\\/\\\"\\t\\r\\n,\\t\\n\\\"\\\\r\\\\f\\\\n\\\\r\\\"\\r\\r:\\tfalse\\t, \\r\\n\\\"\\\"\\t:[\\t\\ttrue] \\n\\t,\\t\\\"\\\\/\\\\\\\\\\\"\\t:\\n\\t\\r-20\\t\\t\\n, \\\"s\\\" :\\n \\r\\n[] \\r\\t\\r\\t\\r, \\r\\\"\\\\/8:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ded21ec9317c8e053399b78e7a7378e4) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{ \n\n\r\"\": false\r\r\n \n\r\n,\r\"$|\":\n []\r\t\r,\n\t\r \r\"A\\n\":\r30\r\r, \".ri\\fr\":{} \n\t, \n\r\t\"\\f\\\"=G\\b\" \t:false\n,\t\"=\"\n\t:'
	const char* json = "{ \n\n\r\"\": false\r\r\n \n\r\n,\r\"$|\":\n []\r\t\r,\n\t\r \r\"A\\n\":\r30\r\r, \".ri\\fr\":{} \n\t, \n\r\t\"\\f\\\"=G\\b\" \t:false\n,\t\"=\"\n\t:";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\n\\r\\\"\\\": false\\r\\r\\n \\n\\r\\n,\\r\\\"$|\\\":\\n []\\r\\t\\r,\\n\\t\\r \\r\\\"A\\\\n\\\":\\r30\\r\\r, \\\".ri\\\\fr\\\":{} \\n\\t, \\n\\r\\t\\\"\\\\f\\\\\\\"=G\\\\b\\\" \\t:false\\n,\\t\\\"=\\\"\\n\\t:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_eae69e1110b0a19e3827468ce20ed1c6) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\r \"\"\r:\"$\\b1\\n\\\\\"\n\t\n\r,\n\r\t\n  \n\"(\\n?\"\r \t:\t[]\t\n\t \t,\r\t\"\\rC\\/6\\tPej@\":null\t\r \t\n,\"Ms\\\"\\\"\"\t\t\r:true\n, \"\\bG\"\t'
	const char* json = "{\r \"\"\r:\"$\\b1\\n\\\\\"\n\t\n\r,\n\r\t\n  \n\"(\\n?\"\r \t:\t[]\t\n\t \t,\r\t\"\\rC\\/6\\tPej@\":null\t\r \t\n,\"Ms\\\"\\\"\"\t\t\r:true\n, \"\\bG\"\t";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"\\\"\\r:\\\"$\\\\b1\\\\n\\\\\\\\\\\"\\n\\t\\n\\r,\\n\\r\\t\\n  \\n\\\"(\\\\n?\\\"\\r \\t:\\t[]\\t\\n\\t \\t,\\r\\t\\\"\\\\rC\\\\/6\\\\tPej@\\\":null\\t\\r \\t\\n,\\\"Ms\\\\\\\"\\\\\\\"\\\"\\t\\t\\r:true\\n, \\\"\\\\bG\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0ff0190ed947d9373ea2b8eca864e2ab) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '\r\n{\t\"\\\"\" \r :null\r,\"GoAF\\b\"\t:\r\rtrue\t \n,\r\t\n\"\"\t\r:{\r\n\r\"\\/\"\t\t\n:\r[ -0E-05\r,false]\t \n}\r ,\t\t\n\n\n\"hP\"\t\r\n:\n-50\n'
	const char* json = "\r\n{\t\"\\\"\" \r :null\r,\"GoAF\\b\"\t:\r\rtrue\t \n,\r\t\n\"\"\t\r:{\r\n\r\"\\/\"\t\t\n:\r[ -0E-05\r,false]\t \n}\r ,\t\t\n\n\n\"hP\"\t\r\n:\n-50\n";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\t\\\"\\\\\\\"\\\" \\r :null\\r,\\\"GoAF\\\\b\\\"\\t:\\r\\rtrue\\t \\n,\\r\\t\\n\\\"\\\"\\t\\r:{\\r\\n\\r\\\"\\\\/\\\"\\t\\t\\n:\\r[ -0E-05\\r,false]\\t \\n}\\r ,\\t\\t\\n\\n\\n\\\"hP\\\"\\t\\r\\n:\\n-50\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_40cfd424eee912dbf8c77b776c46a268) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\t{\n \n \r \"\\b|\\n\"\r:\"\" ,\t\"?\":-10.0 \n\r  \n\r\n,\r\t\r\"\\\"R\"\t  \n\n:{\"v\\/\\t@\"\t:\r[\t\r], \r\"\\t\"\r:0e-0896  \r\t,\t\r\"\\\\\\t\"\n'
	const char* json = "\t{\n \n \r \"\\b|\\n\"\r:\"\" ,\t\"?\":-10.0 \n\r  \n\r\n,\r\t\r\"\\\"R\"\t  \n\n:{\"v\\/\\t@\"\t:\r[\t\r], \r\"\\t\"\r:0e-0896  \r\t,\t\r\"\\\\\\t\"\n";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n \\n \\r \\\"\\\\b|\\\\n\\\"\\r:\\\"\\\" ,\\t\\\"?\\\":-10.0 \\n\\r  \\n\\r\\n,\\r\\t\\r\\\"\\\\\\\"R\\\"\\t  \\n\\n:{\\\"v\\\\/\\\\t@\\\"\\t:\\r[\\t\\r], \\r\\\"\\\\t\\\"\\r:0e-0896  \\r\\t,\\t\\r\\\"\\\\\\\\\\\\t\\\"\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4adcee354ea701e45ad0ad9f3f91c441) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '\r\r {\n\"\\b\"\t \r\t:[ {}\t\n  ] \r\n\t,\r\"\"\n \r \n\n:[]\t ,\"\\/\"\n\r\n:{}\t\t\r,\r\"\\n\\t\"\n :\nnull\r\r \n\t\n, \r\":\\f\"\r:\t\"\\\"\"\t  ,\t\r\r'
	const char* json = "\r\r {\n\"\\b\"\t \r\t:[ {}\t\n  ] \r\n\t,\r\"\"\n \r \n\n:[]\t ,\"\\/\"\n\r\n:{}\t\t\r,\r\"\\n\\t\"\n :\nnull\r\r \n\t\n, \r\":\\f\"\r:\t\"\\\"\"\t  ,\t\r\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\r {\\n\\\"\\\\b\\\"\\t \\r\\t:[ {}\\t\\n  ] \\r\\n\\t,\\r\\\"\\\"\\n \\r \\n\\n:[]\\t ,\\\"\\\\/\\\"\\n\\r\\n:{}\\t\\t\\r,\\r\\\"\\\\n\\\\t\\\"\\n :\\nnull\\r\\r \\n\\t\\n, \\r\\\":\\\\f\\\"\\r:\\t\\\"\\\\\\\"\\\"\\t  ,\\t\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ec86929839f3279543007c12b389b51e) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\n  \"\\nzC\":false  \t\n,\n\"\\\\\"\r\n  \t:false\r\r,\n\"t\": false ,\r\t   \"\"\r\r:\r\ttrue\t\n\r\r\t\n,\t \t\t\r\r\"\\rfjY\\f\" \t\t:\t\r[  '
	const char* json = "{\n  \"\\nzC\":false  \t\n,\n\"\\\\\"\r\n  \t:false\r\r,\n\"t\": false ,\r\t   \"\"\r\r:\r\ttrue\t\n\r\r\t\n,\t \t\t\r\r\"\\rfjY\\f\" \t\t:\t\r[  ";
	std::cerr << "Plain JSON string from model: " << "{\\n  \\\"\\\\nzC\\\":false  \\t\\n,\\n\\\"\\\\\\\\\\\"\\r\\n  \\t:false\\r\\r,\\n\\\"t\\\": false ,\\r\\t   \\\"\\\"\\r\\r:\\r\\ttrue\\t\\n\\r\\r\\t\\n,\\t \\t\\t\\r\\r\\\"\\\\rfjY\\\\f\\\" \\t\\t:\\t\\r[  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_883d43012b9da14525e0fcb68e29e00d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// JSON: '{\t\"\":\n\ntrue ,\r\"n\":\r\t \"\\\"\",\"\\r\":-0e+04\t\r\n , \"!\\\"\\\"\" \r:false\r\n,\n\t\n\r\"-<|\\/\"\n\n :true,\t\t\"*\\b\":\n[ \t]\t\t\t , '
	const char* json = "{\t\"\":\n\ntrue ,\r\"n\":\r\t \"\\\"\",\"\\r\":-0e+04\t\r\n , \"!\\\"\\\"\" \r:false\r\n,\n\t\n\r\"-<|\\/\"\n\n :true,\t\t\"*\\b\":\n[ \t]\t\t\t , ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\":\\n\\ntrue ,\\r\\\"n\\\":\\r\\t \\\"\\\\\\\"\\\",\\\"\\\\r\\\":-0e+04\\t\\r\\n , \\\"!\\\\\\\"\\\\\\\"\\\" \\r:false\\r\\n,\\n\\t\\n\\r\\\"-<|\\\\/\\\"\\n\\n :true,\\t\\t\\\"*\\\\b\\\":\\n[ \\t]\\t\\t\\t , " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_50d7a319c958913dc30a6cf68a6cfd43) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// JSON: '\n{ \r\"\\tp~\\r\\t\\/\\f\\n\":\"\"\n ,\"\\\"\":\n\r4E+0305\r, \t \"\\\"S_\\r\"\n\t :\r\n\n[ \n[\t  \r\"\\f\\t(\\fIS\",\t true\n,true\r\n\n]\r \r\t'
	const char* json = "\n{ \r\"\\tp~\\r\\t\\/\\f\\n\":\"\"\n ,\"\\\"\":\n\r4E+0305\r, \t \"\\\"S_\\r\"\n\t :\r\n\n[ \n[\t  \r\"\\f\\t(\\fIS\",\t true\n,true\r\n\n]\r \r\t";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\r\\\"\\\\tp~\\\\r\\\\t\\\\/\\\\f\\\\n\\\":\\\"\\\"\\n ,\\\"\\\\\\\"\\\":\\n\\r4E+0305\\r, \\t \\\"\\\\\\\"S_\\\\r\\\"\\n\\t :\\r\\n\\n[ \\n[\\t  \\r\\\"\\\\f\\\\t(\\\\fIS\\\",\\t true\\n,true\\r\\n\\n]\\r \\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e6ac99b609c6fe913f8bff7de7446cc5) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\n\n {\r\t\r\"\\n\"\n\t:\r \"\\nm\\\"\\tE\"\r,\"\"\n\n\n\n:\r \t{\r  \">\\f\\n\"\r:  null\r \t\n\r},\n \"\\\"\\/\\\"B\":true\n,\"3\"\n:\t\r\"w\"\n\r \t\r\t\r,'
	const char* json = "\n\n {\r\t\r\"\\n\"\n\t:\r \"\\nm\\\"\\tE\"\r,\"\"\n\n\n\n:\r \t{\r  \">\\f\\n\"\r:  null\r \t\n\r},\n \"\\\"\\/\\\"B\":true\n,\"3\"\n:\t\r\"w\"\n\r \t\r\t\r,";
	std::cerr << "Plain JSON string from model: " << "\\n\\n {\\r\\t\\r\\\"\\\\n\\\"\\n\\t:\\r \\\"\\\\nm\\\\\\\"\\\\tE\\\"\\r,\\\"\\\"\\n\\n\\n\\n:\\r \\t{\\r  \\\">\\\\f\\\\n\\\"\\r:  null\\r \\t\\n\\r},\\n \\\"\\\\\\\"\\\\/\\\\\\\"B\\\":true\\n,\\\"3\\\"\\n:\\t\\r\\\"w\\\"\\n\\r \\t\\r\\t\\r," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4dbaf9ddf72b5bb6c8c14b5b4a957d7c) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// JSON: '{\n\r\t \"e\"\t\n :\tfalse\r\r\t,\n \r \r\r\"\\b\"\r\t\n\r\n:true\r \t, \n \"\":true\t\n,\n \t\"v\\t\\/\":{\t},\n\n\t\r\"(\\r\"\n\t:true \t\t,\n\n \"~Y'
	const char* json = "{\n\r\t \"e\"\t\n :\tfalse\r\r\t,\n \r \r\r\"\\b\"\r\t\n\r\n:true\r \t, \n \"\":true\t\n,\n \t\"v\\t\\/\":{\t},\n\n\t\r\"(\\r\"\n\t:true \t\t,\n\n \"~Y";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\t \\\"e\\\"\\t\\n :\\tfalse\\r\\r\\t,\\n \\r \\r\\r\\\"\\\\b\\\"\\r\\t\\n\\r\\n:true\\r \\t, \\n \\\"\\\":true\\t\\n,\\n \\t\\\"v\\\\t\\\\/\\\":{\\t},\\n\\n\\t\\r\\\"(\\\\r\\\"\\n\\t:true \\t\\t,\\n\\n \\\"~Y" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4b8a07df6e4b19117cb1f92bfdeeaf55) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '\t{\r \t\t\t \"\\be\"\r\t\n:[]\r\t , \r\t\"\"\t\t:\r[\n\t\r[\n]\t\r\n\t\n]\r\t\t,\n\n\r\"\\bF\\t\\n\":\n{\n \r} \n , \r  \t\n\"G3\"\t:false\n\t\r \t,\n\r\"\\b'
	const char* json = "\t{\r \t\t\t \"\\be\"\r\t\n:[]\r\t , \r\t\"\"\t\t:\r[\n\t\r[\n]\t\r\n\t\n]\r\t\t,\n\n\r\"\\bF\\t\\n\":\n{\n \r} \n , \r  \t\n\"G3\"\t:false\n\t\r \t,\n\r\"\\b";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r \\t\\t\\t \\\"\\\\be\\\"\\r\\t\\n:[]\\r\\t , \\r\\t\\\"\\\"\\t\\t:\\r[\\n\\t\\r[\\n]\\t\\r\\n\\t\\n]\\r\\t\\t,\\n\\n\\r\\\"\\\\bF\\\\t\\\\n\\\":\\n{\\n \\r} \\n , \\r  \\t\\n\\\"G3\\\"\\t:false\\n\\t\\r \\t,\\n\\r\\\"\\\\b" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_25af554db9eb801f9a1766a36012e994) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// JSON: '\r{\t\t \n\n\"\\\\\\bN\"\r\n\r\r:\n \n[{\r},true \t]\r  \r,\t\r\"\" :\"\\t\"\t ,\n\t\r\"\\/\\f\\f\\t\\f\\\\\\f\\\\@\":40.028017403E0\n,\t\t\"7\"\t :\"'
	const char* json = "\r{\t\t \n\n\"\\\\\\bN\"\r\n\r\r:\n \n[{\r},true \t]\r  \r,\t\r\"\" :\"\\t\"\t ,\n\t\r\"\\/\\f\\f\\t\\f\\\\\\f\\\\@\":40.028017403E0\n,\t\t\"7\"\t :\"";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\t \\n\\n\\\"\\\\\\\\\\\\bN\\\"\\r\\n\\r\\r:\\n \\n[{\\r},true \\t]\\r  \\r,\\t\\r\\\"\\\" :\\\"\\\\t\\\"\\t ,\\n\\t\\r\\\"\\\\/\\\\f\\\\f\\\\t\\\\f\\\\\\\\\\\\f\\\\\\\\@\\\":40.028017403E0\\n,\\t\\t\\\"7\\\"\\t :\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_91872ac056f058912801c38927ecf41f) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// JSON: '{\t\r\"I^\":\nfalse,\t\r\n\n\"Z2\"\t \r:\"V^\\nL3\\\\\\\\=@C\" , \n\n\"\" \r:true,\r\t\"~\":\"\\\\\"\n\t\r\n\r,\n\r\"Y\"\r\n\n:\t{}\t\n\n,\r\t \"S`N\\t\\f'
	const char* json = "{\t\r\"I^\":\nfalse,\t\r\n\n\"Z2\"\t \r:\"V^\\nL3\\\\\\\\=@C\" , \n\n\"\" \r:true,\r\t\"~\":\"\\\\\"\n\t\r\n\r,\n\r\"Y\"\r\n\n:\t{}\t\n\n,\r\t \"S`N\\t\\f";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"I^\\\":\\nfalse,\\t\\r\\n\\n\\\"Z2\\\"\\t \\r:\\\"V^\\\\nL3\\\\\\\\\\\\\\\\=@C\\\" , \\n\\n\\\"\\\" \\r:true,\\r\\t\\\"~\\\":\\\"\\\\\\\\\\\"\\n\\t\\r\\n\\r,\\n\\r\\\"Y\\\"\\r\\n\\n:\\t{}\\t\\n\\n,\\r\\t \\\"S`N\\\\t\\\\f" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f14f6d57a02271982432a6b2b701980b) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\r\"\"\t\n:\n\t-525.0\t, \n\r\n \t\"^4\":0\n,\t \n\"\\\"\" \r:974E+0\r\n\t ,   \n\r\"XZu\":{\r\n\t\"\\n\\t\\/T\"\r\r\r: \t[\r{\n\r\"\\fGQ\"\t\t\r:\n\t\t'
	const char* json = "{\r\"\"\t\n:\n\t-525.0\t, \n\r\n \t\"^4\":0\n,\t \n\"\\\"\" \r:974E+0\r\n\t ,   \n\r\"XZu\":{\r\n\t\"\\n\\t\\/T\"\r\r\r: \t[\r{\n\r\"\\fGQ\"\t\t\r:\n\t\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\t\\n:\\n\\t-525.0\\t, \\n\\r\\n \\t\\\"^4\\\":0\\n,\\t \\n\\\"\\\\\\\"\\\" \\r:974E+0\\r\\n\\t ,   \\n\\r\\\"XZu\\\":{\\r\\n\\t\\\"\\\\n\\\\t\\\\/T\\\"\\r\\r\\r: \\t[\\r{\\n\\r\\\"\\\\fGQ\\\"\\t\\t\\r:\\n\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d4d1c84234ac65ce2f16ae2b4fa5e66b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\t{\"\" \t:\n\"\\/\" \t,  \"i\"\r:true\t,\t\r\"\\rV\\f\": \t\tnull\r\n\n\r,\n\n\r \"\\n\\ta\\/\"\r:\r\t\r\n[\r\r ]\t \t,\r \"\\n_\"\t\r:-50.0\t\n \n,\r\t'
	const char* json = "\t{\"\" \t:\n\"\\/\" \t,  \"i\"\r:true\t,\t\r\"\\rV\\f\": \t\tnull\r\n\n\r,\n\n\r \"\\n\\ta\\/\"\r:\r\t\r\n[\r\r ]\t \t,\r \"\\n_\"\t\r:-50.0\t\n \n,\r\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"\\\" \\t:\\n\\\"\\\\/\\\" \\t,  \\\"i\\\"\\r:true\\t,\\t\\r\\\"\\\\rV\\\\f\\\": \\t\\tnull\\r\\n\\n\\r,\\n\\n\\r \\\"\\\\n\\\\ta\\\\/\\\"\\r:\\r\\t\\r\\n[\\r\\r ]\\t \\t,\\r \\\"\\\\n_\\\"\\t\\r:-50.0\\t\\n \\n,\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_75ce4db79edffe09343e0f34e95b4330) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// JSON: '\t{\t\n\r\"\"\n :\r \rfalse\t\r,\n\"y{j\\tRV-Z\"\r\n : null,\n\t\n\"h\\nI\"\t:\n\r\"Q\\\\\\b\\/\" \n,\"r\"\r:false,\t\n\"\\t\"\r\t:false \t ,\"\\n'
	const char* json = "\t{\t\n\r\"\"\n :\r \rfalse\t\r,\n\"y{j\\tRV-Z\"\r\n : null,\n\t\n\"h\\nI\"\t:\n\r\"Q\\\\\\b\\/\" \n,\"r\"\r:false,\t\n\"\\t\"\r\t:false \t ,\"\\n";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\n\\r\\\"\\\"\\n :\\r \\rfalse\\t\\r,\\n\\\"y{j\\\\tRV-Z\\\"\\r\\n : null,\\n\\t\\n\\\"h\\\\nI\\\"\\t:\\n\\r\\\"Q\\\\\\\\\\\\b\\\\/\\\" \\n,\\\"r\\\"\\r:false,\\t\\n\\\"\\\\t\\\"\\r\\t:false \\t ,\\\"\\\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5a8ee1980ed730aabed7364b19068179) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '\t{\"\"\t : null \t\n\t, \"o\"\n \r: 90.04E04\t\r,\n\n \"\\t()]\\/\\fu\\b\":\t[ \ntrue , null\n\n, {\t\n\"s\"\n\t\t\n:\n\t\ntrue\r\n\r}\t ]\n'
	const char* json = "\t{\"\"\t : null \t\n\t, \"o\"\n \r: 90.04E04\t\r,\n\n \"\\t()]\\/\\fu\\b\":\t[ \ntrue , null\n\n, {\t\n\"s\"\n\t\t\n:\n\t\ntrue\r\n\r}\t ]\n";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"\\\"\\t : null \\t\\n\\t, \\\"o\\\"\\n \\r: 90.04E04\\t\\r,\\n\\n \\\"\\\\t()]\\\\/\\\\fu\\\\b\\\":\\t[ \\ntrue , null\\n\\n, {\\t\\n\\\"s\\\"\\n\\t\\t\\n:\\n\\t\\ntrue\\r\\n\\r}\\t ]\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_52cedf55162de6a8002fc9a5e33038d8) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// JSON: '{\"X\":null\n\r\t,\n \r\n\n\"\"\n\r\n: \n\r  false\n\t,\r\r\"\\\"Yu'l\\\\\\\"\\b\"\n\t\t:false\n\n,\r\"\\b\\\\\":0E0 , \"\\b\\nB\\t\\/l\"\t   :\t \r\"'
	const char* json = "{\"X\":null\n\r\t,\n \r\n\n\"\"\n\r\n: \n\r  false\n\t,\r\r\"\\\"Yu'l\\\\\\\"\\b\"\n\t\t:false\n\n,\r\"\\b\\\\\":0E0 , \"\\b\\nB\\t\\/l\"\t   :\t \r\"";
	std::cerr << "Plain JSON string from model: " << "{\\\"X\\\":null\\n\\r\\t,\\n \\r\\n\\n\\\"\\\"\\n\\r\\n: \\n\\r  false\\n\\t,\\r\\r\\\"\\\\\\\"Yu'l\\\\\\\\\\\\\\\"\\\\b\\\"\\n\\t\\t:false\\n\\n,\\r\\\"\\\\b\\\\\\\\\\\":0E0 , \\\"\\\\b\\\\nB\\\\t\\\\/l\\\"\\t   :\\t \\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_78e806d9fa359aee6d6fe28a06ea407d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// JSON: '\n{\n\n\"Q\":\t\"\\t\\b\\n\" \t, \t\n\"\"\t \t:\"\\\\\"\t\r\r\t \n,\r\"\\\\Y\\t\" : \tfalse\t\t\n, \t\t \n\"\\/\\r\\t\\\"\"\r\n\n:  {\r}\n  ,\n\n\"$7\":\n\t\n{'
	const char* json = "\n{\n\n\"Q\":\t\"\\t\\b\\n\" \t, \t\n\"\"\t \t:\"\\\\\"\t\r\r\t \n,\r\"\\\\Y\\t\" : \tfalse\t\t\n, \t\t \n\"\\/\\r\\t\\\"\"\r\n\n:  {\r}\n  ,\n\n\"$7\":\n\t\n{";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\n\\\"Q\\\":\\t\\\"\\\\t\\\\b\\\\n\\\" \\t, \\t\\n\\\"\\\"\\t \\t:\\\"\\\\\\\\\\\"\\t\\r\\r\\t \\n,\\r\\\"\\\\\\\\Y\\\\t\\\" : \\tfalse\\t\\t\\n, \\t\\t \\n\\\"\\\\/\\\\r\\\\t\\\\\\\"\\\"\\r\\n\\n:  {\\r}\\n  ,\\n\\n\\\"$7\\\":\\n\\t\\n{" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7297363b39386e72079733d0bfb2e11a) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '\n{ \t\r\n\"\\f2\\\\\":{ \n\n \"\"\n\t\r: [ \t true\r\t]   ,\t \r\r\"\\r2\\t\" : 0.0670\r\n,\r \r\t\"]\\f\\nw\"\r:\r\"P\"\r\t\r\t\n}\r \r , \r  \"\\\\'
	const char* json = "\n{ \t\r\n\"\\f2\\\\\":{ \n\n \"\"\n\t\r: [ \t true\r\t]   ,\t \r\r\"\\r2\\t\" : 0.0670\r\n,\r \r\t\"]\\f\\nw\"\r:\r\"P\"\r\t\r\t\n}\r \r , \r  \"\\\\";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t\\r\\n\\\"\\\\f2\\\\\\\\\\\":{ \\n\\n \\\"\\\"\\n\\t\\r: [ \\t true\\r\\t]   ,\\t \\r\\r\\\"\\\\r2\\\\t\\\" : 0.0670\\r\\n,\\r \\r\\t\\\"]\\\\f\\\\nw\\\"\\r:\\r\\\"P\\\"\\r\\t\\r\\t\\n}\\r \\r , \\r  \\\"\\\\\\\\" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ef6bcd0fd91fb394f157167764e0e698) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\r \t\"\":\rtrue  \t\n,\n\n\t\t\"|Ld\\/\\n\\n\\r[\\f\\n\\r\": \"\\\\\"\n\r \r \t,\t\r\r\"\\n\\ry\\\"\"\t:\r\n{\n\n\"\\r\\r\" :\nfalse\t, \n\"3;\\b\"\t:\n'
	const char* json = "{\r \t\"\":\rtrue  \t\n,\n\n\t\t\"|Ld\\/\\n\\n\\r[\\f\\n\\r\": \"\\\\\"\n\r \r \t,\t\r\r\"\\n\\ry\\\"\"\t:\r\n{\n\n\"\\r\\r\" :\nfalse\t, \n\"3;\\b\"\t:\n";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t\\\"\\\":\\rtrue  \\t\\n,\\n\\n\\t\\t\\\"|Ld\\\\/\\\\n\\\\n\\\\r[\\\\f\\\\n\\\\r\\\": \\\"\\\\\\\\\\\"\\n\\r \\r \\t,\\t\\r\\r\\\"\\\\n\\\\ry\\\\\\\"\\\"\\t:\\r\\n{\\n\\n\\\"\\\\r\\\\r\\\" :\\nfalse\\t, \\n\\\"3;\\\\b\\\"\\t:\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e2e1417297c6837c57f04c38f15921db) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// JSON: ' {\r\r\"\\/\\nB\\b\\\"c\\/x+\" \t \n:\r  true\r\r,   \n\r\"\\b\\r\"\r:\"\\\\\\b\"\t\n\n,\t\r\r\n\t\"\\\"\\r\\f\\r$\\\\zP\":\n false ,\"\"\r \r:\t null'
	const char* json = " {\r\r\"\\/\\nB\\b\\\"c\\/x+\" \t \n:\r  true\r\r,   \n\r\"\\b\\r\"\r:\"\\\\\\b\"\t\n\n,\t\r\r\n\t\"\\\"\\r\\f\\r$\\\\zP\":\n false ,\"\"\r \r:\t null";
	std::cerr << "Plain JSON string from model: " << " {\\r\\r\\\"\\\\/\\\\nB\\\\b\\\\\\\"c\\\\/x+\\\" \\t \\n:\\r  true\\r\\r,   \\n\\r\\\"\\\\b\\\\r\\\"\\r:\\\"\\\\\\\\\\\\b\\\"\\t\\n\\n,\\t\\r\\r\\n\\t\\\"\\\\\\\"\\\\r\\\\f\\\\r$\\\\\\\\zP\\\":\\n false ,\\\"\\\"\\r \\r:\\t null" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0f9f27e690508a82360dd8864993b1ce) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// JSON: ' \n{\r\t\n\"\"\n:\n\"\\f\"  ,\r\r\"\\/\" :\"#D\\b\\\\\\/\"\n\t\t\t, \"\\t\":\t \ntrue\r\n,\r\t\n\t\t\"\\to\" \t:null , \n\"\\n\"\r:{\t \r\t \"\\b\":true\t'
	const char* json = " \n{\r\t\n\"\"\n:\n\"\\f\"  ,\r\r\"\\/\" :\"#D\\b\\\\\\/\"\n\t\t\t, \"\\t\":\t \ntrue\r\n,\r\t\n\t\t\"\\to\" \t:null , \n\"\\n\"\r:{\t \r\t \"\\b\":true\t";
	std::cerr << "Plain JSON string from model: " << " \\n{\\r\\t\\n\\\"\\\"\\n:\\n\\\"\\\\f\\\"  ,\\r\\r\\\"\\\\/\\\" :\\\"#D\\\\b\\\\\\\\\\\\/\\\"\\n\\t\\t\\t, \\\"\\\\t\\\":\\t \\ntrue\\r\\n,\\r\\t\\n\\t\\t\\\"\\\\to\\\" \\t:null , \\n\\\"\\\\n\\\"\\r:{\\t \\r\\t \\\"\\\\b\\\":true\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fdf7d51b6b459afd02deacd7b6f196de) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\t\r{ \t\"\"\t:\n\n \"*\\n\"\n\r\n\t,\r \n\r\t\"\\\"8\"\t\t :\n0.01e-0\n\r\r,\"k\":\t\r {\"\\n\\f\":false}\n\t ,\t\"V\"\t:{}\n\r\r ,\r\"&\\rW\" \n\t:\t -'
	const char* json = "\t\r{ \t\"\"\t:\n\n \"*\\n\"\n\r\n\t,\r \n\r\t\"\\\"8\"\t\t :\n0.01e-0\n\r\r,\"k\":\t\r {\"\\n\\f\":false}\n\t ,\t\"V\"\t:{}\n\r\r ,\r\"&\\rW\" \n\t:\t -";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{ \\t\\\"\\\"\\t:\\n\\n \\\"*\\\\n\\\"\\n\\r\\n\\t,\\r \\n\\r\\t\\\"\\\\\\\"8\\\"\\t\\t :\\n0.01e-0\\n\\r\\r,\\\"k\\\":\\t\\r {\\\"\\\\n\\\\f\\\":false}\\n\\t ,\\t\\\"V\\\"\\t:{}\\n\\r\\r ,\\r\\\"&\\\\rW\\\" \\n\\t:\\t -" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8fa1dd03a408ea23380c1b28a8796ea3) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// JSON: '{ \n\r\"\" \n :\"\\r\" \n\r,\n\n\n \"\\\"9\"\n\n:{ \"g\"\n\t\t\r\r:null\t\t,\r\t\n\t \t \"_o\"\n \r:830\r\n\n,\r\t\r\t\n \r\r\"\\t\\\"\"\n:\"?\"\n\n\t} ,\n\"\\t\"'
	const char* json = "{ \n\r\"\" \n :\"\\r\" \n\r,\n\n\n \"\\\"9\"\n\n:{ \"g\"\n\t\t\r\r:null\t\t,\r\t\n\t \t \"_o\"\n \r:830\r\n\n,\r\t\r\t\n \r\r\"\\t\\\"\"\n:\"?\"\n\n\t} ,\n\"\\t\"";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\r\\\"\\\" \\n :\\\"\\\\r\\\" \\n\\r,\\n\\n\\n \\\"\\\\\\\"9\\\"\\n\\n:{ \\\"g\\\"\\n\\t\\t\\r\\r:null\\t\\t,\\r\\t\\n\\t \\t \\\"_o\\\"\\n \\r:830\\r\\n\\n,\\r\\t\\r\\t\\n \\r\\r\\\"\\\\t\\\\\\\"\\\"\\n:\\\"?\\\"\\n\\n\\t} ,\\n\\\"\\\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_09c5d81ecc92134d1e524fb6f113cb89) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: ' \r{\t\t\n \"\"\r\t\n\n:[\r\t\n  { \r\t\"n\\/v\\/^\"\t:\rnull\r \n,\n\"\\t\"\r\r\r\t\n\r:\r255\t\r\n}\n\r]   \t,  \t\"X\" :\"_I\"\n, \r\t \n\t\"$\\/pn\":-'
	const char* json = " \r{\t\t\n \"\"\r\t\n\n:[\r\t\n  { \r\t\"n\\/v\\/^\"\t:\rnull\r \n,\n\"\\t\"\r\r\r\t\n\r:\r255\t\r\n}\n\r]   \t,  \t\"X\" :\"_I\"\n, \r\t \n\t\"$\\/pn\":-";
	std::cerr << "Plain JSON string from model: " << " \\r{\\t\\t\\n \\\"\\\"\\r\\t\\n\\n:[\\r\\t\\n  { \\r\\t\\\"n\\\\/v\\\\/^\\\"\\t:\\rnull\\r \\n,\\n\\\"\\\\t\\\"\\r\\r\\r\\t\\n\\r:\\r255\\t\\r\\n}\\n\\r]   \\t,  \\t\\\"X\\\" :\\\"_I\\\"\\n, \\r\\t \\n\\t\\\"$\\\\/pn\\\":-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e2ac9a641c19144568ccf496de96e761) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// JSON: '{\n\n\r \"\\rl\\b\\f\"\r\r:[]\r\n\r\r,\t \"\"\t \t:false\t   ,\"m\\\"4\\\\\\fq\"\r:true\r  ,\r \"?\\f\\\"\"\r\r\r:null \t, \r\t\n\n\"\\b\\\\\" \r\n\n:\"'
	const char* json = "{\n\n\r \"\\rl\\b\\f\"\r\r:[]\r\n\r\r,\t \"\"\t \t:false\t   ,\"m\\\"4\\\\\\fq\"\r:true\r  ,\r \"?\\f\\\"\"\r\r\r:null \t, \r\t\n\n\"\\b\\\\\" \r\n\n:\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\r \\\"\\\\rl\\\\b\\\\f\\\"\\r\\r:[]\\r\\n\\r\\r,\\t \\\"\\\"\\t \\t:false\\t   ,\\\"m\\\\\\\"4\\\\\\\\\\\\fq\\\"\\r:true\\r  ,\\r \\\"?\\\\f\\\\\\\"\\\"\\r\\r\\r:null \\t, \\r\\t\\n\\n\\\"\\\\b\\\\\\\\\\\" \\r\\n\\n:\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d9ad2c683e8db075059ba806fde1bb39) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '{\n\r\n\"n=\"\n:true\t\r\r\n \r,\t \r \r\n\"\"\r\n\t:null\n\n\n, \"R\\n\":\rtrue\r\r, \n\"-\":\n\n[]\r,\r\n\t \r\"\\\\\\\"\\\"(\\t\\/)\\n]\" :\t\"a\"\t\r\n '
	const char* json = "{\n\r\n\"n=\"\n:true\t\r\r\n \r,\t \r \r\n\"\"\r\n\t:null\n\n\n, \"R\\n\":\rtrue\r\r, \n\"-\":\n\n[]\r,\r\n\t \r\"\\\\\\\"\\\"(\\t\\/)\\n]\" :\t\"a\"\t\r\n ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\n\\\"n=\\\"\\n:true\\t\\r\\r\\n \\r,\\t \\r \\r\\n\\\"\\\"\\r\\n\\t:null\\n\\n\\n, \\\"R\\\\n\\\":\\rtrue\\r\\r, \\n\\\"-\\\":\\n\\n[]\\r,\\r\\n\\t \\r\\\"\\\\\\\\\\\\\\\"\\\\\\\"(\\\\t\\\\/)\\\\n]\\\" :\\t\\\"a\\\"\\t\\r\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e7fac0ea568885f6de2674ef6d05ec5e) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// JSON: '{ \r\t\"\"\r\t:\r\t false\n ,\n\"]\\f\\f[\\fz w\":\r-0e+0,\n\"7Tq\\ne\\r|\"\r\r\r:false \n\t\n,\"\\\"\\t\":\"\\b\\n5\" \n\n\r,\r\r \"s\" \r:true'
	const char* json = "{ \r\t\"\"\r\t:\r\t false\n ,\n\"]\\f\\f[\\fz w\":\r-0e+0,\n\"7Tq\\ne\\r|\"\r\r\r:false \n\t\n,\"\\\"\\t\":\"\\b\\n5\" \n\n\r,\r\r \"s\" \r:true";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\t\\\"\\\"\\r\\t:\\r\\t false\\n ,\\n\\\"]\\\\f\\\\f[\\\\fz w\\\":\\r-0e+0,\\n\\\"7Tq\\\\ne\\\\r|\\\"\\r\\r\\r:false \\n\\t\\n,\\\"\\\\\\\"\\\\t\\\":\\\"\\\\b\\\\n5\\\" \\n\\n\\r,\\r\\r \\\"s\\\" \\r:true" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_99e4b39f2c1c94bf9ea4640e767ced1c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// JSON: '{ \t \"\\\\\\/P\\/hz\"\r :{\r\t\n\"c\":\n[] \t   , \"\"\r: \n\n\"\\\\E\\tkJA\\bA\" \r\n , \n \n \"\\n\\/\"  :{\t } \t}\r,\n\t\"\\b\\n\"\t\n\r:\"r\\t'
	const char* json = "{ \t \"\\\\\\/P\\/hz\"\r :{\r\t\n\"c\":\n[] \t   , \"\"\r: \n\n\"\\\\E\\tkJA\\bA\" \r\n , \n \n \"\\n\\/\"  :{\t } \t}\r,\n\t\"\\b\\n\"\t\n\r:\"r\\t";
	std::cerr << "Plain JSON string from model: " << "{ \\t \\\"\\\\\\\\\\\\/P\\\\/hz\\\"\\r :{\\r\\t\\n\\\"c\\\":\\n[] \\t   , \\\"\\\"\\r: \\n\\n\\\"\\\\\\\\E\\\\tkJA\\\\bA\\\" \\r\\n , \\n \\n \\\"\\\\n\\\\/\\\"  :{\\t } \\t}\\r,\\n\\t\\\"\\\\b\\\\n\\\"\\t\\n\\r:\\\"r\\\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2b59b360d9318f00d0288f30f6804ca7) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{\t\r\"z\"\n\n\n: \"\",\t\n\t\"\\\\\\\\Hlv\"\r\n :\rfalse\t,\"\\\\;\\f\\\"\\\"\\\"\\\"L\"\t:\t\n\r[\tfalse\t\n]\t\n\t, \t\n \"\\/<\\\"\\/\"\t\n :[ false,{\t'
	const char* json = "{\t\r\"z\"\n\n\n: \"\",\t\n\t\"\\\\\\\\Hlv\"\r\n :\rfalse\t,\"\\\\;\\f\\\"\\\"\\\"\\\"L\"\t:\t\n\r[\tfalse\t\n]\t\n\t, \t\n \"\\/<\\\"\\/\"\t\n :[ false,{\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"z\\\"\\n\\n\\n: \\\"\\\",\\t\\n\\t\\\"\\\\\\\\\\\\\\\\Hlv\\\"\\r\\n :\\rfalse\\t,\\\"\\\\\\\\;\\\\f\\\\\\\"\\\\\\\"\\\\\\\"\\\\\\\"L\\\"\\t:\\t\\n\\r[\\tfalse\\t\\n]\\t\\n\\t, \\t\\n \\\"\\\\/<\\\\\\\"\\\\/\\\"\\t\\n :[ false,{\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5cbd6a1900bd4e56c30db4375857c3fa) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// JSON: '{ \n \"\":\r\n\rnull\n\t\t\t,\r\n \t\">\\\"mj\"\n\n:\n\r\r0E0620\t,\n\t\t \"\\f\\b\":-0.0\t\t, \t\t\n\"q\"   :\rnull\t\t \n\t\n\t,\r\r\"\\/n\"\t\n:\t\n\n\n'
	const char* json = "{ \n \"\":\r\n\rnull\n\t\t\t,\r\n \t\">\\\"mj\"\n\n:\n\r\r0E0620\t,\n\t\t \"\\f\\b\":-0.0\t\t, \t\t\n\"q\"   :\rnull\t\t \n\t\n\t,\r\r\"\\/n\"\t\n:\t\n\n\n";
	std::cerr << "Plain JSON string from model: " << "{ \\n \\\"\\\":\\r\\n\\rnull\\n\\t\\t\\t,\\r\\n \\t\\\">\\\\\\\"mj\\\"\\n\\n:\\n\\r\\r0E0620\\t,\\n\\t\\t \\\"\\\\f\\\\b\\\":-0.0\\t\\t, \\t\\t\\n\\\"q\\\"   :\\rnull\\t\\t \\n\\t\\n\\t,\\r\\r\\\"\\\\/n\\\"\\t\\n:\\t\\n\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_656b5248fed6df2e55aae1539ed42be9) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\n\"\":true ,\"o\"\t\r\n:\tnull, \t\r\r\"\\f\":  -0\r\n\r\n, \"5\"\t :{},\r  \n\t\"\\b\\r\":\t\r\"]h^\\r\\r\"\t\n \n ,\r\n\"\\/\\\\ \\f=\\fd3w\":\r'
	const char* json = "{\n\"\":true ,\"o\"\t\r\n:\tnull, \t\r\r\"\\f\":  -0\r\n\r\n, \"5\"\t :{},\r  \n\t\"\\b\\r\":\t\r\"]h^\\r\\r\"\t\n \n ,\r\n\"\\/\\\\ \\f=\\fd3w\":\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\":true ,\\\"o\\\"\\t\\r\\n:\\tnull, \\t\\r\\r\\\"\\\\f\\\":  -0\\r\\n\\r\\n, \\\"5\\\"\\t :{},\\r  \\n\\t\\\"\\\\b\\\\r\\\":\\t\\r\\\"]h^\\\\r\\\\r\\\"\\t\\n \\n ,\\r\\n\\\"\\\\/\\\\\\\\ \\\\f=\\\\fd3w\\\":\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c7fb48e59dc768459baa82d23cca3a98) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// JSON: ' \n\t{\n\t\n\"\\r\\\\2f\\f\"\t\n:true\t \r,\n\t\t\r\"\"\r \r\n :\rtrue,\t\t\"\\n\"\n \t:\n  true\t,\n\t\n\"\\\\R\\r\\\"f\"\n: [ \t-0e0\n,\"#[\"\t,\"-\\\"'
	const char* json = " \n\t{\n\t\n\"\\r\\\\2f\\f\"\t\n:true\t \r,\n\t\t\r\"\"\r \r\n :\rtrue,\t\t\"\\n\"\n \t:\n  true\t,\n\t\n\"\\\\R\\r\\\"f\"\n: [ \t-0e0\n,\"#[\"\t,\"-\\\"";
	std::cerr << "Plain JSON string from model: " << " \\n\\t{\\n\\t\\n\\\"\\\\r\\\\\\\\2f\\\\f\\\"\\t\\n:true\\t \\r,\\n\\t\\t\\r\\\"\\\"\\r \\r\\n :\\rtrue,\\t\\t\\\"\\\\n\\\"\\n \\t:\\n  true\\t,\\n\\t\\n\\\"\\\\\\\\R\\\\r\\\\\\\"f\\\"\\n: [ \\t-0e0\\n,\\\"#[\\\"\\t,\\\"-\\\\\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_857dde70afae79a3bb748b090b0c130f) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\"\\\"R\":\t{\"\":[  -6416E-010\r]\t\t,\"\\r\\r\"\t\t\n:\tfalse\t\r\n\n}\n \r,\n\r\"\\t\"\n\n :false\t\t\r ,\r\"\\b_\\/b\\tM\\fG\": \rnull\n,\n'
	const char* json = "{\"\\\"R\":\t{\"\":[  -6416E-010\r]\t\t,\"\\r\\r\"\t\t\n:\tfalse\t\r\n\n}\n \r,\n\r\"\\t\"\n\n :false\t\t\r ,\r\"\\b_\\/b\\tM\\fG\": \rnull\n,\n";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\\\\"R\\\":\\t{\\\"\\\":[  -6416E-010\\r]\\t\\t,\\\"\\\\r\\\\r\\\"\\t\\t\\n:\\tfalse\\t\\r\\n\\n}\\n \\r,\\n\\r\\\"\\\\t\\\"\\n\\n :false\\t\\t\\r ,\\r\\\"\\\\b_\\\\/b\\\\tM\\\\fG\\\": \\rnull\\n,\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ea76848fc49153351b11874e36a03f06) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// CloseElements
	// JSON: '\r{ \r\r\"\"\t\n\t\r\r:{\t\r\"K~\"\n\n: \ntrue\t ,\t\n\"\\n\\r\": 0.084\n\r\r\r\r}\n\n\t, \n\n\"<C\" \r\r:\r\"3\" \n\t, \n \"p@\" \r:[ \t  \r\r\"%\\/\\n\"'
	const char* json = "\r{ \r\r\"\"\t\n\t\r\r:{\t\r\"K~\"\n\n: \ntrue\t ,\t\n\"\\n\\r\": 0.084\n\r\r\r\r}\n\n\t, \n\n\"<C\" \r\r:\r\"3\" \n\t, \n \"p@\" \r:[ \t  \r\r\"%\\/\\n\"";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\r\\r\\\"\\\"\\t\\n\\t\\r\\r:{\\t\\r\\\"K~\\\"\\n\\n: \\ntrue\\t ,\\t\\n\\\"\\\\n\\\\r\\\": 0.084\\n\\r\\r\\r\\r}\\n\\n\\t, \\n\\n\\\"<C\\\" \\r\\r:\\r\\\"3\\\" \\n\\t, \\n \\\"p@\\\" \\r:[ \\t  \\r\\r\\\"%\\\\/\\\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_eede4c651bb1fa0952bf80c4f708f822) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\r \t{\n\"\\b\\rK\\\\;\\\"^\\f\\f\\b\"\n\r\r:\n\rnull ,\"\\t\" \r:\n\nfalse\r \t,\t\"\\\\d\"\n\r:false\n\r\r\n\t \n,\n\"\"\n\n\n: \ntrue  \r,\t\r\n\"H\"\t'
	const char* json = "\r \t{\n\"\\b\\rK\\\\;\\\"^\\f\\f\\b\"\n\r\r:\n\rnull ,\"\\t\" \r:\n\nfalse\r \t,\t\"\\\\d\"\n\r:false\n\r\r\n\t \n,\n\"\"\n\n\n: \ntrue  \r,\t\r\n\"H\"\t";
	std::cerr << "Plain JSON string from model: " << "\\r \\t{\\n\\\"\\\\b\\\\rK\\\\\\\\;\\\\\\\"^\\\\f\\\\f\\\\b\\\"\\n\\r\\r:\\n\\rnull ,\\\"\\\\t\\\" \\r:\\n\\nfalse\\r \\t,\\t\\\"\\\\\\\\d\\\"\\n\\r:false\\n\\r\\r\\n\\t \\n,\\n\\\"\\\"\\n\\n\\n: \\ntrue  \\r,\\t\\r\\n\\\"H\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8e556c9dcb40db1864f2246bcb152a49) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// JSON: '{\t \"\":  null\r,\t\t\n\n\"\\\\\\b\\n\\n\"\r:\t\" \\n\"  \r\r,\t \"\\n\":\n \t-820\r\r\r,\t\t\n\r\t\r\"\\f\\/f\" :\t\rtrue\t,\n\n\n\t\r\"\\nvL\":-0\t\t,\"'
	const char* json = "{\t \"\":  null\r,\t\t\n\n\"\\\\\\b\\n\\n\"\r:\t\" \\n\"  \r\r,\t \"\\n\":\n \t-820\r\r\r,\t\t\n\r\t\r\"\\f\\/f\" :\t\rtrue\t,\n\n\n\t\r\"\\nvL\":-0\t\t,\"";
	std::cerr << "Plain JSON string from model: " << "{\\t \\\"\\\":  null\\r,\\t\\t\\n\\n\\\"\\\\\\\\\\\\b\\\\n\\\\n\\\"\\r:\\t\\\" \\\\n\\\"  \\r\\r,\\t \\\"\\\\n\\\":\\n \\t-820\\r\\r\\r,\\t\\t\\n\\r\\t\\r\\\"\\\\f\\\\/f\\\" :\\t\\rtrue\\t,\\n\\n\\n\\t\\r\\\"\\\\nvL\\\":-0\\t\\t,\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bcda7443b9c48f93747b09965ab7a03b) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// JSON: '{\"Fe\\t\\n\\\\\"\n\t:{\r\t}\n,\n\r\"\\/#\\r\\b\"  :null\n\t\r\n,\t\t\r\"9JW\" \t\n:-18\t\t, \r\r\"\"\t\t:\rtrue\n\t ,\t\"\\f\":-2e+09060\n\r,\r\r\t\"'
	const char* json = "{\"Fe\\t\\n\\\\\"\n\t:{\r\t}\n,\n\r\"\\/#\\r\\b\"  :null\n\t\r\n,\t\t\r\"9JW\" \t\n:-18\t\t, \r\r\"\"\t\t:\rtrue\n\t ,\t\"\\f\":-2e+09060\n\r,\r\r\t\"";
	std::cerr << "Plain JSON string from model: " << "{\\\"Fe\\\\t\\\\n\\\\\\\\\\\"\\n\\t:{\\r\\t}\\n,\\n\\r\\\"\\\\/#\\\\r\\\\b\\\"  :null\\n\\t\\r\\n,\\t\\t\\r\\\"9JW\\\" \\t\\n:-18\\t\\t, \\r\\r\\\"\\\"\\t\\t:\\rtrue\\n\\t ,\\t\\\"\\\\f\\\":-2e+09060\\n\\r,\\r\\r\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0600f973386d6f8a6563914f2e276eeb) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// JSON: '\t{\t\n\t\"]\"\n:{} \n,\r\r\t  \"\\\"\\rK\":\rfalse\t\r\n\r,\n \t\"\\/\\tx\\fe\\r\" \r: [\t\r\n\n\t-7] ,\n\"8\\n\\fD\"\r:null\n,\n\n\r\t\"`\\\"-W\"\n\n '
	const char* json = "\t{\t\n\t\"]\"\n:{} \n,\r\r\t  \"\\\"\\rK\":\rfalse\t\r\n\r,\n \t\"\\/\\tx\\fe\\r\" \r: [\t\r\n\n\t-7] ,\n\"8\\n\\fD\"\r:null\n,\n\n\r\t\"`\\\"-W\"\n\n ";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\n\\t\\\"]\\\"\\n:{} \\n,\\r\\r\\t  \\\"\\\\\\\"\\\\rK\\\":\\rfalse\\t\\r\\n\\r,\\n \\t\\\"\\\\/\\\\tx\\\\fe\\\\r\\\" \\r: [\\t\\r\\n\\n\\t-7] ,\\n\\\"8\\\\n\\\\fD\\\"\\r:null\\n,\\n\\n\\r\\t\\\"`\\\\\\\"-W\\\"\\n\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9ea4767c53feb5ad3adc35436ba83ccf) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// JSON: '\r\n{\"\\r'\":-0.0106e+0\t,\"|C\\fk\\/\\\"\"\r:true\n,\n\"\\r\\r\":\n \"\"\n, \t\"Yi6C\"\n\n:{\t\r\t\"\\t\\r@\\/\":\n-0.08\t}\t\r,\r\t\t\t\"\\/\\r8'
	const char* json = "\r\n{\"\\r'\":-0.0106e+0\t,\"|C\\fk\\/\\\"\"\r:true\n,\n\"\\r\\r\":\n \"\"\n, \t\"Yi6C\"\n\n:{\t\r\t\"\\t\\r@\\/\":\n-0.08\t}\t\r,\r\t\t\t\"\\/\\r8";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\\"\\\\r'\\\":-0.0106e+0\\t,\\\"|C\\\\fk\\\\/\\\\\\\"\\\"\\r:true\\n,\\n\\\"\\\\r\\\\r\\\":\\n \\\"\\\"\\n, \\t\\\"Yi6C\\\"\\n\\n:{\\t\\r\\t\\\"\\\\t\\\\r@\\\\/\\\":\\n-0.08\\t}\\t\\r,\\r\\t\\t\\t\\\"\\\\/\\\\r8" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1cd059bf1010910979ecdee7a12f469e) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// JSON: '{\n\r\"\"\t: true\t\t\n ,\t\t\n\"\\/\\b(\":\"\\/\"\n\t\t,\"\\bv\"\n\r  :\nnull\r\t,\t\t\t\"wl\"\r:\n {\r\"\\b\"\t \n: \t-60E+07\r\t \t}\r  ,   \"\\n\"'
	const char* json = "{\n\r\"\"\t: true\t\t\n ,\t\t\n\"\\/\\b(\":\"\\/\"\n\t\t,\"\\bv\"\n\r  :\nnull\r\t,\t\t\t\"wl\"\r:\n {\r\"\\b\"\t \n: \t-60E+07\r\t \t}\r  ,   \"\\n\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\\"\\\"\\t: true\\t\\t\\n ,\\t\\t\\n\\\"\\\\/\\\\b(\\\":\\\"\\\\/\\\"\\n\\t\\t,\\\"\\\\bv\\\"\\n\\r  :\\nnull\\r\\t,\\t\\t\\t\\\"wl\\\"\\r:\\n {\\r\\\"\\\\b\\\"\\t \\n: \\t-60E+07\\r\\t \\t}\\r  ,   \\\"\\\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_35228fb9a3419fa77c0cf7dc4b98b23f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// JSON: ' {\n\t\"\\f\\t\" \n:\"\",\"\\\\ \\\\\":\n\rtrue\t\n\n,  \t\"^\":\r\"u\\\\\\b\"\n,\t\t\r \"\\\"\" \n\n:\n \n{\t} \n\n\n\r\r, \"\\/\\r\\/\":[\n],\r\t\"\\/\\b\\/%'
	const char* json = " {\n\t\"\\f\\t\" \n:\"\",\"\\\\ \\\\\":\n\rtrue\t\n\n,  \t\"^\":\r\"u\\\\\\b\"\n,\t\t\r \"\\\"\" \n\n:\n \n{\t} \n\n\n\r\r, \"\\/\\r\\/\":[\n],\r\t\"\\/\\b\\/%";
	std::cerr << "Plain JSON string from model: " << " {\\n\\t\\\"\\\\f\\\\t\\\" \\n:\\\"\\\",\\\"\\\\\\\\ \\\\\\\\\\\":\\n\\rtrue\\t\\n\\n,  \\t\\\"^\\\":\\r\\\"u\\\\\\\\\\\\b\\\"\\n,\\t\\t\\r \\\"\\\\\\\"\\\" \\n\\n:\\n \\n{\\t} \\n\\n\\n\\r\\r, \\\"\\\\/\\\\r\\\\/\\\":[\\n],\\r\\t\\\"\\\\/\\\\b\\\\/%" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_292f6d831a95053cc4af6e196d569223) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '\n\n\n{ \t\n\t\"\\\\O\\n\\t\"\t\n:\"\\\\\"\t\n\t\t ,  \"\" \t:true\t,\t \r\r \"_I,.\"\t\r\r:\rfalse \t\r ,\r\n \t\"y\\t\" \r\n:6E+030\r\r,\r\t\r\"\\b\\\"\"'
	const char* json = "\n\n\n{ \t\n\t\"\\\\O\\n\\t\"\t\n:\"\\\\\"\t\n\t\t ,  \"\" \t:true\t,\t \r\r \"_I,.\"\t\r\r:\rfalse \t\r ,\r\n \t\"y\\t\" \r\n:6E+030\r\r,\r\t\r\"\\b\\\"\"";
	std::cerr << "Plain JSON string from model: " << "\\n\\n\\n{ \\t\\n\\t\\\"\\\\\\\\O\\\\n\\\\t\\\"\\t\\n:\\\"\\\\\\\\\\\"\\t\\n\\t\\t ,  \\\"\\\" \\t:true\\t,\\t \\r\\r \\\"_I,.\\\"\\t\\r\\r:\\rfalse \\t\\r ,\\r\\n \\t\\\"y\\\\t\\\" \\r\\n:6E+030\\r\\r,\\r\\t\\r\\\"\\\\b\\\\\\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_20075e6203251c1823bc9138908626f8) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '  \n{\r\t \t\"\\\"@\\\"(+v\\t\\\\e\\b\\bS\"  \r: \ttrue,\t\"P\"\t :{} \n\t,\t  \t\"\\/s\\\\b\\n\\f\\b\\\\hKu\\r\\n\\\"\\\\\"\t:false,\t\") !N\":\r-'
	const char* json = "  \n{\r\t \t\"\\\"@\\\"(+v\\t\\\\e\\b\\bS\"  \r: \ttrue,\t\"P\"\t :{} \n\t,\t  \t\"\\/s\\\\b\\n\\f\\b\\\\hKu\\r\\n\\\"\\\\\"\t:false,\t\") !N\":\r-";
	std::cerr << "Plain JSON string from model: " << "  \\n{\\r\\t \\t\\\"\\\\\\\"@\\\\\\\"(+v\\\\t\\\\\\\\e\\\\b\\\\bS\\\"  \\r: \\ttrue,\\t\\\"P\\\"\\t :{} \\n\\t,\\t  \\t\\\"\\\\/s\\\\\\\\b\\\\n\\\\f\\\\b\\\\\\\\hKu\\\\r\\\\n\\\\\\\"\\\\\\\\\\\"\\t:false,\\t\\\") !N\\\":\\r-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_32cb2366c8603325fe1d7163e0cb2b88) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '{\n\t\r\"|\"\r\t: \n\ttrue,\"\"\r:\r\t\"\\\"\\f\\\"\"\n\r,\n\t\t\"{}\" \t\n:\r{} \n, \n \"\\t|\\n_i\":\ntrue\n\t   \t, \t \r\"]Z\"\r\r\t: 0  ,\n\t\r\r\t\"'
	const char* json = "{\n\t\r\"|\"\r\t: \n\ttrue,\"\"\r:\r\t\"\\\"\\f\\\"\"\n\r,\n\t\t\"{}\" \t\n:\r{} \n, \n \"\\t|\\n_i\":\ntrue\n\t   \t, \t \r\"]Z\"\r\r\t: 0  ,\n\t\r\r\t\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\r\\\"|\\\"\\r\\t: \\n\\ttrue,\\\"\\\"\\r:\\r\\t\\\"\\\\\\\"\\\\f\\\\\\\"\\\"\\n\\r,\\n\\t\\t\\\"{}\\\" \\t\\n:\\r{} \\n, \\n \\\"\\\\t|\\\\n_i\\\":\\ntrue\\n\\t   \\t, \\t \\r\\\"]Z\\\"\\r\\r\\t: 0  ,\\n\\t\\r\\r\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_47977cca7ba8e3ea10c053b4037ba1c5) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// JSON: '{\r\t\"r\"\r:\"\\b\"\n\r \r\n\n\t,\n\t \"\"\r\t\t:\t\"\\n\"\r\r\n\n,\n \t \"a\\t\"\n\r\r\t: \r[ {\t\r\r\t \n\"4\\r\\nX\\\\\": \n\t\"\\t\\/\\fQ\"  \n,\t\r\"C\"\r\t:{'
	const char* json = "{\r\t\"r\"\r:\"\\b\"\n\r \r\n\n\t,\n\t \"\"\r\t\t:\t\"\\n\"\r\r\n\n,\n \t \"a\\t\"\n\r\r\t: \r[ {\t\r\r\t \n\"4\\r\\nX\\\\\": \n\t\"\\t\\/\\fQ\"  \n,\t\r\"C\"\r\t:{";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"r\\\"\\r:\\\"\\\\b\\\"\\n\\r \\r\\n\\n\\t,\\n\\t \\\"\\\"\\r\\t\\t:\\t\\\"\\\\n\\\"\\r\\r\\n\\n,\\n \\t \\\"a\\\\t\\\"\\n\\r\\r\\t: \\r[ {\\t\\r\\r\\t \\n\\\"4\\\\r\\\\nX\\\\\\\\\\\": \\n\\t\\\"\\\\t\\\\/\\\\fQ\\\"  \\n,\\t\\r\\\"C\\\"\\r\\t:{" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0d37519643a06a47f548059c840b30ff) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// CloseElements
	// JSON: '\r\r{\r\r\n  \"\\t\":\r{\t\t\r\"t\\nq\"\r  :null,\t\r\"\"\n:\r[]\r \t,\r\"\\/\\b\\rN\\/\\f\"\r:\n\r  [ [\t\t\r-7e+0,[ \"l\\t+\"\t\r]  ],-340E+0'
	const char* json = "\r\r{\r\r\n  \"\\t\":\r{\t\t\r\"t\\nq\"\r  :null,\t\r\"\"\n:\r[]\r \t,\r\"\\/\\b\\rN\\/\\f\"\r:\n\r  [ [\t\t\r-7e+0,[ \"l\\t+\"\t\r]  ],-340E+0";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\r\\r\\n  \\\"\\\\t\\\":\\r{\\t\\t\\r\\\"t\\\\nq\\\"\\r  :null,\\t\\r\\\"\\\"\\n:\\r[]\\r \\t,\\r\\\"\\\\/\\\\b\\\\rN\\\\/\\\\f\\\"\\r:\\n\\r  [ [\\t\\t\\r-7e+0,[ \\\"l\\\\t+\\\"\\t\\r]  ],-340E+0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_26d8cb06fa7548598fc0fba1fcaf28ce) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '\n{ \n\"\\b\\t\\r\\\"'\"\r\t\n\r:false\t,\n\t\"\":\t\rtrue\r\r\r\t, \n\n\"\\\\\":\t\n\rfalse \t, \t\r\"rS\\\" \\n\\r\":\r[]\t \n\t\t ,\t\n\n\"\\\\A\\/0\":\n'
	const char* json = "\n{ \n\"\\b\\t\\r\\\"'\"\r\t\n\r:false\t,\n\t\"\":\t\rtrue\r\r\r\t, \n\n\"\\\\\":\t\n\rfalse \t, \t\r\"rS\\\" \\n\\r\":\r[]\t \n\t\t ,\t\n\n\"\\\\A\\/0\":\n";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\n\\\"\\\\b\\\\t\\\\r\\\\\\\"'\\\"\\r\\t\\n\\r:false\\t,\\n\\t\\\"\\\":\\t\\rtrue\\r\\r\\r\\t, \\n\\n\\\"\\\\\\\\\\\":\\t\\n\\rfalse \\t, \\t\\r\\\"rS\\\\\\\" \\\\n\\\\r\\\":\\r[]\\t \\n\\t\\t ,\\t\\n\\n\\\"\\\\\\\\A\\\\/0\\\":\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4b1565febc51d34abda1d4eca61a3e1b) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{ \n \r\"\":true\t\n\r,\"\\/\\b\\f\":true \r\r\n,\r \r\"\\t\" \t \t :[]\n\t\t\n\n,     \n\t\"\\/\\n\"\t\n\r\n : {},\t\n\r\r\r\"\\b\\\\o9\"\r :\n{}\t\n,'
	const char* json = "{ \n \r\"\":true\t\n\r,\"\\/\\b\\f\":true \r\r\n,\r \r\"\\t\" \t \t :[]\n\t\t\n\n,     \n\t\"\\/\\n\"\t\n\r\n : {},\t\n\r\r\r\"\\b\\\\o9\"\r :\n{}\t\n,";
	std::cerr << "Plain JSON string from model: " << "{ \\n \\r\\\"\\\":true\\t\\n\\r,\\\"\\\\/\\\\b\\\\f\\\":true \\r\\r\\n,\\r \\r\\\"\\\\t\\\" \\t \\t :[]\\n\\t\\t\\n\\n,     \\n\\t\\\"\\\\/\\\\n\\\"\\t\\n\\r\\n : {},\\t\\n\\r\\r\\r\\\"\\\\b\\\\\\\\o9\\\"\\r :\\n{}\\t\\n," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_71bae3d0ed52ca915d761d0236ddf6de) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// JSON: '\t\n\r{\r\r\n\"\\rL\\r\\t\\bN\\fh\" \r\n:\t 80.05 \r\r\t,\t\"\\b`0E\\r\":\t0.0\t\n\t,\r\"\"\n\r\n:\r null\n\t\n,\t\n  \"2&*N\":\rfalse\r\n\n\n,\n\"'\"'
	const char* json = "\t\n\r{\r\r\n\"\\rL\\r\\t\\bN\\fh\" \r\n:\t 80.05 \r\r\t,\t\"\\b`0E\\r\":\t0.0\t\n\t,\r\"\"\n\r\n:\r null\n\t\n,\t\n  \"2&*N\":\rfalse\r\n\n\n,\n\"'\"";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\r{\\r\\r\\n\\\"\\\\rL\\\\r\\\\t\\\\bN\\\\fh\\\" \\r\\n:\\t 80.05 \\r\\r\\t,\\t\\\"\\\\b`0E\\\\r\\\":\\t0.0\\t\\n\\t,\\r\\\"\\\"\\n\\r\\n:\\r null\\n\\t\\n,\\t\\n  \\\"2&*N\\\":\\rfalse\\r\\n\\n\\n,\\n\\\"'\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9a3ac061f8c633a1b3045a7dd1054a85) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// JSON: '{ \n\t \"\"\t:[\t -0.041E0\r\n]\n\r\n\t , \"\\r 1\"\t:\ntrue\t,\r \r\"{\":false\n\t\t,\r  \"X\": null\n \n,  \t\"\\\"\\bx#\" \t\r:[]\n,\t\n\"4'
	const char* json = "{ \n\t \"\"\t:[\t -0.041E0\r\n]\n\r\n\t , \"\\r 1\"\t:\ntrue\t,\r \r\"{\":false\n\t\t,\r  \"X\": null\n \n,  \t\"\\\"\\bx#\" \t\r:[]\n,\t\n\"4";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\t \\\"\\\"\\t:[\\t -0.041E0\\r\\n]\\n\\r\\n\\t , \\\"\\\\r 1\\\"\\t:\\ntrue\\t,\\r \\r\\\"{\\\":false\\n\\t\\t,\\r  \\\"X\\\": null\\n \\n,  \\t\\\"\\\\\\\"\\\\bx#\\\" \\t\\r:[]\\n,\\t\\n\\\"4" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_44f11e2a2f67d556e78324a8e3092de5) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '{\t\t\t\n\":\\f&+#N\"\t\t:\r\tfalse\t\r\r\r\n,\r\"\\\"\"\t:\t{ \r\r \"\\n\"\n : \"\"\r\n}\r  ,\n\t\n\r\r\".?\"\n:\"#\\f\\f\\f\\f\"\r\r,\r\"?e:\"\r \r \t :-9'
	const char* json = "{\t\t\t\n\":\\f&+#N\"\t\t:\r\tfalse\t\r\r\r\n,\r\"\\\"\"\t:\t{ \r\r \"\\n\"\n : \"\"\r\n}\r  ,\n\t\n\r\r\".?\"\n:\"#\\f\\f\\f\\f\"\r\r,\r\"?e:\"\r \r \t :-9";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\t\\n\\\":\\\\f&+#N\\\"\\t\\t:\\r\\tfalse\\t\\r\\r\\r\\n,\\r\\\"\\\\\\\"\\\"\\t:\\t{ \\r\\r \\\"\\\\n\\\"\\n : \\\"\\\"\\r\\n}\\r  ,\\n\\t\\n\\r\\r\\\".?\\\"\\n:\\\"#\\\\f\\\\f\\\\f\\\\f\\\"\\r\\r,\\r\\\"?e:\\\"\\r \\r \\t :-9" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3ca627d98d6c7e034eebc5f2dcaa97f4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// JSON: '\t \r{\n\"mz{hP+\"\r:false\t\n\n ,\n\n\"\"\n :\"O^\\/\\b\",\r\t \"\\b\\\"\"\r\r\t:false \t  ,\r\"l\":false   ,\t\n\"\\r\":\r\n\t{\t\r\"\\r\\f\\/\\b'
	const char* json = "\t \r{\n\"mz{hP+\"\r:false\t\n\n ,\n\n\"\"\n :\"O^\\/\\b\",\r\t \"\\b\\\"\"\r\r\t:false \t  ,\r\"l\":false   ,\t\n\"\\r\":\r\n\t{\t\r\"\\r\\f\\/\\b";
	std::cerr << "Plain JSON string from model: " << "\\t \\r{\\n\\\"mz{hP+\\\"\\r:false\\t\\n\\n ,\\n\\n\\\"\\\"\\n :\\\"O^\\\\/\\\\b\\\",\\r\\t \\\"\\\\b\\\\\\\"\\\"\\r\\r\\t:false \\t  ,\\r\\\"l\\\":false   ,\\t\\n\\\"\\\\r\\\":\\r\\n\\t{\\t\\r\\\"\\\\r\\\\f\\\\/\\\\b" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_197d4f03c292f94129de84fd4d747398) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\r \t{\t\t\n\n\r\t\"{\\n\\f\"\t\n:{} \r\r\t,\n \"\\\"\\f\\\\\" \r:\r\n\n[50,\t\"\" \r , \t\n\rfalse\t \r\t ] \n\n\n\r,\r\r \r\"8g\\/!%\"\r\r:true\n\n\n\t ,'
	const char* json = "\r \t{\t\t\n\n\r\t\"{\\n\\f\"\t\n:{} \r\r\t,\n \"\\\"\\f\\\\\" \r:\r\n\n[50,\t\"\" \r , \t\n\rfalse\t \r\t ] \n\n\n\r,\r\r \r\"8g\\/!%\"\r\r:true\n\n\n\t ,";
	std::cerr << "Plain JSON string from model: " << "\\r \\t{\\t\\t\\n\\n\\r\\t\\\"{\\\\n\\\\f\\\"\\t\\n:{} \\r\\r\\t,\\n \\\"\\\\\\\"\\\\f\\\\\\\\\\\" \\r:\\r\\n\\n[50,\\t\\\"\\\" \\r , \\t\\n\\rfalse\\t \\r\\t ] \\n\\n\\n\\r,\\r\\r \\r\\\"8g\\\\/!%\\\"\\r\\r:true\\n\\n\\n\\t ," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3b3edde66582b4527588215d8fbc2c4e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// JSON: '\r\t\r{\t\t\r  \n\"\"\r\r:null,\"#\\b2u\"   : \"<\"  \t\t\t \n\t,\"\\/\\n0i\\t\\\"\"\n :{\r \"\\n\"  :null\t}\n    ,\r\"\\\\\\\\l\":[],\n\t\t\"\\r\"'
	const char* json = "\r\t\r{\t\t\r  \n\"\"\r\r:null,\"#\\b2u\"   : \"<\"  \t\t\t \n\t,\"\\/\\n0i\\t\\\"\"\n :{\r \"\\n\"  :null\t}\n    ,\r\"\\\\\\\\l\":[],\n\t\t\"\\r\"";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\r{\\t\\t\\r  \\n\\\"\\\"\\r\\r:null,\\\"#\\\\b2u\\\"   : \\\"<\\\"  \\t\\t\\t \\n\\t,\\\"\\\\/\\\\n0i\\\\t\\\\\\\"\\\"\\n :{\\r \\\"\\\\n\\\"  :null\\t}\\n    ,\\r\\\"\\\\\\\\\\\\\\\\l\\\":[],\\n\\t\\t\\\"\\\\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_dece66f74d8c806fa5c18b72215a8331) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\r\r\r  \n \n\"\"\t  \n\t:\ntrue ,\r\t\r\"6T\\\\&\"\r\r\t: \rfalse  \n\t, \r\":\\\"$D\\\\e\"\n:false\r \t,\"]\"\r:\nfalse,\r\n \"N:\\/\" \r: \t\n'
	const char* json = "{\r\r\r  \n \n\"\"\t  \n\t:\ntrue ,\r\t\r\"6T\\\\&\"\r\r\t: \rfalse  \n\t, \r\":\\\"$D\\\\e\"\n:false\r \t,\"]\"\r:\nfalse,\r\n \"N:\\/\" \r: \t\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\r  \\n \\n\\\"\\\"\\t  \\n\\t:\\ntrue ,\\r\\t\\r\\\"6T\\\\\\\\&\\\"\\r\\r\\t: \\rfalse  \\n\\t, \\r\\\":\\\\\\\"$D\\\\\\\\e\\\"\\n:false\\r \\t,\\\"]\\\"\\r:\\nfalse,\\r\\n \\\"N:\\\\/\\\" \\r: \\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ec7dabec4373a851b82ccdf31d7dc4e6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '{ \"-]\"\t \r:false ,\r \"_\" \n\r\t:true,\n\n\n\"\\fW\"\n\t\r:\ntrue \t\n,\"\"\t\t\t :\n-310.07E-03 ,  \t\"\\/8\"\t\n:null,\r\r\"\\\"\\bi8\"'
	const char* json = "{ \"-]\"\t \r:false ,\r \"_\" \n\r\t:true,\n\n\n\"\\fW\"\n\t\r:\ntrue \t\n,\"\"\t\t\t :\n-310.07E-03 ,  \t\"\\/8\"\t\n:null,\r\r\"\\\"\\bi8\"";
	std::cerr << "Plain JSON string from model: " << "{ \\\"-]\\\"\\t \\r:false ,\\r \\\"_\\\" \\n\\r\\t:true,\\n\\n\\n\\\"\\\\fW\\\"\\n\\t\\r:\\ntrue \\t\\n,\\\"\\\"\\t\\t\\t :\\n-310.07E-03 ,  \\t\\\"\\\\/8\\\"\\t\\n:null,\\r\\r\\\"\\\\\\\"\\\\bi8\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_af291d72c3961246061b8c8c83978c04) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// JSON: '{ \t\"\" \n: \rnull\t \r,\n\n\t\"2\"\n\r\t :\r\r\rfalse\t\r\r\n\t, \t\n\n\"1\\/\": \n false\t\t\t\t\r\r, \t\r\t\";\\/R?'B\"\t \n:\n \t[\r]\t\t,  \t\r\t\"'
	const char* json = "{ \t\"\" \n: \rnull\t \r,\n\n\t\"2\"\n\r\t :\r\r\rfalse\t\r\r\n\t, \t\n\n\"1\\/\": \n false\t\t\t\t\r\r, \t\r\t\";\\/R?'B\"\t \n:\n \t[\r]\t\t,  \t\r\t\"";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"\\\" \\n: \\rnull\\t \\r,\\n\\n\\t\\\"2\\\"\\n\\r\\t :\\r\\r\\rfalse\\t\\r\\r\\n\\t, \\t\\n\\n\\\"1\\\\/\\\": \\n false\\t\\t\\t\\t\\r\\r, \\t\\r\\t\\\";\\\\/R?'B\\\"\\t \\n:\\n \\t[\\r]\\t\\t,  \\t\\r\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1acee5eff57d78135fc651f674aef871) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// JSON: '{\n\t\"\\r_w\\b\\f\\\"\"\t :\n\t\t{\t}  \t\n  ,\t\t\"\\b\\\"V\":null\r,\r\n\r\"\":true\t\r,\t\r\"\\t\\fB\\nNFl\\/e\\by:\\f\\\\~s\\fF;t\\t\"\n :\t{}'
	const char* json = "{\n\t\"\\r_w\\b\\f\\\"\"\t :\n\t\t{\t}  \t\n  ,\t\t\"\\b\\\"V\":null\r,\r\n\r\"\":true\t\r,\t\r\"\\t\\fB\\nNFl\\/e\\by:\\f\\\\~s\\fF;t\\t\"\n :\t{}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\\"\\\\r_w\\\\b\\\\f\\\\\\\"\\\"\\t :\\n\\t\\t{\\t}  \\t\\n  ,\\t\\t\\\"\\\\b\\\\\\\"V\\\":null\\r,\\r\\n\\r\\\"\\\":true\\t\\r,\\t\\r\\\"\\\\t\\\\fB\\\\nNFl\\\\/e\\\\by:\\\\f\\\\\\\\~s\\\\fF;t\\\\t\\\"\\n :\\t{}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_862d7dcc68d738ae7dfa0fce1d168436) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\t\t \r\n\n\"\":\"Ft<\"\r\n,\"\\nV\\\\\\nH\"\t\n\n:\t0.0E+0\t \n\r, \t\n\"w8\":250e047080 \n,\r\t\"\\\\\\n\\/\\\\~\\t\":\t-2\t\n\r\r, \t \t\"z}<[\"\r'
	const char* json = "{\t\t \r\n\n\"\":\"Ft<\"\r\n,\"\\nV\\\\\\nH\"\t\n\n:\t0.0E+0\t \n\r, \t\n\"w8\":250e047080 \n,\r\t\"\\\\\\n\\/\\\\~\\t\":\t-2\t\n\r\r, \t \t\"z}<[\"\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t \\r\\n\\n\\\"\\\":\\\"Ft<\\\"\\r\\n,\\\"\\\\nV\\\\\\\\\\\\nH\\\"\\t\\n\\n:\\t0.0E+0\\t \\n\\r, \\t\\n\\\"w8\\\":250e047080 \\n,\\r\\t\\\"\\\\\\\\\\\\n\\\\/\\\\\\\\~\\\\t\\\":\\t-2\\t\\n\\r\\r, \\t \\t\\\"z}<[\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_599322ca9b8a4162496f91e280c1ee81) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// CloseElements
	// JSON: '{\"\\tx\\/\" \t\n:false\n,\n\n\"\"\t\r\r:\t\t\r{} \t,\r\" w\":[\r\n\r\"t\" \r\r\r\n] \t ,\t\"\\b\\t(\"\t : \nfalse \n\r,\r\"o|Ik\\\\\"\t\n:\r\r\t[ {}\n'
	const char* json = "{\"\\tx\\/\" \t\n:false\n,\n\n\"\"\t\r\r:\t\t\r{} \t,\r\" w\":[\r\n\r\"t\" \r\r\r\n] \t ,\t\"\\b\\t(\"\t : \nfalse \n\r,\r\"o|Ik\\\\\"\t\n:\r\r\t[ {}\n";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\tx\\\\/\\\" \\t\\n:false\\n,\\n\\n\\\"\\\"\\t\\r\\r:\\t\\t\\r{} \\t,\\r\\\" w\\\":[\\r\\n\\r\\\"t\\\" \\r\\r\\r\\n] \\t ,\\t\\\"\\\\b\\\\t(\\\"\\t : \\nfalse \\n\\r,\\r\\\"o|Ik\\\\\\\\\\\"\\t\\n:\\r\\r\\t[ {}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7308f556efd20615bb3af5abe00aac44) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\n\"\\f\"\r:false \t\n\n \t \r,\r\n\"7%\\b\"\r :{\r\"\\\"\" \t\t: \t\r[] \n\t\r}\t\t,\n\r\";}|\" : \t\rnull\n\n\t\r,\n\r\"\"\r :\r\rnull\n,\"\\n\\b4Z\"'
	const char* json = "{\n\"\\f\"\r:false \t\n\n \t \r,\r\n\"7%\\b\"\r :{\r\"\\\"\" \t\t: \t\r[] \n\t\r}\t\t,\n\r\";}|\" : \t\rnull\n\n\t\r,\n\r\"\"\r :\r\rnull\n,\"\\n\\b4Z\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\\f\\\"\\r:false \\t\\n\\n \\t \\r,\\r\\n\\\"7%\\\\b\\\"\\r :{\\r\\\"\\\\\\\"\\\" \\t\\t: \\t\\r[] \\n\\t\\r}\\t\\t,\\n\\r\\\";}|\\\" : \\t\\rnull\\n\\n\\t\\r,\\n\\r\\\"\\\"\\r :\\r\\rnull\\n,\\\"\\\\n\\\\b4Z\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_952b4b1a8d1045d1fb45dd58aaea78f6) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// JSON: '\n{\t\t\n\n\"X5z\"\n\t:false,\t\"\\f\\b,\" :\t\"\\/\\b\\/b\" \r\r\r,\n\r\"\\/\\nc0$\"\n\n:\n\n[\r]\t\r\r, \n  \t\"\\b\":\n\t\nnull\r  \n,\t \t\n\"\\r\\n|'
	const char* json = "\n{\t\t\n\n\"X5z\"\n\t:false,\t\"\\f\\b,\" :\t\"\\/\\b\\/b\" \r\r\r,\n\r\"\\/\\nc0$\"\n\n:\n\n[\r]\t\r\r, \n  \t\"\\b\":\n\t\nnull\r  \n,\t \t\n\"\\r\\n|";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\t\\n\\n\\\"X5z\\\"\\n\\t:false,\\t\\\"\\\\f\\\\b,\\\" :\\t\\\"\\\\/\\\\b\\\\/b\\\" \\r\\r\\r,\\n\\r\\\"\\\\/\\\\nc0$\\\"\\n\\n:\\n\\n[\\r]\\t\\r\\r, \\n  \\t\\\"\\\\b\\\":\\n\\t\\nnull\\r  \\n,\\t \\t\\n\\\"\\\\r\\\\n|" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cb8bbc19186ef2925d8b01db63cfe6d1) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// JSON: ' {\r\"\\f\\f\"\r\n\r \r\t:false\t\n,\"\\f\" :\r\r\nnull\n ,\"\": \r null\r\n\t\t,\t\"B\\/\" \t:[] \r\r,\r \t\"9p=\\\\\"\r\t\n: {\r\":\\t\"\n\t\n:\"\\\"h'
	const char* json = " {\r\"\\f\\f\"\r\n\r \r\t:false\t\n,\"\\f\" :\r\r\nnull\n ,\"\": \r null\r\n\t\t,\t\"B\\/\" \t:[] \r\r,\r \t\"9p=\\\\\"\r\t\n: {\r\":\\t\"\n\t\n:\"\\\"h";
	std::cerr << "Plain JSON string from model: " << " {\\r\\\"\\\\f\\\\f\\\"\\r\\n\\r \\r\\t:false\\t\\n,\\\"\\\\f\\\" :\\r\\r\\nnull\\n ,\\\"\\\": \\r null\\r\\n\\t\\t,\\t\\\"B\\\\/\\\" \\t:[] \\r\\r,\\r \\t\\\"9p=\\\\\\\\\\\"\\r\\t\\n: {\\r\\\":\\\\t\\\"\\n\\t\\n:\\\"\\\\\\\"h" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0962802fdaed4e1180d2234336f7b284) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '{\r \"E^\\n\"\r :true\t\t\n\n  ,\r\"H\\b9\":[570,\r \nnull\t, \t \"\\rq\"]\r\n ,\n\"\"\t:{},\t \t\r\t\"1\"\t \n:\n{},\r\r\n\n\"W\\t\":false\r\t\n'
	const char* json = "{\r \"E^\\n\"\r :true\t\t\n\n  ,\r\"H\\b9\":[570,\r \nnull\t, \t \"\\rq\"]\r\n ,\n\"\"\t:{},\t \t\r\t\"1\"\t \n:\n{},\r\r\n\n\"W\\t\":false\r\t\n";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"E^\\\\n\\\"\\r :true\\t\\t\\n\\n  ,\\r\\\"H\\\\b9\\\":[570,\\r \\nnull\\t, \\t \\\"\\\\rq\\\"]\\r\\n ,\\n\\\"\\\"\\t:{},\\t \\t\\r\\t\\\"1\\\"\\t \\n:\\n{},\\r\\r\\n\\n\\\"W\\\\t\\\":false\\r\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d2deef0e6938d07fb3032bf700602f6f) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: ' { \n \"\"\n   :false \t \r,\n \n\"\\\"s\\f\"\n:\"\\\"+\\/B\\t$\\t\\/\\t\\t9\\t\"\t,\n \r\n\"Fk\": {\t\t\n \n\"3\\fB*\":\n-40.06e0\r  \n}\r\t\r,'
	const char* json = " { \n \"\"\n   :false \t \r,\n \n\"\\\"s\\f\"\n:\"\\\"+\\/B\\t$\\t\\/\\t\\t9\\t\"\t,\n \r\n\"Fk\": {\t\t\n \n\"3\\fB*\":\n-40.06e0\r  \n}\r\t\r,";
	std::cerr << "Plain JSON string from model: " << " { \\n \\\"\\\"\\n   :false \\t \\r,\\n \\n\\\"\\\\\\\"s\\\\f\\\"\\n:\\\"\\\\\\\"+\\\\/B\\\\t$\\\\t\\\\/\\\\t\\\\t9\\\\t\\\"\\t,\\n \\r\\n\\\"Fk\\\": {\\t\\t\\n \\n\\\"3\\\\fB*\\\":\\n-40.06e0\\r  \\n}\\r\\t\\r," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6f042882342007a710eff66403accf68) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// JSON: '\t\r {\t\r\r\r\n\"\\\"\\\"rT\\/+HR\\\\\":true\t \t\n \n, \r\n\t\"\"\r:{\r\r \t\"\\\\\"\n\n\r:true\t,\r\n \"\\r\\f\"\t\r\n:true ,\"\\b\\/\\f\"\t\t:93.081E'
	const char* json = "\t\r {\t\r\r\r\n\"\\\"\\\"rT\\/+HR\\\\\":true\t \t\n \n, \r\n\t\"\"\r:{\r\r \t\"\\\\\"\n\n\r:true\t,\r\n \"\\r\\f\"\t\r\n:true ,\"\\b\\/\\f\"\t\t:93.081E";
	std::cerr << "Plain JSON string from model: " << "\\t\\r {\\t\\r\\r\\r\\n\\\"\\\\\\\"\\\\\\\"rT\\\\/+HR\\\\\\\\\\\":true\\t \\t\\n \\n, \\r\\n\\t\\\"\\\"\\r:{\\r\\r \\t\\\"\\\\\\\\\\\"\\n\\n\\r:true\\t,\\r\\n \\\"\\\\r\\\\f\\\"\\t\\r\\n:true ,\\\"\\\\b\\\\/\\\\f\\\"\\t\\t:93.081E" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f11ac931c9bee36f45164bd00f8235f1) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{\n\r \r  \"K%{\"\r \t:\r\n\r[\n]\r\r\r, \n \r\"\" :  { \n\t\t\"\\tpx\\tz\":\n\n\r\"L\"\r}\t\r\t \n\n,\t\"%\"\n\r:{} \r , \r\t\n\"\\t\\\\\"\n  :\n [] \r,'
	const char* json = "{\n\r \r  \"K%{\"\r \t:\r\n\r[\n]\r\r\r, \n \r\"\" :  { \n\t\t\"\\tpx\\tz\":\n\n\r\"L\"\r}\t\r\t \n\n,\t\"%\"\n\r:{} \r , \r\t\n\"\\t\\\\\"\n  :\n [] \r,";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r \\r  \\\"K%{\\\"\\r \\t:\\r\\n\\r[\\n]\\r\\r\\r, \\n \\r\\\"\\\" :  { \\n\\t\\t\\\"\\\\tpx\\\\tz\\\":\\n\\n\\r\\\"L\\\"\\r}\\t\\r\\t \\n\\n,\\t\\\"%\\\"\\n\\r:{} \\r , \\r\\t\\n\\\"\\\\t\\\\\\\\\\\"\\n  :\\n [] \\r," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6a7e08f7abe6e9fe604c6a440612344d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\n{\n \n\t\t\r\"=\\t!\\n\\t\"\n\t :null, \n \"\\n\\f\\r\" \n\t\r:\r{\r} ,\t \"\"\r:\ntrue,\r\n\"\\/\"\r:\t170 \t\n\t,\n\t\r\"#\\\\a-\"\n\r:\tnull\t\t\t,'
	const char* json = "\n{\n \n\t\t\r\"=\\t!\\n\\t\"\n\t :null, \n \"\\n\\f\\r\" \n\t\r:\r{\r} ,\t \"\"\r:\ntrue,\r\n\"\\/\"\r:\t170 \t\n\t,\n\t\r\"#\\\\a-\"\n\r:\tnull\t\t\t,";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n \\n\\t\\t\\r\\\"=\\\\t!\\\\n\\\\t\\\"\\n\\t :null, \\n \\\"\\\\n\\\\f\\\\r\\\" \\n\\t\\r:\\r{\\r} ,\\t \\\"\\\"\\r:\\ntrue,\\r\\n\\\"\\\\/\\\"\\r:\\t170 \\t\\n\\t,\\n\\t\\r\\\"#\\\\\\\\a-\\\"\\n\\r:\\tnull\\t\\t\\t," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6c6a4a3fdea87c474a8534d6042e6091) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{ \n\r\"\\/\"\n:\n  {\t\"#%\":\n\r\n[],\r \t\"\\bV$\":\r false } \n\r,  \t\"F\\b\\\"\":\r{},\r\n\t\"\\fq\"\r\t\r:\"\\rV\\b-\\bON\"\r\r\t\n,\t\"\" :\r '
	const char* json = "{ \n\r\"\\/\"\n:\n  {\t\"#%\":\n\r\n[],\r \t\"\\bV$\":\r false } \n\r,  \t\"F\\b\\\"\":\r{},\r\n\t\"\\fq\"\r\t\r:\"\\rV\\b-\\bON\"\r\r\t\n,\t\"\" :\r ";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\r\\\"\\\\/\\\"\\n:\\n  {\\t\\\"#%\\\":\\n\\r\\n[],\\r \\t\\\"\\\\bV$\\\":\\r false } \\n\\r,  \\t\\\"F\\\\b\\\\\\\"\\\":\\r{},\\r\\n\\t\\\"\\\\fq\\\"\\r\\t\\r:\\\"\\\\rV\\\\b-\\\\bON\\\"\\r\\r\\t\\n,\\t\\\"\\\" :\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f8721a5a5855ef624574a30d4ce605c6) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '{\r\n\r \"\":[{\t\n\t  \r\"c\\\\\\b\":\n630.0\t\r}   \n]\r\r\t  ,\n \"`\" :[]\n,\"'\"\r  \r:\r\n0 \t\n\t\r \r,  \n\r\n\n\"\\r\\\"\": { }\r\n \n, \n\n\"'
	const char* json = "{\r\n\r \"\":[{\t\n\t  \r\"c\\\\\\b\":\n630.0\t\r}   \n]\r\r\t  ,\n \"`\" :[]\n,\"'\"\r  \r:\r\n0 \t\n\t\r \r,  \n\r\n\n\"\\r\\\"\": { }\r\n \n, \n\n\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\r \\\"\\\":[{\\t\\n\\t  \\r\\\"c\\\\\\\\\\\\b\\\":\\n630.0\\t\\r}   \\n]\\r\\r\\t  ,\\n \\\"`\\\" :[]\\n,\\\"'\\\"\\r  \\r:\\r\\n0 \\t\\n\\t\\r \\r,  \\n\\r\\n\\n\\\"\\\\r\\\\\\\"\\\": { }\\r\\n \\n, \\n\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a187ee7248574c729b6de6da38233b53) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '{\t  \r\"\\\\-\":0.03\t\r , \"\"\n\n\t\t:{ \t\n},\"\\n\" :\n\nfalse\t\n\n, \t\r\"\\b\":\tnull\r\r  ,\n\r\t\"(\":\t\t [\r\t]\t\n\r,\r\r \"\\n8\"\t:[]\n\t'
	const char* json = "{\t  \r\"\\\\-\":0.03\t\r , \"\"\n\n\t\t:{ \t\n},\"\\n\" :\n\nfalse\t\n\n, \t\r\"\\b\":\tnull\r\r  ,\n\r\t\"(\":\t\t [\r\t]\t\n\r,\r\r \"\\n8\"\t:[]\n\t";
	std::cerr << "Plain JSON string from model: " << "{\\t  \\r\\\"\\\\\\\\-\\\":0.03\\t\\r , \\\"\\\"\\n\\n\\t\\t:{ \\t\\n},\\\"\\\\n\\\" :\\n\\nfalse\\t\\n\\n, \\t\\r\\\"\\\\b\\\":\\tnull\\r\\r  ,\\n\\r\\t\\\"(\\\":\\t\\t [\\r\\t]\\t\\n\\r,\\r\\r \\\"\\\\n8\\\"\\t:[]\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3243a3148c2b1bda1eaaac1a3e68104b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// JSON: ' {  \"{\\/\"\n:\n{\t\t \t\n\"\\fP5\\t\\n\\t\"\t\n\t:  \n9 }\t,\n\n\"\"\r \n\n:\r\t\nnull \t\t,\t\"\\t\\\\\\\"S\\b\\r\" \t\n\t:\t\nfalse , \"\\t\\b\"\t\t\t'
	const char* json = " {  \"{\\/\"\n:\n{\t\t \t\n\"\\fP5\\t\\n\\t\"\t\n\t:  \n9 }\t,\n\n\"\"\r \n\n:\r\t\nnull \t\t,\t\"\\t\\\\\\\"S\\b\\r\" \t\n\t:\t\nfalse , \"\\t\\b\"\t\t\t";
	std::cerr << "Plain JSON string from model: " << " {  \\\"{\\\\/\\\"\\n:\\n{\\t\\t \\t\\n\\\"\\\\fP5\\\\t\\\\n\\\\t\\\"\\t\\n\\t:  \\n9 }\\t,\\n\\n\\\"\\\"\\r \\n\\n:\\r\\t\\nnull \\t\\t,\\t\\\"\\\\t\\\\\\\\\\\\\\\"S\\\\b\\\\r\\\" \\t\\n\\t:\\t\\nfalse , \\\"\\\\t\\\\b\\\"\\t\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_aa6fa43e151cac0c8d1705fcacf151fc) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// JSON: '{\r\t\"\"\r\r: -0e+0,\r\t\t\"\\f\"\n\r\n\n:\r false,\"|\\\"\"\t:\t\t\r[]\n\r \r ,\n \t \"(~\" :\rtrue\t, \r\t\n\"C\\ry\":false\n,\n\n \"\\f\\t\\/s\"'
	const char* json = "{\r\t\"\"\r\r: -0e+0,\r\t\t\"\\f\"\n\r\n\n:\r false,\"|\\\"\"\t:\t\t\r[]\n\r \r ,\n \t \"(~\" :\rtrue\t, \r\t\n\"C\\ry\":false\n,\n\n \"\\f\\t\\/s\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"\\\"\\r\\r: -0e+0,\\r\\t\\t\\\"\\\\f\\\"\\n\\r\\n\\n:\\r false,\\\"|\\\\\\\"\\\"\\t:\\t\\t\\r[]\\n\\r \\r ,\\n \\t \\\"(~\\\" :\\rtrue\\t, \\r\\t\\n\\\"C\\\\ry\\\":false\\n,\\n\\n \\\"\\\\f\\\\t\\\\/s\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_146114f23083d62ebc448b39afdaa611) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '\n\r{ \n\n\n\"q\\\"\\fs\"\r\n:false\r,\n \n\"\"\n\r : \r\t\"\\b\\r\"\n\n\t \n,\"T~'\"\n:\t\t\rfalse\r \n\r,\t\"\\/\"\t :false,\t\t\n\t\n\"\\/S\":\t-0e-0'
	const char* json = "\n\r{ \n\n\n\"q\\\"\\fs\"\r\n:false\r,\n \n\"\"\n\r : \r\t\"\\b\\r\"\n\n\t \n,\"T~'\"\n:\t\t\rfalse\r \n\r,\t\"\\/\"\t :false,\t\t\n\t\n\"\\/S\":\t-0e-0";
	std::cerr << "Plain JSON string from model: " << "\\n\\r{ \\n\\n\\n\\\"q\\\\\\\"\\\\fs\\\"\\r\\n:false\\r,\\n \\n\\\"\\\"\\n\\r : \\r\\t\\\"\\\\b\\\\r\\\"\\n\\n\\t \\n,\\\"T~'\\\"\\n:\\t\\t\\rfalse\\r \\n\\r,\\t\\\"\\\\/\\\"\\t :false,\\t\\t\\n\\t\\n\\\"\\\\/S\\\":\\t-0e-0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6318919e11ac13f22714282e9497904b) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '\t\n{\r\n\"\\r\":[]  , \n\t\"yy.\\r\\\"\"\r :true\n,\r\"\\rN^jw%\":\tfalse\r\n \n,\n\r\r\n \r\"\\\"\\/A@\\f\"\r:\t\nnull,\n\t \"\\\\\"\t\n:\rtrue\n\t'
	const char* json = "\t\n{\r\n\"\\r\":[]  , \n\t\"yy.\\r\\\"\"\r :true\n,\r\"\\rN^jw%\":\tfalse\r\n \n,\n\r\r\n \r\"\\\"\\/A@\\f\"\r:\t\nnull,\n\t \"\\\\\"\t\n:\rtrue\n\t";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{\\r\\n\\\"\\\\r\\\":[]  , \\n\\t\\\"yy.\\\\r\\\\\\\"\\\"\\r :true\\n,\\r\\\"\\\\rN^jw%\\\":\\tfalse\\r\\n \\n,\\n\\r\\r\\n \\r\\\"\\\\\\\"\\\\/A@\\\\f\\\"\\r:\\t\\nnull,\\n\\t \\\"\\\\\\\\\\\"\\t\\n:\\rtrue\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_52131f0f3bfe8af3f1ac0e40dd138f79) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\r \r{\n\r \"g;\\\"\\/\\n\\t\"\r:\r\n\t-30.0e+0909\r\t\r\n\n\n\r\r,\n\"\":\t  true\t \n,\"\\t\\f\\r:\":\r\r\"%\\t\"\r\r\t\t ,\"d\\/\"\n: true\t\t\r,\n\t'
	const char* json = "\r \r{\n\r \"g;\\\"\\/\\n\\t\"\r:\r\n\t-30.0e+0909\r\t\r\n\n\n\r\r,\n\"\":\t  true\t \n,\"\\t\\f\\r:\":\r\r\"%\\t\"\r\r\t\t ,\"d\\/\"\n: true\t\t\r,\n\t";
	std::cerr << "Plain JSON string from model: " << "\\r \\r{\\n\\r \\\"g;\\\\\\\"\\\\/\\\\n\\\\t\\\"\\r:\\r\\n\\t-30.0e+0909\\r\\t\\r\\n\\n\\n\\r\\r,\\n\\\"\\\":\\t  true\\t \\n,\\\"\\\\t\\\\f\\\\r:\\\":\\r\\r\\\"%\\\\t\\\"\\r\\r\\t\\t ,\\\"d\\\\/\\\"\\n: true\\t\\t\\r,\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f3e3109a41dbd0250e5a303beeba1828) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// JSON: '\r{\n\r\n\r\n\"u\"\r:false\r\r \n\n,\t\r \"OS\"\t\r\r\t:\r\tnull ,\n\n\t\r\"n\"\t\r:true\t,\r\t\"\\t\\\"y\\\"\\t%\\t\": \r\"\\\"\"\n,\r\t\r\n\"\"\r\t:\t true '
	const char* json = "\r{\n\r\n\r\n\"u\"\r:false\r\r \n\n,\t\r \"OS\"\t\r\r\t:\r\tnull ,\n\n\t\r\"n\"\t\r:true\t,\r\t\"\\t\\\"y\\\"\\t%\\t\": \r\"\\\"\"\n,\r\t\r\n\"\"\r\t:\t true ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\r\\n\\r\\n\\\"u\\\"\\r:false\\r\\r \\n\\n,\\t\\r \\\"OS\\\"\\t\\r\\r\\t:\\r\\tnull ,\\n\\n\\t\\r\\\"n\\\"\\t\\r:true\\t,\\r\\t\\\"\\\\t\\\\\\\"y\\\\\\\"\\\\t%\\\\t\\\": \\r\\\"\\\\\\\"\\\"\\n,\\r\\t\\r\\n\\\"\\\"\\r\\t:\\t true " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7b2402fff2f0a6aac026ecc7b6eab927) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: ' \t {\n\r\t\n\"\\r\\\\\" \r :\t\"\"\t\t\r,\n\r\r\t\n\"\\b\":\r\n\r[]\t ,\n\t\r \r\r\"\\/\\f\\\\\\b\"\n:true \n\r\t\r\n,  \n\n\"\\\\\":\t\n\t{}\t\n,\n\t\n\r\" r\\\\\"\r'
	const char* json = " \t {\n\r\t\n\"\\r\\\\\" \r :\t\"\"\t\t\r,\n\r\r\t\n\"\\b\":\r\n\r[]\t ,\n\t\r \r\r\"\\/\\f\\\\\\b\"\n:true \n\r\t\r\n,  \n\n\"\\\\\":\t\n\t{}\t\n,\n\t\n\r\" r\\\\\"\r";
	std::cerr << "Plain JSON string from model: " << " \\t {\\n\\r\\t\\n\\\"\\\\r\\\\\\\\\\\" \\r :\\t\\\"\\\"\\t\\t\\r,\\n\\r\\r\\t\\n\\\"\\\\b\\\":\\r\\n\\r[]\\t ,\\n\\t\\r \\r\\r\\\"\\\\/\\\\f\\\\\\\\\\\\b\\\"\\n:true \\n\\r\\t\\r\\n,  \\n\\n\\\"\\\\\\\\\\\":\\t\\n\\t{}\\t\\n,\\n\\t\\n\\r\\\" r\\\\\\\\\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c35227ec21fa7c229b3e5a40240f1cb6) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// JSON: '\n{  \t \n\"\":\rtrue,\t\"\\t#\"\t\r:\"u\",\r\r \r\"}V\"\r :null\t\t\r\t\t,\t\t\"\\r\\\\\\\\\":\"O\\n\" ,\n\n\n\"s\" \r\r: null\t  ,\t \n\n\"\\bA\":0E+'
	const char* json = "\n{  \t \n\"\":\rtrue,\t\"\\t#\"\t\r:\"u\",\r\r \r\"}V\"\r :null\t\t\r\t\t,\t\t\"\\r\\\\\\\\\":\"O\\n\" ,\n\n\n\"s\" \r\r: null\t  ,\t \n\n\"\\bA\":0E+";
	std::cerr << "Plain JSON string from model: " << "\\n{  \\t \\n\\\"\\\":\\rtrue,\\t\\\"\\\\t#\\\"\\t\\r:\\\"u\\\",\\r\\r \\r\\\"}V\\\"\\r :null\\t\\t\\r\\t\\t,\\t\\t\\\"\\\\r\\\\\\\\\\\\\\\\\\\":\\\"O\\\\n\\\" ,\\n\\n\\n\\\"s\\\" \\r\\r: null\\t  ,\\t \\n\\n\\\"\\\\bA\\\":0E+" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9f0764125d5ca998c3d622eb097e63e9) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '{\r\"~\"\t\t\t:\tfalse\t,\n\t\"\"\t:\n\t\rtrue\t\n\t\r \r\t,\r \r\r\t\"WA@\\txux\\n\"\t:\n  null\n\n\n\t,\n\r\"m\\/\\t\"\t\t\t:true\t , \n\"\\ty\\\"\\\"\"'
	const char* json = "{\r\"~\"\t\t\t:\tfalse\t,\n\t\"\"\t:\n\t\rtrue\t\n\t\r \r\t,\r \r\r\t\"WA@\\txux\\n\"\t:\n  null\n\n\n\t,\n\r\"m\\/\\t\"\t\t\t:true\t , \n\"\\ty\\\"\\\"\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"~\\\"\\t\\t\\t:\\tfalse\\t,\\n\\t\\\"\\\"\\t:\\n\\t\\rtrue\\t\\n\\t\\r \\r\\t,\\r \\r\\r\\t\\\"WA@\\\\txux\\\\n\\\"\\t:\\n  null\\n\\n\\n\\t,\\n\\r\\\"m\\\\/\\\\t\\\"\\t\\t\\t:true\\t , \\n\\\"\\\\ty\\\\\\\"\\\\\\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_73cae96c9185399099fbbea01113bfbc) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// JSON: '{\t\t\n\"\" \t\n: \n\r-0E-056\n\n\r,\t\r\n\r\"\\f,\\t\\f\\t.wO\"\r \t:\t\"fS\\n\"\r,\n\r\t\"\\tn\"\n : \r\nnull\n  ,\n\t\r \"\\/%\\f\": \ttrue\n ,\t\"'
	const char* json = "{\t\t\n\"\" \t\n: \n\r-0E-056\n\n\r,\t\r\n\r\"\\f,\\t\\f\\t.wO\"\r \t:\t\"fS\\n\"\r,\n\r\t\"\\tn\"\n : \r\nnull\n  ,\n\t\r \"\\/%\\f\": \ttrue\n ,\t\"";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\n\\\"\\\" \\t\\n: \\n\\r-0E-056\\n\\n\\r,\\t\\r\\n\\r\\\"\\\\f,\\\\t\\\\f\\\\t.wO\\\"\\r \\t:\\t\\\"fS\\\\n\\\"\\r,\\n\\r\\t\\\"\\\\tn\\\"\\n : \\r\\nnull\\n  ,\\n\\t\\r \\\"\\\\/%\\\\f\\\": \\ttrue\\n ,\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_41adbf06a7bae89701315ca1ed4b4984) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '{\t\r\n\r\n\"\\t\"\n\r:8910.0e08\t\t, \n\n\"\\f\\f*\": \r false ,\t\t\"N:11\":{\r\"K\\\"\\\\\\r\"\t : true \n\n}\n \n\t,\n\"\"\n:\r-60.0970E+0'
	const char* json = "{\t\r\n\r\n\"\\t\"\n\r:8910.0e08\t\t, \n\n\"\\f\\f*\": \r false ,\t\t\"N:11\":{\r\"K\\\"\\\\\\r\"\t : true \n\n}\n \n\t,\n\"\"\n:\r-60.0970E+0";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\n\\r\\n\\\"\\\\t\\\"\\n\\r:8910.0e08\\t\\t, \\n\\n\\\"\\\\f\\\\f*\\\": \\r false ,\\t\\t\\\"N:11\\\":{\\r\\\"K\\\\\\\"\\\\\\\\\\\\r\\\"\\t : true \\n\\n}\\n \\n\\t,\\n\\\"\\\"\\n:\\r-60.0970E+0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2795a432029222d639832457eb100dd0) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '\t\t{\n\n \n\"\\\\#\\t3\\bYI\":\t\r\ttrue ,\r\r\r\"Np>\"\n:\ntrue\n\r \t\t,\t\n\t \t \"\"\t\t:[]\t\n\t,\r  \"\\\\\":\n [{}\t\r\r\n,null \n\r \r ] \r\n\t'
	const char* json = "\t\t{\n\n \n\"\\\\#\\t3\\bYI\":\t\r\ttrue ,\r\r\r\"Np>\"\n:\ntrue\n\r \t\t,\t\n\t \t \"\"\t\t:[]\t\n\t,\r  \"\\\\\":\n [{}\t\r\r\n,null \n\r \r ] \r\n\t";
	std::cerr << "Plain JSON string from model: " << "\\t\\t{\\n\\n \\n\\\"\\\\\\\\#\\\\t3\\\\bYI\\\":\\t\\r\\ttrue ,\\r\\r\\r\\\"Np>\\\"\\n:\\ntrue\\n\\r \\t\\t,\\t\\n\\t \\t \\\"\\\"\\t\\t:[]\\t\\n\\t,\\r  \\\"\\\\\\\\\\\":\\n [{}\\t\\r\\r\\n,null \\n\\r \\r ] \\r\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c44e19d7e98cdd208e6146d644d6e2a8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: ' {\n\n\r\r\"y\"\r:false\r\r\n\n\r,\n \"\\\"e8u\"\t:[ ] \n\n ,\r\"\" \n\n\n:\t\n \t{\t\n\"\\nq\\\"h\":false,\t \t\"$\":\r\ttrue\r \n  },\t\r \"G\"\n\r:'
	const char* json = " {\n\n\r\r\"y\"\r:false\r\r\n\n\r,\n \"\\\"e8u\"\t:[ ] \n\n ,\r\"\" \n\n\n:\t\n \t{\t\n\"\\nq\\\"h\":false,\t \t\"$\":\r\ttrue\r \n  },\t\r \"G\"\n\r:";
	std::cerr << "Plain JSON string from model: " << " {\\n\\n\\r\\r\\\"y\\\"\\r:false\\r\\r\\n\\n\\r,\\n \\\"\\\\\\\"e8u\\\"\\t:[ ] \\n\\n ,\\r\\\"\\\" \\n\\n\\n:\\t\\n \\t{\\t\\n\\\"\\\\nq\\\\\\\"h\\\":false,\\t \\t\\\"$\\\":\\r\\ttrue\\r \\n  },\\t\\r \\\"G\\\"\\n\\r:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_23c61b3744dc70b22cb5d59bfcf7e8aa) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// JSON: ' \t{\n\r \t\t \"\" \r\n:\r-0\t, \"Y\"\n:{ }\r  \n ,\t   \"\\\"?\\/\"\r:[\r\r\r\"#\"\n,\t\ntrue,   null]\n\n\n \t,\r\"\\/\" \t:null\n\n\r \t\t\n, \t'
	const char* json = " \t{\n\r \t\t \"\" \r\n:\r-0\t, \"Y\"\n:{ }\r  \n ,\t   \"\\\"?\\/\"\r:[\r\r\r\"#\"\n,\t\ntrue,   null]\n\n\n \t,\r\"\\/\" \t:null\n\n\r \t\t\n, \t";
	std::cerr << "Plain JSON string from model: " << " \\t{\\n\\r \\t\\t \\\"\\\" \\r\\n:\\r-0\\t, \\\"Y\\\"\\n:{ }\\r  \\n ,\\t   \\\"\\\\\\\"?\\\\/\\\"\\r:[\\r\\r\\r\\\"#\\\"\\n,\\t\\ntrue,   null]\\n\\n\\n \\t,\\r\\\"\\\\/\\\" \\t:null\\n\\n\\r \\t\\t\\n, \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ed8445b355c80349ba1076c54ae74ffb) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// JSON: '\r\n\n{ \n\"\\/I\\\\\\n8\\\"\":false,\n\"\\/\\r_\" \t:false\r\r,\r\t\r \t\"\"  \n \r :-0E+0\t,\t\n  \t\r\"\\r\\r\" \t: \r{\n\"\\f\\\"jt+\":  \n\"\\n'
	const char* json = "\r\n\n{ \n\"\\/I\\\\\\n8\\\"\":false,\n\"\\/\\r_\" \t:false\r\r,\r\t\r \t\"\"  \n \r :-0E+0\t,\t\n  \t\r\"\\r\\r\" \t: \r{\n\"\\f\\\"jt+\":  \n\"\\n";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\n{ \\n\\\"\\\\/I\\\\\\\\\\\\n8\\\\\\\"\\\":false,\\n\\\"\\\\/\\\\r_\\\" \\t:false\\r\\r,\\r\\t\\r \\t\\\"\\\"  \\n \\r :-0E+0\\t,\\t\\n  \\t\\r\\\"\\\\r\\\\r\\\" \\t: \\r{\\n\\\"\\\\f\\\\\\\"jt+\\\":  \\n\\\"\\\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d973a5d8dd09e3af7ca129951108af32) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: '\r\r {\"\\\"\\tZ\\n\" \r:true\t\n\n,\t\"\\f\"  :[]  ,\n\"~5\" :\"\\t\"\t \r\n\n,\r\r \"^g<\\bC\":\t[\t\r]\n\r,\r\"\\\\VFL\" \r :\"\" \n,\r\"#\"\r\t\n:['
	const char* json = "\r\r {\"\\\"\\tZ\\n\" \r:true\t\n\n,\t\"\\f\"  :[]  ,\n\"~5\" :\"\\t\"\t \r\n\n,\r\r \"^g<\\bC\":\t[\t\r]\n\r,\r\"\\\\VFL\" \r :\"\" \n,\r\"#\"\r\t\n:[";
	std::cerr << "Plain JSON string from model: " << "\\r\\r {\\\"\\\\\\\"\\\\tZ\\\\n\\\" \\r:true\\t\\n\\n,\\t\\\"\\\\f\\\"  :[]  ,\\n\\\"~5\\\" :\\\"\\\\t\\\"\\t \\r\\n\\n,\\r\\r \\\"^g<\\\\bC\\\":\\t[\\t\\r]\\n\\r,\\r\\\"\\\\\\\\VFL\\\" \\r :\\\"\\\" \\n,\\r\\\"#\\\"\\r\\t\\n:[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8014d5b10975c628f6d80053f4382815) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// JSON: '{ \t\n\t\t\n\"QT\\r\"\t:\"\"\r\r\t,\r\r\t\"\\t\"\n \n\r: \n{ \r\r\t\t\r\"\\\\yS\":\nnull}\t\r\n,  \r\n\t\n\"0P\\r\\r\\/\"  :\n-0.070\r\r\t\t\r , \"-\" \r\r '
	const char* json = "{ \t\n\t\t\n\"QT\\r\"\t:\"\"\r\r\t,\r\r\t\"\\t\"\n \n\r: \n{ \r\r\t\t\r\"\\\\yS\":\nnull}\t\r\n,  \r\n\t\n\"0P\\r\\r\\/\"  :\n-0.070\r\r\t\t\r , \"-\" \r\r ";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\n\\t\\t\\n\\\"QT\\\\r\\\"\\t:\\\"\\\"\\r\\r\\t,\\r\\r\\t\\\"\\\\t\\\"\\n \\n\\r: \\n{ \\r\\r\\t\\t\\r\\\"\\\\\\\\yS\\\":\\nnull}\\t\\r\\n,  \\r\\n\\t\\n\\\"0P\\\\r\\\\r\\\\/\\\"  :\\n-0.070\\r\\r\\t\\t\\r , \\\"-\\\" \\r\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_15ef7e55f67dcc335e5e93ee80612942) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// JSON: '{\t\"\":960E-0 \r,\r\n\n\t\"\\/Ci\\/\\r\\\\b\": \n\"\\\"+U\"\n\n\n\t, \r\t\"r\\r\":\t false\t \r  ,\t\r  \"\\/\":false  \n , \t\n\"\\r\\r\\/g9\\t'
	const char* json = "{\t\"\":960E-0 \r,\r\n\n\t\"\\/Ci\\/\\r\\\\b\": \n\"\\\"+U\"\n\n\n\t, \r\t\"r\\r\":\t false\t \r  ,\t\r  \"\\/\":false  \n , \t\n\"\\r\\r\\/g9\\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\":960E-0 \\r,\\r\\n\\n\\t\\\"\\\\/Ci\\\\/\\\\r\\\\\\\\b\\\": \\n\\\"\\\\\\\"+U\\\"\\n\\n\\n\\t, \\r\\t\\\"r\\\\r\\\":\\t false\\t \\r  ,\\t\\r  \\\"\\\\/\\\":false  \\n , \\t\\n\\\"\\\\r\\\\r\\\\/g9\\\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a4685a16b48b03c7d6ce9332cf98f753) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '\t {\n\r\r\t \"\"\n\t\r\n :\t\r\r{} \r\t\n, \"\\t\":\t\nnull\n ,\"if\"\r\r\r\n:\rfalse\n  \t \t,\t\"}I\\b\\f\"\t  \r:false , \t \"3\\/\\/\\n\\t\\r\"'
	const char* json = "\t {\n\r\r\t \"\"\n\t\r\n :\t\r\r{} \r\t\n, \"\\t\":\t\nnull\n ,\"if\"\r\r\r\n:\rfalse\n  \t \t,\t\"}I\\b\\f\"\t  \r:false , \t \"3\\/\\/\\n\\t\\r\"";
	std::cerr << "Plain JSON string from model: " << "\\t {\\n\\r\\r\\t \\\"\\\"\\n\\t\\r\\n :\\t\\r\\r{} \\r\\t\\n, \\\"\\\\t\\\":\\t\\nnull\\n ,\\\"if\\\"\\r\\r\\r\\n:\\rfalse\\n  \\t \\t,\\t\\\"}I\\\\b\\\\f\\\"\\t  \\r:false , \\t \\\"3\\\\/\\\\/\\\\n\\\\t\\\\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_9032503139f9096b9656d00dbf010c8c) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// JSON: '\r{ \n\t \t\n\"\"\r:576.0 ,\n\"6\"\t:\rtrue\n\n\n,\r\t\"\\b=NT\\\"s\":[  [\t-0E-0\t]\n\n]\t,   \"\\n\\\"\\r\" :{\"\\n0\"\t: \n\nfalse\r\r,\t\"7\"'
	const char* json = "\r{ \n\t \t\n\"\"\r:576.0 ,\n\"6\"\t:\rtrue\n\n\n,\r\t\"\\b=NT\\\"s\":[  [\t-0E-0\t]\n\n]\t,   \"\\n\\\"\\r\" :{\"\\n0\"\t: \n\nfalse\r\r,\t\"7\"";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\n\\t \\t\\n\\\"\\\"\\r:576.0 ,\\n\\\"6\\\"\\t:\\rtrue\\n\\n\\n,\\r\\t\\\"\\\\b=NT\\\\\\\"s\\\":[  [\\t-0E-0\\t]\\n\\n]\\t,   \\\"\\\\n\\\\\\\"\\\\r\\\" :{\\\"\\\\n0\\\"\\t: \\n\\nfalse\\r\\r,\\t\\\"7\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0c54d3fffc9e2016553b1ae448aa3172) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '{\t\n\n\n\"\"\r \t:0\r\n\t\r , \n \n\t\r\"\\nu\"\t\n:\n \r-1e+0\t\n\t\t ,\n\r\t\n\n\n\"\\n\\\\\"\r:\"?\"\r \r\t,\n\n\t\"t\\r\"\t\t: \t \r true\r\t\n,\t\n\n\t\"p\" '
	const char* json = "{\t\n\n\n\"\"\r \t:0\r\n\t\r , \n \n\t\r\"\\nu\"\t\n:\n \r-1e+0\t\n\t\t ,\n\r\t\n\n\n\"\\n\\\\\"\r:\"?\"\r \r\t,\n\n\t\"t\\r\"\t\t: \t \r true\r\t\n,\t\n\n\t\"p\" ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\n\\n\\\"\\\"\\r \\t:0\\r\\n\\t\\r , \\n \\n\\t\\r\\\"\\\\nu\\\"\\t\\n:\\n \\r-1e+0\\t\\n\\t\\t ,\\n\\r\\t\\n\\n\\n\\\"\\\\n\\\\\\\\\\\"\\r:\\\"?\\\"\\r \\r\\t,\\n\\n\\t\\\"t\\\\r\\\"\\t\\t: \\t \\r true\\r\\t\\n,\\t\\n\\n\\t\\\"p\\\" " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_caccb4a6fda1abdf7cc0c48fcb4b7c57) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '\t{ \"Tz\" \t\r\r\n\t:{\r\n\r\"\\fk\\n\" :false\n\n} , \"\\\\}\\b\\\"\"\n:false \r\n ,\r \"\":[\n]\r\r\r,\"\\\"=Si\":\t{}\n\r\r, \r\"i{\" :null,\t'
	const char* json = "\t{ \"Tz\" \t\r\r\n\t:{\r\n\r\"\\fk\\n\" :false\n\n} , \"\\\\}\\b\\\"\"\n:false \r\n ,\r \"\":[\n]\r\r\r,\"\\\"=Si\":\t{}\n\r\r, \r\"i{\" :null,\t";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\\"Tz\\\" \\t\\r\\r\\n\\t:{\\r\\n\\r\\\"\\\\fk\\\\n\\\" :false\\n\\n} , \\\"\\\\\\\\}\\\\b\\\\\\\"\\\"\\n:false \\r\\n ,\\r \\\"\\\":[\\n]\\r\\r\\r,\\\"\\\\\\\"=Si\\\":\\t{}\\n\\r\\r, \\r\\\"i{\\\" :null,\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c056cf0eb7180e937691c5956b353175) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\r\"\"\t:[]\n\n,\t\r\"^\":\t \r\"<H\\/\",  \r\t\t\n\"\\r\"\r\n\r\r:\r\n 6  \r\r,\r\t\t\r\n\r\n\r \"\\r\\/\"\n\r :\ttrue \t\n\t, \r\r\r \"\\n(4\\b\\f\\t]\"\t:'
	const char* json = "{\r\"\"\t:[]\n\n,\t\r\"^\":\t \r\"<H\\/\",  \r\t\t\n\"\\r\"\r\n\r\r:\r\n 6  \r\r,\r\t\t\r\n\r\n\r \"\\r\\/\"\n\r :\ttrue \t\n\t, \r\r\r \"\\n(4\\b\\f\\t]\"\t:";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\t:[]\\n\\n,\\t\\r\\\"^\\\":\\t \\r\\\"<H\\\\/\\\",  \\r\\t\\t\\n\\\"\\\\r\\\"\\r\\n\\r\\r:\\r\\n 6  \\r\\r,\\r\\t\\t\\r\\n\\r\\n\\r \\\"\\\\r\\\\/\\\"\\n\\r :\\ttrue \\t\\n\\t, \\r\\r\\r \\\"\\\\n(4\\\\b\\\\f\\\\t]\\\"\\t:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f7188fa8353e7eeeed178a4e994c9d0a) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// JSON: ' {\t \n\"7\\/u\\r\":\"r_\"\t   , \"\"\r\r\t:\r\t \"Y\"\r , \t \n\"\\r\\n\"\t:\r{ \t \r\"\\b\\t\\t_x\\b]\"\n \r:{\t\t\t\"|\":true  \r \r}\n, \r\"\\\\\"'
	const char* json = " {\t \n\"7\\/u\\r\":\"r_\"\t   , \"\"\r\r\t:\r\t \"Y\"\r , \t \n\"\\r\\n\"\t:\r{ \t \r\"\\b\\t\\t_x\\b]\"\n \r:{\t\t\t\"|\":true  \r \r}\n, \r\"\\\\\"";
	std::cerr << "Plain JSON string from model: " << " {\\t \\n\\\"7\\\\/u\\\\r\\\":\\\"r_\\\"\\t   , \\\"\\\"\\r\\r\\t:\\r\\t \\\"Y\\\"\\r , \\t \\n\\\"\\\\r\\\\n\\\"\\t:\\r{ \\t \\r\\\"\\\\b\\\\t\\\\t_x\\\\b]\\\"\\n \\r:{\\t\\t\\t\\\"|\\\":true  \\r \\r}\\n, \\r\\\"\\\\\\\\\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_197184720377ad7b7ed67d43ea18b95d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// JSON: ' {\t\t\"G\\\\l\\/$\":0  \n ,\r\r\n\r\t  \"!(\\n\\/~\"\t:\r-0\n\t\r,\r\n \n\"\\b\\\"b\"\n\r\r:\r true\n ,\n\",\"\t\r:\n\ttrue\t \r\n\n,\t\t\"L\\bYo2\\/\"'
	const char* json = " {\t\t\"G\\\\l\\/$\":0  \n ,\r\r\n\r\t  \"!(\\n\\/~\"\t:\r-0\n\t\r,\r\n \n\"\\b\\\"b\"\n\r\r:\r true\n ,\n\",\"\t\r:\n\ttrue\t \r\n\n,\t\t\"L\\bYo2\\/\"";
	std::cerr << "Plain JSON string from model: " << " {\\t\\t\\\"G\\\\\\\\l\\\\/$\\\":0  \\n ,\\r\\r\\n\\r\\t  \\\"!(\\\\n\\\\/~\\\"\\t:\\r-0\\n\\t\\r,\\r\\n \\n\\\"\\\\b\\\\\\\"b\\\"\\n\\r\\r:\\r true\\n ,\\n\\\",\\\"\\t\\r:\\n\\ttrue\\t \\r\\n\\n,\\t\\t\\\"L\\\\bYo2\\\\/\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1de12ef0f9886375efe41f10e70b6895) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// JSON: '{\"\"\n:false\t\r, \t \r\"1\":\n\n0.03e-06\t,\"Q\"\n\t\r: \"G\"\r,\"\\\\\\/\\t\\\"\\\"\\\\\\\"\":-0E+0\n\n, \t\t \t\"\\t\": \"\\n\\b\\/\\\\>F\\r?*\\\"9'
	const char* json = "{\"\"\n:false\t\r, \t \r\"1\":\n\n0.03e-06\t,\"Q\"\n\t\r: \"G\"\r,\"\\\\\\/\\t\\\"\\\"\\\\\\\"\":-0E+0\n\n, \t\t \t\"\\t\": \"\\n\\b\\/\\\\>F\\r?*\\\"9";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\n:false\\t\\r, \\t \\r\\\"1\\\":\\n\\n0.03e-06\\t,\\\"Q\\\"\\n\\t\\r: \\\"G\\\"\\r,\\\"\\\\\\\\\\\\/\\\\t\\\\\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\":-0E+0\\n\\n, \\t\\t \\t\\\"\\\\t\\\": \\\"\\\\n\\\\b\\\\/\\\\\\\\>F\\\\r?*\\\\\\\"9" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_52626cf9b6d1497c95c3056db7a8c004) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// JSON: '\r\t {\r\r\n\t\"v\"\n: 60E-039\t\n\r\r , \"\"  : \n\"g\\\\H\" ,\"\\b\":0\n\r, \t\n \"gDP9\\f\\f\\rr\\f\\b\":\tfalse\n,\t \n\"&\"\t:\r {\n}, \r  '
	const char* json = "\r\t {\r\r\n\t\"v\"\n: 60E-039\t\n\r\r , \"\"  : \n\"g\\\\H\" ,\"\\b\":0\n\r, \t\n \"gDP9\\f\\f\\rr\\f\\b\":\tfalse\n,\t \n\"&\"\t:\r {\n}, \r  ";
	std::cerr << "Plain JSON string from model: " << "\\r\\t {\\r\\r\\n\\t\\\"v\\\"\\n: 60E-039\\t\\n\\r\\r , \\\"\\\"  : \\n\\\"g\\\\\\\\H\\\" ,\\\"\\\\b\\\":0\\n\\r, \\t\\n \\\"gDP9\\\\f\\\\f\\\\rr\\\\f\\\\b\\\":\\tfalse\\n,\\t \\n\\\"&\\\"\\t:\\r {\\n}, \\r  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3673375fafb423711c71e217c385fc1a) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// JSON: '\t {\n \t\"\" :null\n\t\n\r ,\r\n\r\t\"H\"\n:\"\\f\" \t,\n \r\"psRP<\"\n:\r[\n\"E\\\\\"\r \n,\r\n[null, true,\r\t[\r],\t[]\r \n\n]]\n,\"\\b{\\/\":{'
	const char* json = "\t {\n \t\"\" :null\n\t\n\r ,\r\n\r\t\"H\"\n:\"\\f\" \t,\n \r\"psRP<\"\n:\r[\n\"E\\\\\"\r \n,\r\n[null, true,\r\t[\r],\t[]\r \n\n]]\n,\"\\b{\\/\":{";
	std::cerr << "Plain JSON string from model: " << "\\t {\\n \\t\\\"\\\" :null\\n\\t\\n\\r ,\\r\\n\\r\\t\\\"H\\\"\\n:\\\"\\\\f\\\" \\t,\\n \\r\\\"psRP<\\\"\\n:\\r[\\n\\\"E\\\\\\\\\\\"\\r \\n,\\r\\n[null, true,\\r\\t[\\r],\\t[]\\r \\n\\n]]\\n,\\\"\\\\b{\\\\/\\\":{" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7e44942d75702791f9e40bf7190040c8) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '\n  {\n\t\t \r\t \"\\n\" \n:{}\n  \r ,\r\t\n\"gx\\b\\b>\"\t:\r\n\r\"zsBG\\f\" \r\r,\n\"\\/\"\n\r\t: false, \t\n \"\\b!\" \t :{} \t\t\t\t,\r\"!\"\n\n\n:'
	const char* json = "\n  {\n\t\t \r\t \"\\n\" \n:{}\n  \r ,\r\t\n\"gx\\b\\b>\"\t:\r\n\r\"zsBG\\f\" \r\r,\n\"\\/\"\n\r\t: false, \t\n \"\\b!\" \t :{} \t\t\t\t,\r\"!\"\n\n\n:";
	std::cerr << "Plain JSON string from model: " << "\\n  {\\n\\t\\t \\r\\t \\\"\\\\n\\\" \\n:{}\\n  \\r ,\\r\\t\\n\\\"gx\\\\b\\\\b>\\\"\\t:\\r\\n\\r\\\"zsBG\\\\f\\\" \\r\\r,\\n\\\"\\\\/\\\"\\n\\r\\t: false, \\t\\n \\\"\\\\b!\\\" \\t :{} \\t\\t\\t\\t,\\r\\\"!\\\"\\n\\n\\n:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d162112120cfc1c5bc4f737bf48db172) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n{\t\t\t\t\"\\t\":41E+073205\r\r \n,\n\"\"\n\n:false, \r \",}\\bu\"\r\t: true\r\t \t\t,\r\r\"h7\" \r \r:true\n\t,\t  \"+\\\\\\n\\/\\rI\"\r:\n\t\n-'
	const char* json = "\n{\t\t\t\t\"\\t\":41E+073205\r\r \n,\n\"\"\n\n:false, \r \",}\\bu\"\r\t: true\r\t \t\t,\r\r\"h7\" \r \r:true\n\t,\t  \"+\\\\\\n\\/\\rI\"\r:\n\t\n-";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\t\\t\\t\\\"\\\\t\\\":41E+073205\\r\\r \\n,\\n\\\"\\\"\\n\\n:false, \\r \\\",}\\\\bu\\\"\\r\\t: true\\r\\t \\t\\t,\\r\\r\\\"h7\\\" \\r \\r:true\\n\\t,\\t  \\\"+\\\\\\\\\\\\n\\\\/\\\\rI\\\"\\r:\\n\\t\\n-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_78cdbe6fef97d47131028d032336da39) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// JSON: '{\r\r\"\\b\"\r:\t{}\t\n,\r  \"\"\t\t\n:{},\"\\\"\"\t\n\n\t\t:null \t\n\r,\"\\fX\\\"\"\t: \t true  , \t\"\\/\":\n\"\\\\\\fDd\"\t, \r\t\"7\"\t\t\r:\"$\\f\\\"\"'
	const char* json = "{\r\r\"\\b\"\r:\t{}\t\n,\r  \"\"\t\t\n:{},\"\\\"\"\t\n\n\t\t:null \t\n\r,\"\\fX\\\"\"\t: \t true  , \t\"\\/\":\n\"\\\\\\fDd\"\t, \r\t\"7\"\t\t\r:\"$\\f\\\"\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\\"\\\\b\\\"\\r:\\t{}\\t\\n,\\r  \\\"\\\"\\t\\t\\n:{},\\\"\\\\\\\"\\\"\\t\\n\\n\\t\\t:null \\t\\n\\r,\\\"\\\\fX\\\\\\\"\\\"\\t: \\t true  , \\t\\\"\\\\/\\\":\\n\\\"\\\\\\\\\\\\fDd\\\"\\t, \\r\\t\\\"7\\\"\\t\\t\\r:\\\"$\\\\f\\\\\\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0fd48f15793ea9899c695d605100fcd9) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\r\"\\r\\\"a\"\t\n :true\n\t ,\r\t\n\"3y\" :{ \t} \n\r,\t\n  \"K\":{\"\"\r:null\n\r ,\"\\\"$\\t\\n\\\"\\b\\r\\t\\t\"\n\r\t\t:\n\rfalse }\r   \n,\t\r'
	const char* json = "{\r\"\\r\\\"a\"\t\n :true\n\t ,\r\t\n\"3y\" :{ \t} \n\r,\t\n  \"K\":{\"\"\r:null\n\r ,\"\\\"$\\t\\n\\\"\\b\\r\\t\\t\"\n\r\t\t:\n\rfalse }\r   \n,\t\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\r\\\\\\\"a\\\"\\t\\n :true\\n\\t ,\\r\\t\\n\\\"3y\\\" :{ \\t} \\n\\r,\\t\\n  \\\"K\\\":{\\\"\\\"\\r:null\\n\\r ,\\\"\\\\\\\"$\\\\t\\\\n\\\\\\\"\\\\b\\\\r\\\\t\\\\t\\\"\\n\\r\\t\\t:\\n\\rfalse }\\r   \\n,\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f47a5303ac0d7144bc49053887fed2a2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\n  {\t\r\n\t\"\":false\r\n \t\t,\r\"'n\\\"\"  : true\n ,\"1\"\r: \t\nnull\n,\t\n\n\t\"\\b\\t\":[\t\r{}]\t\t ,\"\\\\=\\t\" \n \n\r\t:\".\\n\\b\"\r\t\n,'
	const char* json = "\n  {\t\r\n\t\"\":false\r\n \t\t,\r\"'n\\\"\"  : true\n ,\"1\"\r: \t\nnull\n,\t\n\n\t\"\\b\\t\":[\t\r{}]\t\t ,\"\\\\=\\t\" \n \n\r\t:\".\\n\\b\"\r\t\n,";
	std::cerr << "Plain JSON string from model: " << "\\n  {\\t\\r\\n\\t\\\"\\\":false\\r\\n \\t\\t,\\r\\\"'n\\\\\\\"\\\"  : true\\n ,\\\"1\\\"\\r: \\t\\nnull\\n,\\t\\n\\n\\t\\\"\\\\b\\\\t\\\":[\\t\\r{}]\\t\\t ,\\\"\\\\\\\\=\\\\t\\\" \\n \\n\\r\\t:\\\".\\\\n\\\\b\\\"\\r\\t\\n," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_218d052d1fb6d087df879d4a939d4824) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{ \r \r\"\"\r:false\t\t\r,\t\"SH\\\"\"\t\r:\r\n\t-0.0e-0\t,\r\"\\\"x\" :-40e-0\n\r \r,\t\"N\"\r:\n\rnull \n ,\n\"#\\\"\"\r\r\r\t  :\t\r\r\"{2\\f\"\t,\n'
	const char* json = "{ \r \r\"\"\r:false\t\t\r,\t\"SH\\\"\"\t\r:\r\n\t-0.0e-0\t,\r\"\\\"x\" :-40e-0\n\r \r,\t\"N\"\r:\n\rnull \n ,\n\"#\\\"\"\r\r\r\t  :\t\r\r\"{2\\f\"\t,\n";
	std::cerr << "Plain JSON string from model: " << "{ \\r \\r\\\"\\\"\\r:false\\t\\t\\r,\\t\\\"SH\\\\\\\"\\\"\\t\\r:\\r\\n\\t-0.0e-0\\t,\\r\\\"\\\\\\\"x\\\" :-40e-0\\n\\r \\r,\\t\\\"N\\\"\\r:\\n\\rnull \\n ,\\n\\\"#\\\\\\\"\\\"\\r\\r\\r\\t  :\\t\\r\\r\\\"{2\\\\f\\\"\\t,\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_973c74653f57d66e54f552878f6cfc97) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{ \n\t\"\\t\\n\\td\\td\\t\\\\\" \t:\t\r null  \t,\r \"\\\\\"\t\n\t:-80.0410\r\r , \t\"\\f\\r*\":  \t0e+03\n, \r\n \t\n \n\"D\" \t:\"\\r8\" \r \n,'
	const char* json = "{ \n\t\"\\t\\n\\td\\td\\t\\\\\" \t:\t\r null  \t,\r \"\\\\\"\t\n\t:-80.0410\r\r , \t\"\\f\\r*\":  \t0e+03\n, \r\n \t\n \n\"D\" \t:\"\\r8\" \r \n,";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\t\\\"\\\\t\\\\n\\\\td\\\\td\\\\t\\\\\\\\\\\" \\t:\\t\\r null  \\t,\\r \\\"\\\\\\\\\\\"\\t\\n\\t:-80.0410\\r\\r , \\t\\\"\\\\f\\\\r*\\\":  \\t0e+03\\n, \\r\\n \\t\\n \\n\\\"D\\\" \\t:\\\"\\\\r8\\\" \\r \\n," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c8e1702c96a8c4ebd1dd00c7c5eabdfe) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// JSON: '{  \n\"u\\b\\r\\\\\"\r\t\r :false\n\r \n\r,\r\n\"@\"\r\r:\n\"\"\t\n\n ,\t\r\"6y\" : \t\rnull\t\t \t,\t\t\"I\" :\"M\"\t\n \n \t,\"\\n@\\\"\"\r:{\n\r \r\"\\b\"'
	const char* json = "{  \n\"u\\b\\r\\\\\"\r\t\r :false\n\r \n\r,\r\n\"@\"\r\r:\n\"\"\t\n\n ,\t\r\"6y\" : \t\rnull\t\t \t,\t\t\"I\" :\"M\"\t\n \n \t,\"\\n@\\\"\"\r:{\n\r \r\"\\b\"";
	std::cerr << "Plain JSON string from model: " << "{  \\n\\\"u\\\\b\\\\r\\\\\\\\\\\"\\r\\t\\r :false\\n\\r \\n\\r,\\r\\n\\\"@\\\"\\r\\r:\\n\\\"\\\"\\t\\n\\n ,\\t\\r\\\"6y\\\" : \\t\\rnull\\t\\t \\t,\\t\\t\\\"I\\\" :\\\"M\\\"\\t\\n \\n \\t,\\\"\\\\n@\\\\\\\"\\\"\\r:{\\n\\r \\r\\\"\\\\b\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0eeb3a69e8fd1b181c861a63fcb1788c) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// JSON: '{\r\r\t\"ow[\"\r:[\r]\n\n \r\t,\t\t\t\"2\"\n :\n\t\ttrue \r\t\t\n\r,\t \n\r\"\"  :\r false\t\r\n\r,\"o\\\\h\\\"\\\"0\\/\":false\r\t\n \n,\t\t\r\r \"b\"\t\r\t'
	const char* json = "{\r\r\t\"ow[\"\r:[\r]\n\n \r\t,\t\t\t\"2\"\n :\n\t\ttrue \r\t\t\n\r,\t \n\r\"\"  :\r false\t\r\n\r,\"o\\\\h\\\"\\\"0\\/\":false\r\t\n \n,\t\t\r\r \"b\"\t\r\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\\"ow[\\\"\\r:[\\r]\\n\\n \\r\\t,\\t\\t\\t\\\"2\\\"\\n :\\n\\t\\ttrue \\r\\t\\t\\n\\r,\\t \\n\\r\\\"\\\"  :\\r false\\t\\r\\n\\r,\\\"o\\\\\\\\h\\\\\\\"\\\\\\\"0\\\\/\\\":false\\r\\t\\n \\n,\\t\\t\\r\\r \\\"b\\\"\\t\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cf82cbbeab53c0cf2fe7b89e77ecf607) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// JSON: '\n{ \r\t \"\":false ,\t\t\t\"\\\":\\b\" :\r \r \"\\\"\"\r,  \t\t\"\\r\":\"\\rvV\\r\"\n \r\t,\t\"\\/\\ng\"\n:\r null ,  \"\\r\\t\\r\\n\\ba\\tZ\\r\\\\>'
	const char* json = "\n{ \r\t \"\":false ,\t\t\t\"\\\":\\b\" :\r \r \"\\\"\"\r,  \t\t\"\\r\":\"\\rvV\\r\"\n \r\t,\t\"\\/\\ng\"\n:\r null ,  \"\\r\\t\\r\\n\\ba\\tZ\\r\\\\>";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\r\\t \\\"\\\":false ,\\t\\t\\t\\\"\\\\\\\":\\\\b\\\" :\\r \\r \\\"\\\\\\\"\\\"\\r,  \\t\\t\\\"\\\\r\\\":\\\"\\\\rvV\\\\r\\\"\\n \\r\\t,\\t\\\"\\\\/\\\\ng\\\"\\n:\\r null ,  \\\"\\\\r\\\\t\\\\r\\\\n\\\\ba\\\\tZ\\\\r\\\\\\\\>" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6f7e0c9ef9f73997c6f6c668e7563145) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '\t{\r\n\"\"\r:\r[\t\"\\n\\\\p\"   \r]  \t, \n \n\"9H\\r\":[false\t,\t\"H\\n\\rl\"\t,null]\n,\n\r\"!\"\r :\"\\n\"\r\n ,\t\t\r\"Ym`\\r\"\n\r\r:[ \r {\t'
	const char* json = "\t{\r\n\"\"\r:\r[\t\"\\n\\\\p\"   \r]  \t, \n \n\"9H\\r\":[false\t,\t\"H\\n\\rl\"\t,null]\n,\n\r\"!\"\r :\"\\n\"\r\n ,\t\t\r\"Ym`\\r\"\n\r\r:[ \r {\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\n\\\"\\\"\\r:\\r[\\t\\\"\\\\n\\\\\\\\p\\\"   \\r]  \\t, \\n \\n\\\"9H\\\\r\\\":[false\\t,\\t\\\"H\\\\n\\\\rl\\\"\\t,null]\\n,\\n\\r\\\"!\\\"\\r :\\\"\\\\n\\\"\\r\\n ,\\t\\t\\r\\\"Ym`\\\\r\\\"\\n\\r\\r:[ \\r {\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_624011de435eb828675838ce46459292) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '{\t\n\n\"$\"\r\t  \r:null \r,\t\t \"\" \r\t\n:\n\r {}\n \t,\n\t\"5\"\t\t:\n{\n\n\"B|J2|\" :\r\tnull \n\r}\n\t\n\r,\r\r\n\n\"Ha#\"\n\t \r:\r{\r}\n\r,\r\n\t\"'
	const char* json = "{\t\n\n\"$\"\r\t  \r:null \r,\t\t \"\" \r\t\n:\n\r {}\n \t,\n\t\"5\"\t\t:\n{\n\n\"B|J2|\" :\r\tnull \n\r}\n\t\n\r,\r\r\n\n\"Ha#\"\n\t \r:\r{\r}\n\r,\r\n\t\"";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\n\\\"$\\\"\\r\\t  \\r:null \\r,\\t\\t \\\"\\\" \\r\\t\\n:\\n\\r {}\\n \\t,\\n\\t\\\"5\\\"\\t\\t:\\n{\\n\\n\\\"B|J2|\\\" :\\r\\tnull \\n\\r}\\n\\t\\n\\r,\\r\\r\\n\\n\\\"Ha#\\\"\\n\\t \\r:\\r{\\r}\\n\\r,\\r\\n\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bed2d5bfbe79cc58ab07d8569a43d311) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// JSON: '\n{\r \n\t\"E\\/\":false,\t \"4P\"\n: \n \n[], \"qT\"\n:false\t  ,\t \t\n\"\\n\"\r:\n{}\t\n\r\r\t,\n\r\n\r\r\"\\tn\"\r\r\t:null, \t\r \"\\t+`\\b@\"'
	const char* json = "\n{\r \n\t\"E\\/\":false,\t \"4P\"\n: \n \n[], \"qT\"\n:false\t  ,\t \t\n\"\\n\"\r:\n{}\t\n\r\r\t,\n\r\n\r\r\"\\tn\"\r\r\t:null, \t\r \"\\t+`\\b@\"";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r \\n\\t\\\"E\\\\/\\\":false,\\t \\\"4P\\\"\\n: \\n \\n[], \\\"qT\\\"\\n:false\\t  ,\\t \\t\\n\\\"\\\\n\\\"\\r:\\n{}\\t\\n\\r\\r\\t,\\n\\r\\n\\r\\r\\\"\\\\tn\\\"\\r\\r\\t:null, \\t\\r \\\"\\\\t+`\\\\b@\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_94ef01f730d205f598bcbcbccf10cae3) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\r\n\t{\r \"\\fw\\/\":false\r,\n\n\r \"\\/\"\t :true  ,\r\t\t\"\"\n\t:\"'[y\" ,\"c9\\r\" \t: \"\\\\\",\n  \"\\b\\rh\"\n\n :\nnull\n,\r\"\\\\e\"\r\r\n:'
	const char* json = "\r\n\t{\r \"\\fw\\/\":false\r,\n\n\r \"\\/\"\t :true  ,\r\t\t\"\"\n\t:\"'[y\" ,\"c9\\r\" \t: \"\\\\\",\n  \"\\b\\rh\"\n\n :\nnull\n,\r\"\\\\e\"\r\r\n:";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\t{\\r \\\"\\\\fw\\\\/\\\":false\\r,\\n\\n\\r \\\"\\\\/\\\"\\t :true  ,\\r\\t\\t\\\"\\\"\\n\\t:\\\"'[y\\\" ,\\\"c9\\\\r\\\" \\t: \\\"\\\\\\\\\\\",\\n  \\\"\\\\b\\\\rh\\\"\\n\\n :\\nnull\\n,\\r\\\"\\\\\\\\e\\\"\\r\\r\\n:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7cc05524426a315465b7f12cd84138d7) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// JSON: '{\r\"\"  \n\t:\r null ,\r \"b%p0\"\n \n:\tfalse \t,\r \"&B)\" \t\n\r:\n\"'\\/\\\\C\" \r,  \n\"\\b\" \t\r\r:null\r\n\r,\t\n\t\"Xl\" :\r\n 0\t,  \"'
	const char* json = "{\r\"\"  \n\t:\r null ,\r \"b%p0\"\n \n:\tfalse \t,\r \"&B)\" \t\n\r:\n\"'\\/\\\\C\" \r,  \n\"\\b\" \t\r\r:null\r\n\r,\t\n\t\"Xl\" :\r\n 0\t,  \"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"  \\n\\t:\\r null ,\\r \\\"b%p0\\\"\\n \\n:\\tfalse \\t,\\r \\\"&B)\\\" \\t\\n\\r:\\n\\\"'\\\\/\\\\\\\\C\\\" \\r,  \\n\\\"\\\\b\\\" \\t\\r\\r:null\\r\\n\\r,\\t\\n\\t\\\"Xl\\\" :\\r\\n 0\\t,  \\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3620fa6ca3223d5a78a091d70d585f6e) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// JSON: '{ \"9\\\\|\\r:\"\r\n:\n \t[]\n \t,\t\n \"\" \t\t:\"\\f>\"\n,\"\\/\\ny\\b\"\n\t\t: 0.0\n\t\t \n,\r\"\\f\"\n\t\r: null\t\t\n\t ,\r\n\"q&\"\t \t\t  :\t\r\r\"H'
	const char* json = "{ \"9\\\\|\\r:\"\r\n:\n \t[]\n \t,\t\n \"\" \t\t:\"\\f>\"\n,\"\\/\\ny\\b\"\n\t\t: 0.0\n\t\t \n,\r\"\\f\"\n\t\r: null\t\t\n\t ,\r\n\"q&\"\t \t\t  :\t\r\r\"H";
	std::cerr << "Plain JSON string from model: " << "{ \\\"9\\\\\\\\|\\\\r:\\\"\\r\\n:\\n \\t[]\\n \\t,\\t\\n \\\"\\\" \\t\\t:\\\"\\\\f>\\\"\\n,\\\"\\\\/\\\\ny\\\\b\\\"\\n\\t\\t: 0.0\\n\\t\\t \\n,\\r\\\"\\\\f\\\"\\n\\t\\r: null\\t\\t\\n\\t ,\\r\\n\\\"q&\\\"\\t \\t\\t  :\\t\\r\\r\\\"H" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1a8b350679f7ff7f6bf56b981d3ff148) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{ \"\\/\\f\\n\"  \r\t: \rnull\r, \n\r\r\r\r\n\"+\\fg\":true\n\t\r\n,\r\"\\t\": -0E+0\t,\n\t\"-\"\t\r\r: true\t \r,   \"\":[\t]\n\n,\r \n\r\"\\\"\":[-'
	const char* json = "{ \"\\/\\f\\n\"  \r\t: \rnull\r, \n\r\r\r\r\n\"+\\fg\":true\n\t\r\n,\r\"\\t\": -0E+0\t,\n\t\"-\"\t\r\r: true\t \r,   \"\":[\t]\n\n,\r \n\r\"\\\"\":[-";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\/\\\\f\\\\n\\\"  \\r\\t: \\rnull\\r, \\n\\r\\r\\r\\r\\n\\\"+\\\\fg\\\":true\\n\\t\\r\\n,\\r\\\"\\\\t\\\": -0E+0\\t,\\n\\t\\\"-\\\"\\t\\r\\r: true\\t \\r,   \\\"\\\":[\\t]\\n\\n,\\r \\n\\r\\\"\\\\\\\"\\\":[-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c2cbc62034baa770df74955533ac048a) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// JSON: '\n\n {\t\t\t\"G\\\\`\\\"H%l\"\n:true\n\t,\r\"\"\n:null ,\"\\b\\/}:\"\t:\ttrue,\t\t\n\n\"N\\f\":true\r,\n \r\"N\" \t \r:\r\t\"\\r\\\\y)\"\t, \r\"\\\"@E'
	const char* json = "\n\n {\t\t\t\"G\\\\`\\\"H%l\"\n:true\n\t,\r\"\"\n:null ,\"\\b\\/}:\"\t:\ttrue,\t\t\n\n\"N\\f\":true\r,\n \r\"N\" \t \r:\r\t\"\\r\\\\y)\"\t, \r\"\\\"@E";
	std::cerr << "Plain JSON string from model: " << "\\n\\n {\\t\\t\\t\\\"G\\\\\\\\`\\\\\\\"H%l\\\"\\n:true\\n\\t,\\r\\\"\\\"\\n:null ,\\\"\\\\b\\\\/}:\\\"\\t:\\ttrue,\\t\\t\\n\\n\\\"N\\\\f\\\":true\\r,\\n \\r\\\"N\\\" \\t \\r:\\r\\t\\\"\\\\r\\\\\\\\y)\\\"\\t, \\r\\\"\\\\\\\"@E" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a1d31baa8817bf274094741f1794dce2) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '{\r\n\t\n \"\"\t\n:\r\"\\\\\"  \n\n\t\r\t,\r\"\\tnZI\\t\\t\" \t\r:[]\t  , \r\t\r\"\\n\":0.0790\r\t\r,\r\r \"\\/\": null\r\t\n\t\r\t\t, \n \t\r\t\"\\\\\\f\\r\"'
	const char* json = "{\r\n\t\n \"\"\t\n:\r\"\\\\\"  \n\n\t\r\t,\r\"\\tnZI\\t\\t\" \t\r:[]\t  , \r\t\r\"\\n\":0.0790\r\t\r,\r\r \"\\/\": null\r\t\n\t\r\t\t, \n \t\r\t\"\\\\\\f\\r\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\t\\n \\\"\\\"\\t\\n:\\r\\\"\\\\\\\\\\\"  \\n\\n\\t\\r\\t,\\r\\\"\\\\tnZI\\\\t\\\\t\\\" \\t\\r:[]\\t  , \\r\\t\\r\\\"\\\\n\\\":0.0790\\r\\t\\r,\\r\\r \\\"\\\\/\\\": null\\r\\t\\n\\t\\r\\t\\t, \\n \\t\\r\\t\\\"\\\\\\\\\\\\f\\\\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a8de03f844e6fcfee440c3f92158e0bb) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: ' \t\t{\n\r\r\r\"\"\t\n\t:\r-0E0 \r ,\n\n \"O\\b?kA\"\n\n:\n\t true\r\r\n,\t \"\\\"\"\r:\r\r\r\"<Z\"\n\t,\r\t\n\"l\\/\"\n\t\n\r :\r\n 0.060\n\n\r \t,\"8%\":\t'
	const char* json = " \t\t{\n\r\r\r\"\"\t\n\t:\r-0E0 \r ,\n\n \"O\\b?kA\"\n\n:\n\t true\r\r\n,\t \"\\\"\"\r:\r\r\r\"<Z\"\n\t,\r\t\n\"l\\/\"\n\t\n\r :\r\n 0.060\n\n\r \t,\"8%\":\t";
	std::cerr << "Plain JSON string from model: " << " \\t\\t{\\n\\r\\r\\r\\\"\\\"\\t\\n\\t:\\r-0E0 \\r ,\\n\\n \\\"O\\\\b?kA\\\"\\n\\n:\\n\\t true\\r\\r\\n,\\t \\\"\\\\\\\"\\\"\\r:\\r\\r\\r\\\"<Z\\\"\\n\\t,\\r\\t\\n\\\"l\\\\/\\\"\\n\\t\\n\\r :\\r\\n 0.060\\n\\n\\r \\t,\\\"8%\\\":\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_657a5a7f648d121fb20a3e2b6874bf36) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// JSON: '{\n\t\"i*a9\\n\":[]\t,\r\r\t\r\"\"\n:-1 ,\t\n\r\"p\"\r\r:true \n, \t\n\n\t\t\"`O\"\r\r:{}\r, \t\r\"\\t.U@<\\\\\\r\"\r\r\r:\"Js\\n&}r\" \r\n, \n\n\t\"\\r'
	const char* json = "{\n\t\"i*a9\\n\":[]\t,\r\r\t\r\"\"\n:-1 ,\t\n\r\"p\"\r\r:true \n, \t\n\n\t\t\"`O\"\r\r:{}\r, \t\r\"\\t.U@<\\\\\\r\"\r\r\r:\"Js\\n&}r\" \r\n, \n\n\t\"\\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\\"i*a9\\\\n\\\":[]\\t,\\r\\r\\t\\r\\\"\\\"\\n:-1 ,\\t\\n\\r\\\"p\\\"\\r\\r:true \\n, \\t\\n\\n\\t\\t\\\"`O\\\"\\r\\r:{}\\r, \\t\\r\\\"\\\\t.U@<\\\\\\\\\\\\r\\\"\\r\\r\\r:\\\"Js\\\\n&}r\\\" \\r\\n, \\n\\n\\t\\\"\\\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_775ea0e649810f77c993cd45c71da91c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// JSON: '\r\t {\n\n\t\"\\r\\n\\n\" \n\r:-0E-0\t\n ,\n\"c\\t\\f\\bgF#\"\t:true\t,\"\"\t:\t[\t]\n\r\t\r,\r  \n\"u\"\n :true\r\r\r\r,\n \n\r\"!\\r\\f\\/\\\\%\\bX*'
	const char* json = "\r\t {\n\n\t\"\\r\\n\\n\" \n\r:-0E-0\t\n ,\n\"c\\t\\f\\bgF#\"\t:true\t,\"\"\t:\t[\t]\n\r\t\r,\r  \n\"u\"\n :true\r\r\r\r,\n \n\r\"!\\r\\f\\/\\\\%\\bX*";
	std::cerr << "Plain JSON string from model: " << "\\r\\t {\\n\\n\\t\\\"\\\\r\\\\n\\\\n\\\" \\n\\r:-0E-0\\t\\n ,\\n\\\"c\\\\t\\\\f\\\\bgF#\\\"\\t:true\\t,\\\"\\\"\\t:\\t[\\t]\\n\\r\\t\\r,\\r  \\n\\\"u\\\"\\n :true\\r\\r\\r\\r,\\n \\n\\r\\\"!\\\\r\\\\f\\\\/\\\\\\\\%\\\\bX*" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7741d1c08e48b05240192f4f63fabefe) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '{\n\"\\\"\":\tfalse,\r\"\\\"w\"\n:0\n\n\t\n\t,\n\t\"\\b\"\n\n\r:\"\"\t\n\r,\t\r\t\r\t\t\"4\\n]Z\\\"\" \r\r:-0\t ,\"1\\n\":[] ,\r \t\"`#\"\t\n:\t[\n null\r] '
	const char* json = "{\n\"\\\"\":\tfalse,\r\"\\\"w\"\n:0\n\n\t\n\t,\n\t\"\\b\"\n\n\r:\"\"\t\n\r,\t\r\t\r\t\t\"4\\n]Z\\\"\" \r\r:-0\t ,\"1\\n\":[] ,\r \t\"`#\"\t\n:\t[\n null\r] ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\\\\\"\\\":\\tfalse,\\r\\\"\\\\\\\"w\\\"\\n:0\\n\\n\\t\\n\\t,\\n\\t\\\"\\\\b\\\"\\n\\n\\r:\\\"\\\"\\t\\n\\r,\\t\\r\\t\\r\\t\\t\\\"4\\\\n]Z\\\\\\\"\\\" \\r\\r:-0\\t ,\\\"1\\\\n\\\":[] ,\\r \\t\\\"`#\\\"\\t\\n:\\t[\\n null\\r] " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3a119c8bf58d6d8fe9c46b2627de48d2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// JSON: '\r \n{\"\"\t: false ,\r \"\\/\"\r \r :false,\n \"U*n\\n\"\r : \t\rnull\r \t,\r\n\n\t\n\"\\n,j\\t\\tO\\\\o\\r\\/\" \t\t:\tfalse \t, \r\r\"\\b\\n'
	const char* json = "\r \n{\"\"\t: false ,\r \"\\/\"\r \r :false,\n \"U*n\\n\"\r : \t\rnull\r \t,\r\n\n\t\n\"\\n,j\\t\\tO\\\\o\\r\\/\" \t\t:\tfalse \t, \r\r\"\\b\\n";
	std::cerr << "Plain JSON string from model: " << "\\r \\n{\\\"\\\"\\t: false ,\\r \\\"\\\\/\\\"\\r \\r :false,\\n \\\"U*n\\\\n\\\"\\r : \\t\\rnull\\r \\t,\\r\\n\\n\\t\\n\\\"\\\\n,j\\\\t\\\\tO\\\\\\\\o\\\\r\\\\/\\\" \\t\\t:\\tfalse \\t, \\r\\r\\\"\\\\b\\\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_219b68d8be2d0cd2ca501bc475e7fe2d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{\"\\t\\\\![81rt\"\r:\n\nfalse\n\n\t ,\t\n \"\": \r\tfalse \r\t\r\t ,\n  \"n\":\t{}  \n\t\n,\t\t\n\"6\\f\\f\\/\":\t\nfalse\n, \"W\\/\\n\\b\"\r\r:\n'
	const char* json = "{\"\\t\\\\![81rt\"\r:\n\nfalse\n\n\t ,\t\n \"\": \r\tfalse \r\t\r\t ,\n  \"n\":\t{}  \n\t\n,\t\t\n\"6\\f\\f\\/\":\t\nfalse\n, \"W\\/\\n\\b\"\r\r:\n";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\t\\\\\\\\![81rt\\\"\\r:\\n\\nfalse\\n\\n\\t ,\\t\\n \\\"\\\": \\r\\tfalse \\r\\t\\r\\t ,\\n  \\\"n\\\":\\t{}  \\n\\t\\n,\\t\\t\\n\\\"6\\\\f\\\\f\\\\/\\\":\\t\\nfalse\\n, \\\"W\\\\/\\\\n\\\\b\\\"\\r\\r:\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b48e4fe17e850c2c182d8b768cdbbcc8) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\"B{\" \r\r: null ,\n  \r\n \"&\":true\t,\t \r \"\\n\"\t:{\t\"G\\/n\"\r:\r false\t}\n \t\r,\"Z\\/\": true\r\n ,\"B\\\"\\f\\\"Y\\b\"\n\r\t  :['
	const char* json = "{\"B{\" \r\r: null ,\n  \r\n \"&\":true\t,\t \r \"\\n\"\t:{\t\"G\\/n\"\r:\r false\t}\n \t\r,\"Z\\/\": true\r\n ,\"B\\\"\\f\\\"Y\\b\"\n\r\t  :[";
	std::cerr << "Plain JSON string from model: " << "{\\\"B{\\\" \\r\\r: null ,\\n  \\r\\n \\\"&\\\":true\\t,\\t \\r \\\"\\\\n\\\"\\t:{\\t\\\"G\\\\/n\\\"\\r:\\r false\\t}\\n \\t\\r,\\\"Z\\\\/\\\": true\\r\\n ,\\\"B\\\\\\\"\\\\f\\\\\\\"Y\\\\b\\\"\\n\\r\\t  :[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cb464e336aea9632761f9c71f1a3207a) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{ \t\"\"\t:true\t\n,\n \t\r  \n \"\\t6\\b\":\rtrue \n\t\t\t,\".\\rB\\f\\b\\nE\"\t:\t[ \n -0e+0\n\n\t\t ]\t ,\"\\\"\"\n :\r[\r\n\n-10] \n \r\r\t\n,\n'
	const char* json = "{ \t\"\"\t:true\t\n,\n \t\r  \n \"\\t6\\b\":\rtrue \n\t\t\t,\".\\rB\\f\\b\\nE\"\t:\t[ \n -0e+0\n\n\t\t ]\t ,\"\\\"\"\n :\r[\r\n\n-10] \n \r\r\t\n,\n";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"\\\"\\t:true\\t\\n,\\n \\t\\r  \\n \\\"\\\\t6\\\\b\\\":\\rtrue \\n\\t\\t\\t,\\\".\\\\rB\\\\f\\\\b\\\\nE\\\"\\t:\\t[ \\n -0e+0\\n\\n\\t\\t ]\\t ,\\\"\\\\\\\"\\\"\\n :\\r[\\r\\n\\n-10] \\n \\r\\r\\t\\n,\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7a65f39e4f9d4ad5d484d8c53b21631d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\t\n\n\"\\t\"\t: \"\\\"\"\t\t ,\r\t\"\\t\\\\=\\b\\\"M5@\" \t\n: \r\tnull \t,\t\t\"\\ry\\t\" :\rfalse\t, \n \n\t\"e\\n\\b\":\r\"\\t%?\",\r   \r\"\"\r\t\n:'
	const char* json = "{\t\n\n\"\\t\"\t: \"\\\"\"\t\t ,\r\t\"\\t\\\\=\\b\\\"M5@\" \t\n: \r\tnull \t,\t\t\"\\ry\\t\" :\rfalse\t, \n \n\t\"e\\n\\b\":\r\"\\t%?\",\r   \r\"\"\r\t\n:";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\n\\\"\\\\t\\\"\\t: \\\"\\\\\\\"\\\"\\t\\t ,\\r\\t\\\"\\\\t\\\\\\\\=\\\\b\\\\\\\"M5@\\\" \\t\\n: \\r\\tnull \\t,\\t\\t\\\"\\\\ry\\\\t\\\" :\\rfalse\\t, \\n \\n\\t\\\"e\\\\n\\\\b\\\":\\r\\\"\\\\t%?\\\",\\r   \\r\\\"\\\"\\r\\t\\n:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6c98b58d80211e18331ae2ea4b7dd085) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// JSON: '{\n\r\n\"\\\"O\\\\\"\n\t: \t\n\"E}\\t\\n\"\r\t\n\r\t\n, \"\\nv\"\r\n\n:false,\r\t\r\"\": [] \n,\n\t\r\n\"\\/\"\r:\r\n{}\r\r\n,\t\r\"E\"\r:false\n \r\t,\n  \"d'
	const char* json = "{\n\r\n\"\\\"O\\\\\"\n\t: \t\n\"E}\\t\\n\"\r\t\n\r\t\n, \"\\nv\"\r\n\n:false,\r\t\r\"\": [] \n,\n\t\r\n\"\\/\"\r:\r\n{}\r\r\n,\t\r\"E\"\r:false\n \r\t,\n  \"d";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\n\\\"\\\\\\\"O\\\\\\\\\\\"\\n\\t: \\t\\n\\\"E}\\\\t\\\\n\\\"\\r\\t\\n\\r\\t\\n, \\\"\\\\nv\\\"\\r\\n\\n:false,\\r\\t\\r\\\"\\\": [] \\n,\\n\\t\\r\\n\\\"\\\\/\\\"\\r:\\r\\n{}\\r\\r\\n,\\t\\r\\\"E\\\"\\r:false\\n \\r\\t,\\n  \\\"d" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e2e6c8376e7d33dced2198e031189b7a) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// JSON: ' \r{\"h\"\t:\tnull,\n\t\"\":\"z\\n\"\t\r ,\r\t\r\t\"G\"  : \r{\n\n\t},\n\n\n\n\n\r \"\\rmU\"\n:null,\n\r\n\t\"\\tq\\\\\\n\\nE\"\n\r\n:  \"NWom\\\"~y\\tm'
	const char* json = " \r{\"h\"\t:\tnull,\n\t\"\":\"z\\n\"\t\r ,\r\t\r\t\"G\"  : \r{\n\n\t},\n\n\n\n\n\r \"\\rmU\"\n:null,\n\r\n\t\"\\tq\\\\\\n\\nE\"\n\r\n:  \"NWom\\\"~y\\tm";
	std::cerr << "Plain JSON string from model: " << " \\r{\\\"h\\\"\\t:\\tnull,\\n\\t\\\"\\\":\\\"z\\\\n\\\"\\t\\r ,\\r\\t\\r\\t\\\"G\\\"  : \\r{\\n\\n\\t},\\n\\n\\n\\n\\n\\r \\\"\\\\rmU\\\"\\n:null,\\n\\r\\n\\t\\\"\\\\tq\\\\\\\\\\\\n\\\\nE\\\"\\n\\r\\n:  \\\"NWom\\\\\\\"~y\\\\tm" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1acb6901107e282fdd5fba301fd24c5e) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// JSON: '\r {\t\t\t\t\"\"\n\n\r:-0e0\r,\n\t\"\\r\"\n:\";\\f\\rv\\r\"\t\r,\r\r\r\"44\"\t\r:\n[]  , \t\t \n \"\\f+\\\"&\\\"\\nU\\\"\"\n\r:\n\r\"\\f\"\n\r\r\r\r\r\t,\r\n \"Jf'
	const char* json = "\r {\t\t\t\t\"\"\n\n\r:-0e0\r,\n\t\"\\r\"\n:\";\\f\\rv\\r\"\t\r,\r\r\r\"44\"\t\r:\n[]  , \t\t \n \"\\f+\\\"&\\\"\\nU\\\"\"\n\r:\n\r\"\\f\"\n\r\r\r\r\r\t,\r\n \"Jf";
	std::cerr << "Plain JSON string from model: " << "\\r {\\t\\t\\t\\t\\\"\\\"\\n\\n\\r:-0e0\\r,\\n\\t\\\"\\\\r\\\"\\n:\\\";\\\\f\\\\rv\\\\r\\\"\\t\\r,\\r\\r\\r\\\"44\\\"\\t\\r:\\n[]  , \\t\\t \\n \\\"\\\\f+\\\\\\\"&\\\\\\\"\\\\nU\\\\\\\"\\\"\\n\\r:\\n\\r\\\"\\\\f\\\"\\n\\r\\r\\r\\r\\r\\t,\\r\\n \\\"Jf" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fc9101d56d91c1aca94946b42b169f8a) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// CloseElements
	// JSON: '\r{\"s\":-0e+07\t\r , \r\n\t\n\"\"\n\r\r\t\r:\t{}\r\t ,\"\\tJ\" \r\r: \tnull\r \n\n\r\r\n,\n\r \n\r \n\"\\tk0o\"\r:{\n\r\n \"\\b\\\"\\f\\t\" \t\n\t :\r\n[0'
	const char* json = "\r{\"s\":-0e+07\t\r , \r\n\t\n\"\"\n\r\r\t\r:\t{}\r\t ,\"\\tJ\" \r\r: \tnull\r \n\n\r\r\n,\n\r \n\r \n\"\\tk0o\"\r:{\n\r\n \"\\b\\\"\\f\\t\" \t\n\t :\r\n[0";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"s\\\":-0e+07\\t\\r , \\r\\n\\t\\n\\\"\\\"\\n\\r\\r\\t\\r:\\t{}\\r\\t ,\\\"\\\\tJ\\\" \\r\\r: \\tnull\\r \\n\\n\\r\\r\\n,\\n\\r \\n\\r \\n\\\"\\\\tk0o\\\"\\r:{\\n\\r\\n \\\"\\\\b\\\\\\\"\\\\f\\\\t\\\" \\t\\n\\t :\\r\\n[0" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_51ed54974da333e259c52987620cca7c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// JSON: '{\t \n  \t\"\"\n:\t  40.0\n\t \t,\t\r\t\t\"\\/'K{`\"\t:{\r},\r\n\r\t\"\\\\\\\"m\\/\":  \"I\\f\\t\\/\",\r \"\\f\":\r\n[\n],\n\t\"^QFbf\"\r\r :{ \r\r\"\\\\'
	const char* json = "{\t \n  \t\"\"\n:\t  40.0\n\t \t,\t\r\t\t\"\\/'K{`\"\t:{\r},\r\n\r\t\"\\\\\\\"m\\/\":  \"I\\f\\t\\/\",\r \"\\f\":\r\n[\n],\n\t\"^QFbf\"\r\r :{ \r\r\"\\\\";
	std::cerr << "Plain JSON string from model: " << "{\\t \\n  \\t\\\"\\\"\\n:\\t  40.0\\n\\t \\t,\\t\\r\\t\\t\\\"\\\\/'K{`\\\"\\t:{\\r},\\r\\n\\r\\t\\\"\\\\\\\\\\\\\\\"m\\\\/\\\":  \\\"I\\\\f\\\\t\\\\/\\\",\\r \\\"\\\\f\\\":\\r\\n[\\n],\\n\\t\\\"^QFbf\\\"\\r\\r :{ \\r\\r\\\"\\\\\\\\" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_206cfa7d395af7d528147c68ea7e659d) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '{\n\t \"\" :\r\t\n[\t]\r,\r\t\"}\":\r-0E-04020\r \n\n, \r\n\t\n\"<zY\\n\\f\\b$\"\t:\n null ,\n\t\"w\\r\" \n\n \r:\r\t\n{}\t\t ,\"d\\t<\"\t\n:{ \n}\r'
	const char* json = "{\n\t \"\" :\r\t\n[\t]\r,\r\t\"}\":\r-0E-04020\r \n\n, \r\n\t\n\"<zY\\n\\f\\b$\"\t:\n null ,\n\t\"w\\r\" \n\n \r:\r\t\n{}\t\t ,\"d\\t<\"\t\n:{ \n}\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t \\\"\\\" :\\r\\t\\n[\\t]\\r,\\r\\t\\\"}\\\":\\r-0E-04020\\r \\n\\n, \\r\\n\\t\\n\\\"<zY\\\\n\\\\f\\\\b$\\\"\\t:\\n null ,\\n\\t\\\"w\\\\r\\\" \\n\\n \\r:\\r\\t\\n{}\\t\\t ,\\\"d\\\\t<\\\"\\t\\n:{ \\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_782fcad690910a78003a8bca17028a38) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '{\r\r\"\":null\n\n ,\n\t\r\"\\r\"\n\n\t:false,\n\"')vc\\t \\nj3\" : \"x\\\"\"\t\r,\n \n\"\\n\\t\\n\\bN\"  \t\n:\"b\"\t,\r \t\"kj\\n\\t\\b+p]\"\n:-3'
	const char* json = "{\r\r\"\":null\n\n ,\n\t\r\"\\r\"\n\n\t:false,\n\"')vc\\t \\nj3\" : \"x\\\"\"\t\r,\n \n\"\\n\\t\\n\\bN\"  \t\n:\"b\"\t,\r \t\"kj\\n\\t\\b+p]\"\n:-3";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\\"\\\":null\\n\\n ,\\n\\t\\r\\\"\\\\r\\\"\\n\\n\\t:false,\\n\\\"')vc\\\\t \\\\nj3\\\" : \\\"x\\\\\\\"\\\"\\t\\r,\\n \\n\\\"\\\\n\\\\t\\\\n\\\\bN\\\"  \\t\\n:\\\"b\\\"\\t,\\r \\t\\\"kj\\\\n\\\\t\\\\b+p]\\\"\\n:-3" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a5843499bfe0342b1e8fcb1d7e79376c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '\t{\"Aro\"\r:{\t\n\r\n\"\\\\\\\\\"\t\r\r\t:\t\rtrue\r \t\n\n\n}\t\r,\n\t\n \t\t\"XL\"\r \t:{\n\"\\n\\/\\\\Q:7hw\\n\"\r\t:\n\"\"\n \n \n}\n\r\n,\r\r\n\"~\" :\r{\n\"'
	const char* json = "\t{\"Aro\"\r:{\t\n\r\n\"\\\\\\\\\"\t\r\r\t:\t\rtrue\r \t\n\n\n}\t\r,\n\t\n \t\t\"XL\"\r \t:{\n\"\\n\\/\\\\Q:7hw\\n\"\r\t:\n\"\"\n \n \n}\n\r\n,\r\r\n\"~\" :\r{\n\"";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"Aro\\\"\\r:{\\t\\n\\r\\n\\\"\\\\\\\\\\\\\\\\\\\"\\t\\r\\r\\t:\\t\\rtrue\\r \\t\\n\\n\\n}\\t\\r,\\n\\t\\n \\t\\t\\\"XL\\\"\\r \\t:{\\n\\\"\\\\n\\\\/\\\\\\\\Q:7hw\\\\n\\\"\\r\\t:\\n\\\"\\\"\\n \\n \\n}\\n\\r\\n,\\r\\r\\n\\\"~\\\" :\\r{\\n\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0462db9e1d12d7603813886275527617) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '\t{\n\n\"4%\":{\r\t}\n, \r\n\n\t \t\"\"\t:true\r, \"+\\t\\f\\\"\"\t\r:null\r\t\n,\n\"\\\\Q\\\\\"\r \n \n :\rtrue\n,\"\\r\\\"lY;Z\\n\\\"\\r\":\t-0.0E0\n'
	const char* json = "\t{\n\n\"4%\":{\r\t}\n, \r\n\n\t \t\"\"\t:true\r, \"+\\t\\f\\\"\"\t\r:null\r\t\n,\n\"\\\\Q\\\\\"\r \n \n :\rtrue\n,\"\\r\\\"lY;Z\\n\\\"\\r\":\t-0.0E0\n";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\n\\\"4%\\\":{\\r\\t}\\n, \\r\\n\\n\\t \\t\\\"\\\"\\t:true\\r, \\\"+\\\\t\\\\f\\\\\\\"\\\"\\t\\r:null\\r\\t\\n,\\n\\\"\\\\\\\\Q\\\\\\\\\\\"\\r \\n \\n :\\rtrue\\n,\\\"\\\\r\\\\\\\"lY;Z\\\\n\\\\\\\"\\\\r\\\":\\t-0.0E0\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2e94f00b5a20dc847fbef8f083576a92) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: ' {\r \"\" \t:-70.0E+03\t\t,\t\r\"\\n\" \n:\r\r\ttrue\n\r,\r\n\t\r\n\"z\"\n\t\t\r\t:\n[] \r\r\n ,\r\r\r\n\"=\\/\\t\\b\"\t\t :\n  []\t\n\n\t,\t \"\\f\":\n\n\r'
	const char* json = " {\r \"\" \t:-70.0E+03\t\t,\t\r\"\\n\" \n:\r\r\ttrue\n\r,\r\n\t\r\n\"z\"\n\t\t\r\t:\n[] \r\r\n ,\r\r\r\n\"=\\/\\t\\b\"\t\t :\n  []\t\n\n\t,\t \"\\f\":\n\n\r";
	std::cerr << "Plain JSON string from model: " << " {\\r \\\"\\\" \\t:-70.0E+03\\t\\t,\\t\\r\\\"\\\\n\\\" \\n:\\r\\r\\ttrue\\n\\r,\\r\\n\\t\\r\\n\\\"z\\\"\\n\\t\\t\\r\\t:\\n[] \\r\\r\\n ,\\r\\r\\r\\n\\\"=\\\\/\\\\t\\\\b\\\"\\t\\t :\\n  []\\t\\n\\n\\t,\\t \\\"\\\\f\\\":\\n\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c0e565e96b60c9b69a95e87f03cdd411) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// JSON: '{ \r\"`1toY<\\r\"  :\"D\"\t\r \r\r,\t\t\"\":{ \t\t\"\\n\"\n \t: 0 ,\r\t\r\t\r\r \"j\\r\\\"\\fm\\\\~\\b\"\n\r\t:\r\r\rnull\n\t\n \n \n } \n,\r\t\r\n \"\\\"e'
	const char* json = "{ \r\"`1toY<\\r\"  :\"D\"\t\r \r\r,\t\t\"\":{ \t\t\"\\n\"\n \t: 0 ,\r\t\r\t\r\r \"j\\r\\\"\\fm\\\\~\\b\"\n\r\t:\r\r\rnull\n\t\n \n \n } \n,\r\t\r\n \"\\\"e";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\\"`1toY<\\\\r\\\"  :\\\"D\\\"\\t\\r \\r\\r,\\t\\t\\\"\\\":{ \\t\\t\\\"\\\\n\\\"\\n \\t: 0 ,\\r\\t\\r\\t\\r\\r \\\"j\\\\r\\\\\\\"\\\\fm\\\\\\\\~\\\\b\\\"\\n\\r\\t:\\r\\r\\rnull\\n\\t\\n \\n \\n } \\n,\\r\\t\\r\\n \\\"\\\\\\\"e" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e21523f3565d3ee2b97971287db2ba91) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '\t\r{\t\"n\\nV\":\t\"\\\"\\\\\" ,\n\"\"\r \n\t:\rnull \t\n,\r \n\" \"\r:[]\r,\"\\t\\\\\"\t\r\n:null  ,\n\n \t\t\"\\\\mO\\\"KI\\f1\\f\"\t\n \t\n:{  \t\n\"\\t'
	const char* json = "\t\r{\t\"n\\nV\":\t\"\\\"\\\\\" ,\n\"\"\r \n\t:\rnull \t\n,\r \n\" \"\r:[]\r,\"\\t\\\\\"\t\r\n:null  ,\n\n \t\t\"\\\\mO\\\"KI\\f1\\f\"\t\n \t\n:{  \t\n\"\\t";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{\\t\\\"n\\\\nV\\\":\\t\\\"\\\\\\\"\\\\\\\\\\\" ,\\n\\\"\\\"\\r \\n\\t:\\rnull \\t\\n,\\r \\n\\\" \\\"\\r:[]\\r,\\\"\\\\t\\\\\\\\\\\"\\t\\r\\n:null  ,\\n\\n \\t\\t\\\"\\\\\\\\mO\\\\\\\"KI\\\\f1\\\\f\\\"\\t\\n \\t\\n:{  \\t\\n\\\"\\\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e776358a98eb6be90a5e54326b7c12e1) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// JSON: '{\"\\/\":\r\n\t\ntrue, \"\"\r\t:\rnull\n,\t\"\\t\" \n :\r\"}[]\"  \n   , \r\"\\f(6}\\f\"\n\t\t\n:[ true\n\n\r]\r , \r\r\"Oz{\":\r\t\"\\n,\\/=\\f2'
	const char* json = "{\"\\/\":\r\n\t\ntrue, \"\"\r\t:\rnull\n,\t\"\\t\" \n :\r\"}[]\"  \n   , \r\"\\f(6}\\f\"\n\t\t\n:[ true\n\n\r]\r , \r\r\"Oz{\":\r\t\"\\n,\\/=\\f2";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\/\\\":\\r\\n\\t\\ntrue, \\\"\\\"\\r\\t:\\rnull\\n,\\t\\\"\\\\t\\\" \\n :\\r\\\"}[]\\\"  \\n   , \\r\\\"\\\\f(6}\\\\f\\\"\\n\\t\\t\\n:[ true\\n\\n\\r]\\r , \\r\\r\\\"Oz{\\\":\\r\\t\\\"\\\\n,\\\\/=\\\\f2" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b01bb98770223bcc465762020eaad5de) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// JSON: '\r{\r\"\\\"\"\n: null \t\n,\t\t\"\\t\"\t: false ,\r \n\r\"\\\"x\\\\u\\\"k\\\\4f\\f\"\n\r\t\t\r :{\"\"\t\n: \"\\n_\\tX\\\"\"\r,\n\n\t  \n\"^;oJ\\b\\\\\":\"h'
	const char* json = "\r{\r\"\\\"\"\n: null \t\n,\t\t\"\\t\"\t: false ,\r \n\r\"\\\"x\\\\u\\\"k\\\\4f\\f\"\n\r\t\t\r :{\"\"\t\n: \"\\n_\\tX\\\"\"\r,\n\n\t  \n\"^;oJ\\b\\\\\":\"h";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\\"\\\\\\\"\\\"\\n: null \\t\\n,\\t\\t\\\"\\\\t\\\"\\t: false ,\\r \\n\\r\\\"\\\\\\\"x\\\\\\\\u\\\\\\\"k\\\\\\\\4f\\\\f\\\"\\n\\r\\t\\t\\r :{\\\"\\\"\\t\\n: \\\"\\\\n_\\\\tX\\\\\\\"\\\"\\r,\\n\\n\\t  \\n\\\"^;oJ\\\\b\\\\\\\\\\\":\\\"h" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3f96246fb31d57b9a033024ff61e8bde) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// JSON: '\r\t\t{\r\"\\b\"\t \n:\t\t\rtrue\t\r,\t\t\t\"\\bFklr>\\n\"  \n\t:\"4G\\n\\b\"\n\n,\"\"\n\n\r:false ,\t\n\"\\r\"\t:true\t,\r\r\"q\":\t\r\nnull\n\t\n,\r\"a'
	const char* json = "\r\t\t{\r\"\\b\"\t \n:\t\t\rtrue\t\r,\t\t\t\"\\bFklr>\\n\"  \n\t:\"4G\\n\\b\"\n\n,\"\"\n\n\r:false ,\t\n\"\\r\"\t:true\t,\r\r\"q\":\t\r\nnull\n\t\n,\r\"a";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\t{\\r\\\"\\\\b\\\"\\t \\n:\\t\\t\\rtrue\\t\\r,\\t\\t\\t\\\"\\\\bFklr>\\\\n\\\"  \\n\\t:\\\"4G\\\\n\\\\b\\\"\\n\\n,\\\"\\\"\\n\\n\\r:false ,\\t\\n\\\"\\\\r\\\"\\t:true\\t,\\r\\r\\\"q\\\":\\t\\r\\nnull\\n\\t\\n,\\r\\\"a" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cff298b2a527ee12ec85665a27212dde) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// JSON: '\n\r\t{\r \"\\r1uN\\\\w-\\b\": \t\rtrue ,\n\t\n\"\\b\"\n\r\r:[[\r\r\t] \r],\n\"S\\/6\\b\":\"\", \r \r\n\"K\\bA\\\"\\t\\\\\\r^$\\n\"\n :\r[\r\r\r\r[true'
	const char* json = "\n\r\t{\r \"\\r1uN\\\\w-\\b\": \t\rtrue ,\n\t\n\"\\b\"\n\r\r:[[\r\r\t] \r],\n\"S\\/6\\b\":\"\", \r \r\n\"K\\bA\\\"\\t\\\\\\r^$\\n\"\n :\r[\r\r\r\r[true";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{\\r \\\"\\\\r1uN\\\\\\\\w-\\\\b\\\": \\t\\rtrue ,\\n\\t\\n\\\"\\\\b\\\"\\n\\r\\r:[[\\r\\r\\t] \\r],\\n\\\"S\\\\/6\\\\b\\\":\\\"\\\", \\r \\r\\n\\\"K\\\\bA\\\\\\\"\\\\t\\\\\\\\\\\\r^$\\\\n\\\"\\n :\\r[\\r\\r\\r\\r[true" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_137d988279dcc44cf77e6711f6b904cb) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: '\n{\n\"\\rz\\n\\\\\\\\\"\n:\n\r[ \n {}\t]\r\t \n, \n\n\"\"\t:null\n,\r\r\t\"\\n6\":\t\n false\n\r,\t\t\"g\"\n\t:\r\n\t[\n\t\rtrue ]\t\r\t,  \r\"\\n\": \r['
	const char* json = "\n{\n\"\\rz\\n\\\\\\\\\"\n:\n\r[ \n {}\t]\r\t \n, \n\n\"\"\t:null\n,\r\r\t\"\\n6\":\t\n false\n\r,\t\t\"g\"\n\t:\r\n\t[\n\t\rtrue ]\t\r\t,  \r\"\\n\": \r[";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\\"\\\\rz\\\\n\\\\\\\\\\\\\\\\\\\"\\n:\\n\\r[ \\n {}\\t]\\r\\t \\n, \\n\\n\\\"\\\"\\t:null\\n,\\r\\r\\t\\\"\\\\n6\\\":\\t\\n false\\n\\r,\\t\\t\\\"g\\\"\\n\\t:\\r\\n\\t[\\n\\t\\rtrue ]\\t\\r\\t,  \\r\\\"\\\\n\\\": \\r[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_18b442bf28c95e9dfde0fb1f37f97234) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '\r\n { \r\n\"\\\"\" :\r\nnull,\t\"@\"\r\r:-2 \t, \"\\t\\\\nB\\\\\\f?M'\"\n:\r\n { \n\"\\f\\f\\t,\":\r \ntrue,  \"~\"\r \n:-0.0\t\n\t\n\n}\r\t,\n\n\t\r'
	const char* json = "\r\n { \r\n\"\\\"\" :\r\nnull,\t\"@\"\r\r:-2 \t, \"\\t\\\\nB\\\\\\f?M'\"\n:\r\n { \n\"\\f\\f\\t,\":\r \ntrue,  \"~\"\r \n:-0.0\t\n\t\n\n}\r\t,\n\n\t\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\n { \\r\\n\\\"\\\\\\\"\\\" :\\r\\nnull,\\t\\\"@\\\"\\r\\r:-2 \\t, \\\"\\\\t\\\\\\\\nB\\\\\\\\\\\\f?M'\\\"\\n:\\r\\n { \\n\\\"\\\\f\\\\f\\\\t,\\\":\\r \\ntrue,  \\\"~\\\"\\r \\n:-0.0\\t\\n\\t\\n\\n}\\r\\t,\\n\\n\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d9e117b8f0c553e6c7f3bdc2177ec0f5) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\n{\n \r \r \"\\f\"\n:\n\rnull\n\n\t ,\"\"\r:\t \t{\n\"\\\\J\" \r:[]\t\n \r, \"\\bK\"\t:\n\t\t\"\\\\'x.$\\\\]\\tvc?w\\/t\"\n\n,\t\"\\b\\b\"\t:{\n\"\\f;\"\t'
	const char* json = "\n{\n \r \r \"\\f\"\n:\n\rnull\n\n\t ,\"\"\r:\t \t{\n\"\\\\J\" \r:[]\t\n \r, \"\\bK\"\t:\n\t\t\"\\\\'x.$\\\\]\\tvc?w\\/t\"\n\n,\t\"\\b\\b\"\t:{\n\"\\f;\"\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n \\r \\r \\\"\\\\f\\\"\\n:\\n\\rnull\\n\\n\\t ,\\\"\\\"\\r:\\t \\t{\\n\\\"\\\\\\\\J\\\" \\r:[]\\t\\n \\r, \\\"\\\\bK\\\"\\t:\\n\\t\\t\\\"\\\\\\\\'x.$\\\\\\\\]\\\\tvc?w\\\\/t\\\"\\n\\n,\\t\\\"\\\\b\\\\b\\\"\\t:{\\n\\\"\\\\f;\\\"\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_90c2d9403648cacfcc4a01620208f532) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// JSON: '{\n\r \"\\\\\\f\" \r:655.0e+0\n \r\n ,\n\r\r\"\\nY\\n\\r\" :\t {}\n\t\t\n\n\r \n,\t\t \"\"\t:\rtrue\t\n\t\n\n,\r\n\t\"\\b\\b\":\n\t\t\t{\n\r\t\"\\n\"\n:\r\n\r{'
	const char* json = "{\n\r \"\\\\\\f\" \r:655.0e+0\n \r\n ,\n\r\r\"\\nY\\n\\r\" :\t {}\n\t\t\n\n\r \n,\t\t \"\"\t:\rtrue\t\n\t\n\n,\r\n\t\"\\b\\b\":\n\t\t\t{\n\r\t\"\\n\"\n:\r\n\r{";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r \\\"\\\\\\\\\\\\f\\\" \\r:655.0e+0\\n \\r\\n ,\\n\\r\\r\\\"\\\\nY\\\\n\\\\r\\\" :\\t {}\\n\\t\\t\\n\\n\\r \\n,\\t\\t \\\"\\\"\\t:\\rtrue\\t\\n\\t\\n\\n,\\r\\n\\t\\\"\\\\b\\\\b\\\":\\n\\t\\t\\t{\\n\\r\\t\\\"\\\\n\\\"\\n:\\r\\n\\r{" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1b49de9fd9f0a232a5ec543413b34dd0) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '{\n\n\"<\"\t\t \t:\t\"\"\t\r,\n\t\t \"\\b\\/\\\\\\tE\"\r\r:\"l\" \r\n, \n \"^e\\r\\n\\r\\tG\\noe\\fg\":true\n\t\t,\"X\\/\\b\"\t \r:\t{\t}\r\t\n\t\r\t,\r  \"'
	const char* json = "{\n\n\"<\"\t\t \t:\t\"\"\t\r,\n\t\t \"\\b\\/\\\\\\tE\"\r\r:\"l\" \r\n, \n \"^e\\r\\n\\r\\tG\\noe\\fg\":true\n\t\t,\"X\\/\\b\"\t \r:\t{\t}\r\t\n\t\r\t,\r  \"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\\"<\\\"\\t\\t \\t:\\t\\\"\\\"\\t\\r,\\n\\t\\t \\\"\\\\b\\\\/\\\\\\\\\\\\tE\\\"\\r\\r:\\\"l\\\" \\r\\n, \\n \\\"^e\\\\r\\\\n\\\\r\\\\tG\\\\noe\\\\fg\\\":true\\n\\t\\t,\\\"X\\\\/\\\\b\\\"\\t \\r:\\t{\\t}\\r\\t\\n\\t\\r\\t,\\r  \\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c8039b6ae8a93da85ef1cb08240fb514) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// JSON: '\n{\"$\" :false\t\r ,\"\\\"y\\\"]t\\fm\"\t\n :\r86362E+030\t\n \t\n,\t\t\n\t\t\"\\\\\":  null\t\r\n\n ,\t \n\"\" \t\t\n:[]\t ,\t\r\n \"j\\r\\r.h\\/'
	const char* json = "\n{\"$\" :false\t\r ,\"\\\"y\\\"]t\\fm\"\t\n :\r86362E+030\t\n \t\n,\t\t\n\t\t\"\\\\\":  null\t\r\n\n ,\t \n\"\" \t\t\n:[]\t ,\t\r\n \"j\\r\\r.h\\/";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"$\\\" :false\\t\\r ,\\\"\\\\\\\"y\\\\\\\"]t\\\\fm\\\"\\t\\n :\\r86362E+030\\t\\n \\t\\n,\\t\\t\\n\\t\\t\\\"\\\\\\\\\\\":  null\\t\\r\\n\\n ,\\t \\n\\\"\\\" \\t\\t\\n:[]\\t ,\\t\\r\\n \\\"j\\\\r\\\\r.h\\\\/" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3d6ab7f556f75140b663041d0f46e59b) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// JSON: ' {\t  \"\"\r:\r\t\rtrue \r\r\r\t  ,\t\"$<d\":true\t\t \r,    \t\"\\/\\t\"\n\n\n:\n\r0.07501\n\n \t,\r\t\r\"<\"\r:\r \t650.0980,\n\"qU\"\r\t:\t\"j'
	const char* json = " {\t  \"\"\r:\r\t\rtrue \r\r\r\t  ,\t\"$<d\":true\t\t \r,    \t\"\\/\\t\"\n\n\n:\n\r0.07501\n\n \t,\r\t\r\"<\"\r:\r \t650.0980,\n\"qU\"\r\t:\t\"j";
	std::cerr << "Plain JSON string from model: " << " {\\t  \\\"\\\"\\r:\\r\\t\\rtrue \\r\\r\\r\\t  ,\\t\\\"$<d\\\":true\\t\\t \\r,    \\t\\\"\\\\/\\\\t\\\"\\n\\n\\n:\\n\\r0.07501\\n\\n \\t,\\r\\t\\r\\\"<\\\"\\r:\\r \\t650.0980,\\n\\\"qU\\\"\\r\\t:\\t\\\"j" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_336d19147d5e3df453bafc5059273d0c) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// JSON: '{\n\t \"\"\t :\t\n[\r\t\r\r0\n, 0\r,true  \t\r]\t \n,\t\r \r\"i\"\r\r\t:null \n,\r \"\\t\"\r\n:\r\t\"=\"\r \n,\"\\\"\\\\\" :\"P\\f\"\t   ,\t\r\t\n\n\r\"|uR'
	const char* json = "{\n\t \"\"\t :\t\n[\r\t\r\r0\n, 0\r,true  \t\r]\t \n,\t\r \r\"i\"\r\r\t:null \n,\r \"\\t\"\r\n:\r\t\"=\"\r \n,\"\\\"\\\\\" :\"P\\f\"\t   ,\t\r\t\n\n\r\"|uR";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t \\\"\\\"\\t :\\t\\n[\\r\\t\\r\\r0\\n, 0\\r,true  \\t\\r]\\t \\n,\\t\\r \\r\\\"i\\\"\\r\\r\\t:null \\n,\\r \\\"\\\\t\\\"\\r\\n:\\r\\t\\\"=\\\"\\r \\n,\\\"\\\\\\\"\\\\\\\\\\\" :\\\"P\\\\f\\\"\\t   ,\\t\\r\\t\\n\\n\\r\\\"|uR" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d15a7667855ecbd3de30f82dea24dc4d) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// JSON: '{\n \"@e+\\/O\\rf\\\"\"  :{\t\"\\r\"\r\t\n:\n\n { \"%t<\\\"!\\n\\/\":null\n\r\n},\r\"\\n\\na\\n\\\\\"\t:\r\n -70e0\t \n}\n \t,\t\r\t \n\n\"\"\r\r\t\r:\"'
	const char* json = "{\n \"@e+\\/O\\rf\\\"\"  :{\t\"\\r\"\r\t\n:\n\n { \"%t<\\\"!\\n\\/\":null\n\r\n},\r\"\\n\\na\\n\\\\\"\t:\r\n -70e0\t \n}\n \t,\t\r\t \n\n\"\"\r\r\t\r:\"";
	std::cerr << "Plain JSON string from model: " << "{\\n \\\"@e+\\\\/O\\\\rf\\\\\\\"\\\"  :{\\t\\\"\\\\r\\\"\\r\\t\\n:\\n\\n { \\\"%t<\\\\\\\"!\\\\n\\\\/\\\":null\\n\\r\\n},\\r\\\"\\\\n\\\\na\\\\n\\\\\\\\\\\"\\t:\\r\\n -70e0\\t \\n}\\n \\t,\\t\\r\\t \\n\\n\\\"\\\"\\r\\r\\t\\r:\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6db2ff34e15f0d2eb0abfa0a625b1048) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '{\n\n\n \"\":\r\"\\npm\\r\"\n\r\r,\t \">5nf\\f\"\r\n\t\n :{ \r\"G\":false\n}\r \t\t\n\n\n,\n\t\t \t\n\"\\rx\\n\":\t\rnull\n\n,\t\"3\\/\\n\"\t\t\t:\ttrue\n'
	const char* json = "{\n\n\n \"\":\r\"\\npm\\r\"\n\r\r,\t \">5nf\\f\"\r\n\t\n :{ \r\"G\":false\n}\r \t\t\n\n\n,\n\t\t \t\n\"\\rx\\n\":\t\rnull\n\n,\t\"3\\/\\n\"\t\t\t:\ttrue\n";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\n \\\"\\\":\\r\\\"\\\\npm\\\\r\\\"\\n\\r\\r,\\t \\\">5nf\\\\f\\\"\\r\\n\\t\\n :{ \\r\\\"G\\\":false\\n}\\r \\t\\t\\n\\n\\n,\\n\\t\\t \\t\\n\\\"\\\\rx\\\\n\\\":\\t\\rnull\\n\\n,\\t\\\"3\\\\/\\\\n\\\"\\t\\t\\t:\\ttrue\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4a4aacd9d5080332dfedc167eaa4ed2c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// JSON: '{\r\r\t\r\"\"\r\t\t\n:false,\r \t\"\\\"\\\\\\f\\n\\r\" \t: \t{ \r\"\\t\\/\" \r\n\t \t:{}\n\t\r}\r,   \t\"0\":\"{w\"\n\n \t,\r\"\\f4\":true \n\t ,\t\r\t\".'
	const char* json = "{\r\r\t\r\"\"\r\t\t\n:false,\r \t\"\\\"\\\\\\f\\n\\r\" \t: \t{ \r\"\\t\\/\" \r\n\t \t:{}\n\t\r}\r,   \t\"0\":\"{w\"\n\n \t,\r\"\\f4\":true \n\t ,\t\r\t\".";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\r\\\"\\\"\\r\\t\\t\\n:false,\\r \\t\\\"\\\\\\\"\\\\\\\\\\\\f\\\\n\\\\r\\\" \\t: \\t{ \\r\\\"\\\\t\\\\/\\\" \\r\\n\\t \\t:{}\\n\\t\\r}\\r,   \\t\\\"0\\\":\\\"{w\\\"\\n\\n \\t,\\r\\\"\\\\f4\\\":true \\n\\t ,\\t\\r\\t\\\"." << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_61221092882dde38b2a77ccde139ab33) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// JSON: '\n{\t  \t\t\"\"\r:true \r,\n\"\\bT\"\r\n\t:\n\rfalse  \r\n\n,\"\\/\"\t\n\n\t\t:null\r\t\t ,\n\n\"\\t\\\"\" \t\n\r :\n-0.09e-0820202 \n  \n,\t\n\"\\/'
	const char* json = "\n{\t  \t\t\"\"\r:true \r,\n\"\\bT\"\r\n\t:\n\rfalse  \r\n\n,\"\\/\"\t\n\n\t\t:null\r\t\t ,\n\n\"\\t\\\"\" \t\n\r :\n-0.09e-0820202 \n  \n,\t\n\"\\/";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t  \\t\\t\\\"\\\"\\r:true \\r,\\n\\\"\\\\bT\\\"\\r\\n\\t:\\n\\rfalse  \\r\\n\\n,\\\"\\\\/\\\"\\t\\n\\n\\t\\t:null\\r\\t\\t ,\\n\\n\\\"\\\\t\\\\\\\"\\\" \\t\\n\\r :\\n-0.09e-0820202 \\n  \\n,\\t\\n\\\"\\\\/" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_59e1f6741927d926c4f7b1957e24cc4b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '\n{\"\"\t\r\n:\"T\\r\" \n\n,\r \n\"\\\\\\t\\r\\n\\b\"\t   : \r[\"\\\\\\/K\",null\n \r\n\n\t \r] \r\t\n\n ,\r\r\r\"\\\"\"\n\t\r:null,\n\n\t\"N\\b\\r\":null\r'
	const char* json = "\n{\"\"\t\r\n:\"T\\r\" \n\n,\r \n\"\\\\\\t\\r\\n\\b\"\t   : \r[\"\\\\\\/K\",null\n \r\n\n\t \r] \r\t\n\n ,\r\r\r\"\\\"\"\n\t\r:null,\n\n\t\"N\\b\\r\":null\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\"\\t\\r\\n:\\\"T\\\\r\\\" \\n\\n,\\r \\n\\\"\\\\\\\\\\\\t\\\\r\\\\n\\\\b\\\"\\t   : \\r[\\\"\\\\\\\\\\\\/K\\\",null\\n \\r\\n\\n\\t \\r] \\r\\t\\n\\n ,\\r\\r\\r\\\"\\\\\\\"\\\"\\n\\t\\r:null,\\n\\n\\t\\\"N\\\\b\\\\r\\\":null\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c0ece9e281ee52bb3a523652044e09bf) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// JSON: '{\r  \"\\\"\\b\"\n\t :[\n]\n,\t\"\"\t\r\t:{\t\n\r\"\\f\":\t \rtrue \t,\"ZSL?\"\r\r\t: [\t]\n}\n\r\n\r,     \"w\"\t:false\t,\t\r\n\n\",\\/\\b\\\\\\tl\\f'
	const char* json = "{\r  \"\\\"\\b\"\n\t :[\n]\n,\t\"\"\t\r\t:{\t\n\r\"\\f\":\t \rtrue \t,\"ZSL?\"\r\r\t: [\t]\n}\n\r\n\r,     \"w\"\t:false\t,\t\r\n\n\",\\/\\b\\\\\\tl\\f";
	std::cerr << "Plain JSON string from model: " << "{\\r  \\\"\\\\\\\"\\\\b\\\"\\n\\t :[\\n]\\n,\\t\\\"\\\"\\t\\r\\t:{\\t\\n\\r\\\"\\\\f\\\":\\t \\rtrue \\t,\\\"ZSL?\\\"\\r\\r\\t: [\\t]\\n}\\n\\r\\n\\r,     \\\"w\\\"\\t:false\\t,\\t\\r\\n\\n\\\",\\\\/\\\\b\\\\\\\\\\\\tl\\\\f" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_84841df04cce0ff6f5f981aa25f13f14) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// JSON: '{\r\n\"\":\n\ntrue\n\r\r\r \r,\n\n\"gN\":\n\"\\/p\\b\\rK\\b$\"\r\r,\n\t\"!bd\\\\\"\n:\r\t{  }\t\t\r\r,\r\n\n\"L\"  :\"\\/b\\\"\"\t\r,\r\r\t\"\\tDTf\\n3\\f%}'
	const char* json = "{\r\n\"\":\n\ntrue\n\r\r\r \r,\n\n\"gN\":\n\"\\/p\\b\\rK\\b$\"\r\r,\n\t\"!bd\\\\\"\n:\r\t{  }\t\t\r\r,\r\n\n\"L\"  :\"\\/b\\\"\"\t\r,\r\r\t\"\\tDTf\\n3\\f%}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"\\\":\\n\\ntrue\\n\\r\\r\\r \\r,\\n\\n\\\"gN\\\":\\n\\\"\\\\/p\\\\b\\\\rK\\\\b$\\\"\\r\\r,\\n\\t\\\"!bd\\\\\\\\\\\"\\n:\\r\\t{  }\\t\\t\\r\\r,\\r\\n\\n\\\"L\\\"  :\\\"\\\\/b\\\\\\\"\\\"\\t\\r,\\r\\r\\t\\\"\\\\tDTf\\\\n3\\\\f%}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d8e3cefcb07ecb32c7765c93fc56dd15) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// JSON: '\n{ \t \"2\\\"\"\t\r\r\r\n:\ntrue\t \r\n,\n\n \"=\" \n\n:\r[\t]\n \t   ,\t\r\n\"\" \t:\n[]\n\t \t\r, \t\n\r\"p=\\\"\\\\u\"\t\r\n:true \t , \t\n\n\"4*;\"\n\r'
	const char* json = "\n{ \t \"2\\\"\"\t\r\r\r\n:\ntrue\t \r\n,\n\n \"=\" \n\n:\r[\t]\n \t   ,\t\r\n\"\" \t:\n[]\n\t \t\r, \t\n\r\"p=\\\"\\\\u\"\t\r\n:true \t , \t\n\n\"4*;\"\n\r";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t \\\"2\\\\\\\"\\\"\\t\\r\\r\\r\\n:\\ntrue\\t \\r\\n,\\n\\n \\\"=\\\" \\n\\n:\\r[\\t]\\n \\t   ,\\t\\r\\n\\\"\\\" \\t:\\n[]\\n\\t \\t\\r, \\t\\n\\r\\\"p=\\\\\\\"\\\\\\\\u\\\"\\t\\r\\n:true \\t , \\t\\n\\n\\\"4*;\\\"\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_633c3b2582e17d52963fecfb4219a932) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n{\t\r\n\t\n\n\"\\\"\\/\\n\":\n\n\tfalse,\"\":\n\tnull , \n\r\"7\\f~u\\\"\\f\"\t:\r\r\r{ }\t\r\t\n,\t\n\"\\/\\f-\":\n\r\nfalse,  \r\n \n\"j\\\\\"\n\t :\t-'
	const char* json = "\n{\t\r\n\t\n\n\"\\\"\\/\\n\":\n\n\tfalse,\"\":\n\tnull , \n\r\"7\\f~u\\\"\\f\"\t:\r\r\r{ }\t\r\t\n,\t\n\"\\/\\f-\":\n\r\nfalse,  \r\n \n\"j\\\\\"\n\t :\t-";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\r\\n\\t\\n\\n\\\"\\\\\\\"\\\\/\\\\n\\\":\\n\\n\\tfalse,\\\"\\\":\\n\\tnull , \\n\\r\\\"7\\\\f~u\\\\\\\"\\\\f\\\"\\t:\\r\\r\\r{ }\\t\\r\\t\\n,\\t\\n\\\"\\\\/\\\\f-\\\":\\n\\r\\nfalse,  \\r\\n \\n\\\"j\\\\\\\\\\\"\\n\\t :\\t-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_429dd0e48eb47c538f3f7df44d47812c) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// JSON: '{\n\n\n \"\"\n:true  \r,\t\n\t\"\\bcg0u\"\r\t :\t0   , \"\\\\\" :null\n ,\n\r\r\"C\":{\t\t\">.p\\\"\"\t\n\n\n\t :\rfalse\r \r\r\t\n\t}\r\t\n\t\n\r,\n\n\n'
	const char* json = "{\n\n\n \"\"\n:true  \r,\t\n\t\"\\bcg0u\"\r\t :\t0   , \"\\\\\" :null\n ,\n\r\r\"C\":{\t\t\">.p\\\"\"\t\n\n\n\t :\rfalse\r \r\r\t\n\t}\r\t\n\t\n\r,\n\n\n";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\n \\\"\\\"\\n:true  \\r,\\t\\n\\t\\\"\\\\bcg0u\\\"\\r\\t :\\t0   , \\\"\\\\\\\\\\\" :null\\n ,\\n\\r\\r\\\"C\\\":{\\t\\t\\\">.p\\\\\\\"\\\"\\t\\n\\n\\n\\t :\\rfalse\\r \\r\\r\\t\\n\\t}\\r\\t\\n\\t\\n\\r,\\n\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8c4b7a641636de13c12b65b59192c68e) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\r{\t \t\t\t\"\" :true\n,\n\n\"G1`|\" \r\t:null ,\t\r\r \"`\":\r \n{}\r,  \"\\n\\\"\\fb\"\r\r\r:[\r\r -0E+026106 \n]\n\t\n\t\t\n,\n\t \"9M\"\n :[-'
	const char* json = "\r{\t \t\t\t\"\" :true\n,\n\n\"G1`|\" \r\t:null ,\t\r\r \"`\":\r \n{}\r,  \"\\n\\\"\\fb\"\r\r\r:[\r\r -0E+026106 \n]\n\t\n\t\t\n,\n\t \"9M\"\n :[-";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t \\t\\t\\t\\\"\\\" :true\\n,\\n\\n\\\"G1`|\\\" \\r\\t:null ,\\t\\r\\r \\\"`\\\":\\r \\n{}\\r,  \\\"\\\\n\\\\\\\"\\\\fb\\\"\\r\\r\\r:[\\r\\r -0E+026106 \\n]\\n\\t\\n\\t\\t\\n,\\n\\t \\\"9M\\\"\\n :[-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6dd49561c8952cd8e28f55ffae97fd94) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// JSON: '\t{\"\\/\\\\Q\\\\\" : []\r\t\r,  \"i\\n\\f\":-37\r\n,\t \n\t\"V\\n)\\rf\\n\"\t\n:\n{\t\"\\r\":[] }\r,  \"\"\n\r\n\t:\tnull,\"G\\ts\": []\n\t,\t \"`'
	const char* json = "\t{\"\\/\\\\Q\\\\\" : []\r\t\r,  \"i\\n\\f\":-37\r\n,\t \n\t\"V\\n)\\rf\\n\"\t\n:\n{\t\"\\r\":[] }\r,  \"\"\n\r\n\t:\tnull,\"G\\ts\": []\n\t,\t \"`";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"\\\\/\\\\\\\\Q\\\\\\\\\\\" : []\\r\\t\\r,  \\\"i\\\\n\\\\f\\\":-37\\r\\n,\\t \\n\\t\\\"V\\\\n)\\\\rf\\\\n\\\"\\t\\n:\\n{\\t\\\"\\\\r\\\":[] }\\r,  \\\"\\\"\\n\\r\\n\\t:\\tnull,\\\"G\\\\ts\\\": []\\n\\t,\\t \\\"`" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8e332e980eb2dfde68f7372bc7446321) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\t{  \t\r \"L\\/\"\t\n:\r\"\" ,\"\\n\"\t:\t\t\r\t[]\t\n \t\t\t,\t\r\r\"4\\n-\"\r\t:\ntrue\n, \r\"6\\b\"\r: \n-6 \n\n,\t\r\t\n\"I\\/v\"\n:null, \t\t\"IR\"\r'
	const char* json = "\t{  \t\r \"L\\/\"\t\n:\r\"\" ,\"\\n\"\t:\t\t\r\t[]\t\n \t\t\t,\t\r\r\"4\\n-\"\r\t:\ntrue\n, \r\"6\\b\"\r: \n-6 \n\n,\t\r\t\n\"I\\/v\"\n:null, \t\t\"IR\"\r";
	std::cerr << "Plain JSON string from model: " << "\\t{  \\t\\r \\\"L\\\\/\\\"\\t\\n:\\r\\\"\\\" ,\\\"\\\\n\\\"\\t:\\t\\t\\r\\t[]\\t\\n \\t\\t\\t,\\t\\r\\r\\\"4\\\\n-\\\"\\r\\t:\\ntrue\\n, \\r\\\"6\\\\b\\\"\\r: \\n-6 \\n\\n,\\t\\r\\t\\n\\\"I\\\\/v\\\"\\n:null, \\t\\t\\\"IR\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3b440e352314771f73fc4660173424d6) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// JSON: ' \t{\n\t\"\"\t :\r  null\r,\r\t\n\"U\"\r :9 \t\t\n,\r\r\r\"\\t!vT\"\t:{ \t\t\"=b\\nD>\"\t\n:false\t\r,\r\r\r  \"UE\\\"K\\n\"\r :\"\\\"\\t\"}\t,\t\r\t\t\n'
	const char* json = " \t{\n\t\"\"\t :\r  null\r,\r\t\n\"U\"\r :9 \t\t\n,\r\r\r\"\\t!vT\"\t:{ \t\t\"=b\\nD>\"\t\n:false\t\r,\r\r\r  \"UE\\\"K\\n\"\r :\"\\\"\\t\"}\t,\t\r\t\t\n";
	std::cerr << "Plain JSON string from model: " << " \\t{\\n\\t\\\"\\\"\\t :\\r  null\\r,\\r\\t\\n\\\"U\\\"\\r :9 \\t\\t\\n,\\r\\r\\r\\\"\\\\t!vT\\\"\\t:{ \\t\\t\\\"=b\\\\nD>\\\"\\t\\n:false\\t\\r,\\r\\r\\r  \\\"UE\\\\\\\"K\\\\n\\\"\\r :\\\"\\\\\\\"\\\\t\\\"}\\t,\\t\\r\\t\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f2a2ab29062fcd6b0e2fa0c50f7824ed) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: ' {\n\n\"{\\r\\bR\\/\"\t\r\n\t:{  \r\r\"^\\r\":  \r\"\"\n\r\n\r,\"#Y\\r\\/\\n\" \r:\r\"\\t?\" ,\n\t\"\\f2\\/\"\n\n :\n{}\r \t\t}   \r,\t\r \r\"h\"\r\r: \n8'
	const char* json = " {\n\n\"{\\r\\bR\\/\"\t\r\n\t:{  \r\r\"^\\r\":  \r\"\"\n\r\n\r,\"#Y\\r\\/\\n\" \r:\r\"\\t?\" ,\n\t\"\\f2\\/\"\n\n :\n{}\r \t\t}   \r,\t\r \r\"h\"\r\r: \n8";
	std::cerr << "Plain JSON string from model: " << " {\\n\\n\\\"{\\\\r\\\\bR\\\\/\\\"\\t\\r\\n\\t:{  \\r\\r\\\"^\\\\r\\\":  \\r\\\"\\\"\\n\\r\\n\\r,\\\"#Y\\\\r\\\\/\\\\n\\\" \\r:\\r\\\"\\\\t?\\\" ,\\n\\t\\\"\\\\f2\\\\/\\\"\\n\\n :\\n{}\\r \\t\\t}   \\r,\\t\\r \\r\\\"h\\\"\\r\\r: \\n8" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f18c955a671a527fd65883dd9e48200e) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// JSON: '{\n\n \r\n\"\\r=%\"\n:\r[ \"#\"\r ]\r\r\t\n,\r\t\r\n \n\"\\b\\/\\\"\":\r-22240E-010930\r\r \n\n,\r\"q\"\t:\n \n{\n\n\r\r\"\"\r:\t[ ]\t\n}\n\n\n \r,\n \t\"~'
	const char* json = "{\n\n \r\n\"\\r=%\"\n:\r[ \"#\"\r ]\r\r\t\n,\r\t\r\n \n\"\\b\\/\\\"\":\r-22240E-010930\r\r \n\n,\r\"q\"\t:\n \n{\n\n\r\r\"\"\r:\t[ ]\t\n}\n\n\n \r,\n \t\"~";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n \\r\\n\\\"\\\\r=%\\\"\\n:\\r[ \\\"#\\\"\\r ]\\r\\r\\t\\n,\\r\\t\\r\\n \\n\\\"\\\\b\\\\/\\\\\\\"\\\":\\r-22240E-010930\\r\\r \\n\\n,\\r\\\"q\\\"\\t:\\n \\n{\\n\\n\\r\\r\\\"\\\"\\r:\\t[ ]\\t\\n}\\n\\n\\n \\r,\\n \\t\\\"~" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_50d238952d280fa4b25b8a54a66c8f84) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// JSON: ' {\r\n \r\t\r\"M\\rs!Uj\\f\\\"\\\\c\\r\"\t\n\r:\t{\t  \"\\\\\":\nnull\n \t  \r,\t \t \"$\"\n\t\r:\rtrue \n\t,\r\r\"\"\n\r\t\r:[\t[\t\rtrue\r\r\r\n\t]\n\n  '
	const char* json = " {\r\n \r\t\r\"M\\rs!Uj\\f\\\"\\\\c\\r\"\t\n\r:\t{\t  \"\\\\\":\nnull\n \t  \r,\t \t \"$\"\n\t\r:\rtrue \n\t,\r\r\"\"\n\r\t\r:[\t[\t\rtrue\r\r\r\n\t]\n\n  ";
	std::cerr << "Plain JSON string from model: " << " {\\r\\n \\r\\t\\r\\\"M\\\\rs!Uj\\\\f\\\\\\\"\\\\\\\\c\\\\r\\\"\\t\\n\\r:\\t{\\t  \\\"\\\\\\\\\\\":\\nnull\\n \\t  \\r,\\t \\t \\\"$\\\"\\n\\t\\r:\\rtrue \\n\\t,\\r\\r\\\"\\\"\\n\\r\\t\\r:[\\t[\\t\\rtrue\\r\\r\\r\\n\\t]\\n\\n  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0aa5ffc8ab3ec8c44ec347dae91bbbd0) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// JSON: '{\r\"\\\\\\/\"\n\t\r:[\r []  ,-10E+0101901 \n]\t\n,\r\r\t\"$\\/S\"\t\t\n:\r true\r\n  \r\t,\r\n\"\\\"C\"\r\r \r  :\r\n\n\t\"\\f\"\n , \r  \"d\" :\"\"'
	const char* json = "{\r\"\\\\\\/\"\n\t\r:[\r []  ,-10E+0101901 \n]\t\n,\r\r\t\"$\\/S\"\t\t\n:\r true\r\n  \r\t,\r\n\"\\\"C\"\r\r \r  :\r\n\n\t\"\\f\"\n , \r  \"d\" :\"\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\\\\\\\\\/\\\"\\n\\t\\r:[\\r []  ,-10E+0101901 \\n]\\t\\n,\\r\\r\\t\\\"$\\\\/S\\\"\\t\\t\\n:\\r true\\r\\n  \\r\\t,\\r\\n\\\"\\\\\\\"C\\\"\\r\\r \\r  :\\r\\n\\n\\t\\\"\\\\f\\\"\\n , \\r  \\\"d\\\" :\\\"\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e312f0c74a12c848897e1f1eb8a0999a) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\t{\n\t\" \\rO\\r)\\\"\":\t{\n\t\r\"~\"\n\r: true}\n, \r\t\"\\\\(\"\t:null, \r\"\\r>\" : \t1950.0, \"\"\r: \" \", \"l>\\\"\":\n\t\r-4E-09\n\r\r,\r'
	const char* json = "\t{\n\t\" \\rO\\r)\\\"\":\t{\n\t\r\"~\"\n\r: true}\n, \r\t\"\\\\(\"\t:null, \r\"\\r>\" : \t1950.0, \"\"\r: \" \", \"l>\\\"\":\n\t\r-4E-09\n\r\r,\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\t\\\" \\\\rO\\\\r)\\\\\\\"\\\":\\t{\\n\\t\\r\\\"~\\\"\\n\\r: true}\\n, \\r\\t\\\"\\\\\\\\(\\\"\\t:null, \\r\\\"\\\\r>\\\" : \\t1950.0, \\\"\\\"\\r: \\\" \\\", \\\"l>\\\\\\\"\\\":\\n\\t\\r-4E-09\\n\\r\\r,\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e202cfccb8365186899970c4297d1fca) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// JSON: '\n\t{\r \"\\f\\/Wqn\"\t: 3110.0 \n, \t\"\\f\\f\\n\\f\"\r:\rtrue  \t\t,\n\n\r\n\n\"\\\\h\"\n\n\t \n:\n\"\\f4\\f1\\\"\\r\\f*\\f+_\" \t ,\t \t\"\\f\"\n\r\n'
	const char* json = "\n\t{\r \"\\f\\/Wqn\"\t: 3110.0 \n, \t\"\\f\\f\\n\\f\"\r:\rtrue  \t\t,\n\n\r\n\n\"\\\\h\"\n\n\t \n:\n\"\\f4\\f1\\\"\\r\\f*\\f+_\" \t ,\t \t\"\\f\"\n\r\n";
	std::cerr << "Plain JSON string from model: " << "\\n\\t{\\r \\\"\\\\f\\\\/Wqn\\\"\\t: 3110.0 \\n, \\t\\\"\\\\f\\\\f\\\\n\\\\f\\\"\\r:\\rtrue  \\t\\t,\\n\\n\\r\\n\\n\\\"\\\\\\\\h\\\"\\n\\n\\t \\n:\\n\\\"\\\\f4\\\\f1\\\\\\\"\\\\r\\\\f*\\\\f+_\\\" \\t ,\\t \\t\\\"\\\\f\\\"\\n\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3d0d9eb0278f2924a50cfcfa3cf91be2) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// JSON: '\n{\r\"\"\t\t\r\t:-0E+05\r,\n \"\\\"\":\tnull\n\r\n,\n \r\r \n\r\">\\t,T\"\r: \rtrue\t  ,\t \"F\"\r\n\t: \r\n-0e+090\r,\t\t\r\n\"`\\r\"\r\r\t\n:\t\t\"%U'
	const char* json = "\n{\r\"\"\t\t\r\t:-0E+05\r,\n \"\\\"\":\tnull\n\r\n,\n \r\r \n\r\">\\t,T\"\r: \rtrue\t  ,\t \"F\"\r\n\t: \r\n-0e+090\r,\t\t\r\n\"`\\r\"\r\r\t\n:\t\t\"%U";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\\"\\\"\\t\\t\\r\\t:-0E+05\\r,\\n \\\"\\\\\\\"\\\":\\tnull\\n\\r\\n,\\n \\r\\r \\n\\r\\\">\\\\t,T\\\"\\r: \\rtrue\\t  ,\\t \\\"F\\\"\\r\\n\\t: \\r\\n-0e+090\\r,\\t\\t\\r\\n\\\"`\\\\r\\\"\\r\\r\\t\\n:\\t\\t\\\"%U" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f49e19b51a8499112c45cf779462cdfe) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// JSON: '\t{\t\"\\r\\r\"\n:[] ,\r\n\n\"\"\r\t:\"\\f*\\b\\b\" \t\n\t\n\n\t\t\n,\n\n\n\r   \r\n\"S\":[ \nnull \r]\n\t ,\t\r\n\n\")_\\fc9\":\n\r-0.0e-0\r,\t  \"3\\t'
	const char* json = "\t{\t\"\\r\\r\"\n:[] ,\r\n\n\"\"\r\t:\"\\f*\\b\\b\" \t\n\t\n\n\t\t\n,\n\n\n\r   \r\n\"S\":[ \nnull \r]\n\t ,\t\r\n\n\")_\\fc9\":\n\r-0.0e-0\r,\t  \"3\\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\\"\\\\r\\\\r\\\"\\n:[] ,\\r\\n\\n\\\"\\\"\\r\\t:\\\"\\\\f*\\\\b\\\\b\\\" \\t\\n\\t\\n\\n\\t\\t\\n,\\n\\n\\n\\r   \\r\\n\\\"S\\\":[ \\nnull \\r]\\n\\t ,\\t\\r\\n\\n\\\")_\\\\fc9\\\":\\n\\r-0.0e-0\\r,\\t  \\\"3\\\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6ea8d160102b1643b85912dc474a4d1c) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\t{\t \"\\/\\n\\t\"\r\n\n:[\n\"\"]\t,\t\r \r  \"\\/\\\\9\\b\\f\"\r\n:true  ,\r\r\"f\":  [\t\r[] \n\r  ]\t\t  ,\"(\\\\\\\\\\b!9\"\r:\"&\"  ,\n\r\"\\/\" '
	const char* json = "\t{\t \"\\/\\n\\t\"\r\n\n:[\n\"\"]\t,\t\r \r  \"\\/\\\\9\\b\\f\"\r\n:true  ,\r\r\"f\":  [\t\r[] \n\r  ]\t\t  ,\"(\\\\\\\\\\b!9\"\r:\"&\"  ,\n\r\"\\/\" ";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t \\\"\\\\/\\\\n\\\\t\\\"\\r\\n\\n:[\\n\\\"\\\"]\\t,\\t\\r \\r  \\\"\\\\/\\\\\\\\9\\\\b\\\\f\\\"\\r\\n:true  ,\\r\\r\\\"f\\\":  [\\t\\r[] \\n\\r  ]\\t\\t  ,\\\"(\\\\\\\\\\\\\\\\\\\\b!9\\\"\\r:\\\"&\\\"  ,\\n\\r\\\"\\\\/\\\" " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ebae69792fefa012f4c34178ffc517bb) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// JSON: '{\t\r\"\"\n\t:{\t\"\\\"\\r\":false  \r\t\t,\n \t \"\\rl\":\t[[]]\n\n}\r \t \n, \r\t\n  \"\\b\"\n\t :\t\ntrue\t\t ,\r\r\n\"7(\": -0E-0\t \t\t, \t\n\"s'
	const char* json = "{\t\r\"\"\n\t:{\t\"\\\"\\r\":false  \r\t\t,\n \t \"\\rl\":\t[[]]\n\n}\r \t \n, \r\t\n  \"\\b\"\n\t :\t\ntrue\t\t ,\r\r\n\"7(\": -0E-0\t \t\t, \t\n\"s";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"\\\"\\n\\t:{\\t\\\"\\\\\\\"\\\\r\\\":false  \\r\\t\\t,\\n \\t \\\"\\\\rl\\\":\\t[[]]\\n\\n}\\r \\t \\n, \\r\\t\\n  \\\"\\\\b\\\"\\n\\t :\\t\\ntrue\\t\\t ,\\r\\r\\n\\\"7(\\\": -0E-0\\t \\t\\t, \\t\\n\\\"s" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_55776cb55db199444236976bcf692ba6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{\n\t\"\\\"T\\n<=!J\\f\":\"\"\t,\r \"\\/\"\n \r \t:\t{\n \t\n\r\"\\\"\\bw\"\t\t\t\r:0 },\t\t\"\\nk,i\"\t\t\r : \n null\t \r\r,\"\\r>\"\r : \t\n61,\t\n\t\t'
	const char* json = "{\n\t\"\\\"T\\n<=!J\\f\":\"\"\t,\r \"\\/\"\n \r \t:\t{\n \t\n\r\"\\\"\\bw\"\t\t\t\r:0 },\t\t\"\\nk,i\"\t\t\r : \n null\t \r\r,\"\\r>\"\r : \t\n61,\t\n\t\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\\"\\\\\\\"T\\\\n<=!J\\\\f\\\":\\\"\\\"\\t,\\r \\\"\\\\/\\\"\\n \\r \\t:\\t{\\n \\t\\n\\r\\\"\\\\\\\"\\\\bw\\\"\\t\\t\\t\\r:0 },\\t\\t\\\"\\\\nk,i\\\"\\t\\t\\r : \\n null\\t \\r\\r,\\\"\\\\r>\\\"\\r : \\t\\n61,\\t\\n\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_196ecb0a564fcaca3be34986d3dba84a) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{\t\n\n\t\"\":\"\\\"v\\b\"\n,\r\r\"\\n\\n\"  :-0\n\n, \n  \t\"\\f\\/\\r\"\n\n:\r\n\ntrue\t\n\t \r\r\r,\r\n\t\t \"\\riq\\\\2\\\\\\t\\f\\\\Ys\\/\"\r:\r-90\t\t ,'
	const char* json = "{\t\n\n\t\"\":\"\\\"v\\b\"\n,\r\r\"\\n\\n\"  :-0\n\n, \n  \t\"\\f\\/\\r\"\n\n:\r\n\ntrue\t\n\t \r\r\r,\r\n\t\t \"\\riq\\\\2\\\\\\t\\f\\\\Ys\\/\"\r:\r-90\t\t ,";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\n\\t\\\"\\\":\\\"\\\\\\\"v\\\\b\\\"\\n,\\r\\r\\\"\\\\n\\\\n\\\"  :-0\\n\\n, \\n  \\t\\\"\\\\f\\\\/\\\\r\\\"\\n\\n:\\r\\n\\ntrue\\t\\n\\t \\r\\r\\r,\\r\\n\\t\\t \\\"\\\\riq\\\\\\\\2\\\\\\\\\\\\t\\\\f\\\\\\\\Ys\\\\/\\\"\\r:\\r-90\\t\\t ," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_11f521abe8fbde8cc4898438047d3894) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// JSON: '{\n\t\r \"\\tJo\\r\\\"5\\rJ@s\\r\\b\\b\\t\\nJ\":\r\n{\t \"\" \t\t\n\t:\"\\/\"\t\t\t }\n,  \t\"<\"\n :false \t ,\"@\"\r:\n\n\r[\r]\t \t,\t\r \n\"\\n\\b\"'
	const char* json = "{\n\t\r \"\\tJo\\r\\\"5\\rJ@s\\r\\b\\b\\t\\nJ\":\r\n{\t \"\" \t\t\n\t:\"\\/\"\t\t\t }\n,  \t\"<\"\n :false \t ,\"@\"\r:\n\n\r[\r]\t \t,\t\r \n\"\\n\\b\"";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\r \\\"\\\\tJo\\\\r\\\\\\\"5\\\\rJ@s\\\\r\\\\b\\\\b\\\\t\\\\nJ\\\":\\r\\n{\\t \\\"\\\" \\t\\t\\n\\t:\\\"\\\\/\\\"\\t\\t\\t }\\n,  \\t\\\"<\\\"\\n :false \\t ,\\\"@\\\"\\r:\\n\\n\\r[\\r]\\t \\t,\\t\\r \\n\\\"\\\\n\\\\b\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ccc315dee798896edd7cf37372515aa7) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{ \t\t \"\" \r\r: 0\t\n \r\r\t\r,\r\r\r \t\r\n\"\\\"P^\\n\\t\"\n:\t0e-080 \r ,\t\"\\b\"\r\r :\n \t{  \t\r\"&\":\r{\n\"\\bv\\n\"\r:-630 \r\n}\n\t\n\n ,\n\t'
	const char* json = "{ \t\t \"\" \r\r: 0\t\n \r\r\t\r,\r\r\r \t\r\n\"\\\"P^\\n\\t\"\n:\t0e-080 \r ,\t\"\\b\"\r\r :\n \t{  \t\r\"&\":\r{\n\"\\bv\\n\"\r:-630 \r\n}\n\t\n\n ,\n\t";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\t \\\"\\\" \\r\\r: 0\\t\\n \\r\\r\\t\\r,\\r\\r\\r \\t\\r\\n\\\"\\\\\\\"P^\\\\n\\\\t\\\"\\n:\\t0e-080 \\r ,\\t\\\"\\\\b\\\"\\r\\r :\\n \\t{  \\t\\r\\\"&\\\":\\r{\\n\\\"\\\\bv\\\\n\\\"\\r:-630 \\r\\n}\\n\\t\\n\\n ,\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5d286c21d0b7ce9b651de7d33acdbf0d) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{ \t \r\t\"%\"\r\r\r:\"\\\\D\" \r ,\n \n\"\\t\\t}k\\\"\"\r\t:[\t] \r\t\r,\t \"\\b\\/\"\r\r\r:null\t\r\n\t ,\t\r\t\"\\\\7-\\n_\"\r \r:\tfalse\r\n\r,\r\"\"\t: '
	const char* json = "{ \t \r\t\"%\"\r\r\r:\"\\\\D\" \r ,\n \n\"\\t\\t}k\\\"\"\r\t:[\t] \r\t\r,\t \"\\b\\/\"\r\r\r:null\t\r\n\t ,\t\r\t\"\\\\7-\\n_\"\r \r:\tfalse\r\n\r,\r\"\"\t: ";
	std::cerr << "Plain JSON string from model: " << "{ \\t \\r\\t\\\"%\\\"\\r\\r\\r:\\\"\\\\\\\\D\\\" \\r ,\\n \\n\\\"\\\\t\\\\t}k\\\\\\\"\\\"\\r\\t:[\\t] \\r\\t\\r,\\t \\\"\\\\b\\\\/\\\"\\r\\r\\r:null\\t\\r\\n\\t ,\\t\\r\\t\\\"\\\\\\\\7-\\\\n_\\\"\\r \\r:\\tfalse\\r\\n\\r,\\r\\\"\\\"\\t: " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bd0401899fad4f66db4adb4713efe594) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// JSON: '\t\n\r{\r\t\"\\r\"\n:\ttrue\r\n,\r\t\n\r\t\"\"\t\r\r:null\n,\"\\t1T\"\t:{\r\n}\r\t,   \n\"\\\"\"\r\r\n:\rnull\r\r\r\r,\r\t\"T\\/\"\n: null\n\n,\r \t\n\r\"\\\\\"'
	const char* json = "\t\n\r{\r\t\"\\r\"\n:\ttrue\r\n,\r\t\n\r\t\"\"\t\r\r:null\n,\"\\t1T\"\t:{\r\n}\r\t,   \n\"\\\"\"\r\r\n:\rnull\r\r\r\r,\r\t\"T\\/\"\n: null\n\n,\r \t\n\r\"\\\\\"";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\r{\\r\\t\\\"\\\\r\\\"\\n:\\ttrue\\r\\n,\\r\\t\\n\\r\\t\\\"\\\"\\t\\r\\r:null\\n,\\\"\\\\t1T\\\"\\t:{\\r\\n}\\r\\t,   \\n\\\"\\\\\\\"\\\"\\r\\r\\n:\\rnull\\r\\r\\r\\r,\\r\\t\\\"T\\\\/\\\"\\n: null\\n\\n,\\r \\t\\n\\r\\\"\\\\\\\\\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e9b14d827c4d70d9a2b1f745850c51ca) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// JSON: ' {\")\" \r \r:false \r\r,\"\":\"\\t\"\r \n,\t\"\\b\\f\\f\" :null \t,\r\n\r\"\\n\\n\\f0\"\t : \n\"\\rK\" \t\n\t\r \t,\"\\nU\\\\H\\nn\" :\t\n \"\\\"\\/\"'
	const char* json = " {\")\" \r \r:false \r\r,\"\":\"\\t\"\r \n,\t\"\\b\\f\\f\" :null \t,\r\n\r\"\\n\\n\\f0\"\t : \n\"\\rK\" \t\n\t\r \t,\"\\nU\\\\H\\nn\" :\t\n \"\\\"\\/\"";
	std::cerr << "Plain JSON string from model: " << " {\\\")\\\" \\r \\r:false \\r\\r,\\\"\\\":\\\"\\\\t\\\"\\r \\n,\\t\\\"\\\\b\\\\f\\\\f\\\" :null \\t,\\r\\n\\r\\\"\\\\n\\\\n\\\\f0\\\"\\t : \\n\\\"\\\\rK\\\" \\t\\n\\t\\r \\t,\\\"\\\\nU\\\\\\\\H\\\\nn\\\" :\\t\\n \\\"\\\\\\\"\\\\/\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_60b00dbb2a79f78b531a8f29703a6ae3) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// JSON: '{\"\\\"\\\\c\"\n \r\t\t :\t\t\t\"d\\f]\\bB\"\n,\n\t\"\":\t{\r\r \r \"\\f\"\t\r\r:\ttrue\n\t\r ,\t\t\r\"\\n#%6\\/\"\r\r \n:\t\r[]\n\n,\r\t\"@A\" :true\n\t\n\n}'
	const char* json = "{\"\\\"\\\\c\"\n \r\t\t :\t\t\t\"d\\f]\\bB\"\n,\n\t\"\":\t{\r\r \r \"\\f\"\t\r\r:\ttrue\n\t\r ,\t\t\r\"\\n#%6\\/\"\r\r \n:\t\r[]\n\n,\r\t\"@A\" :true\n\t\n\n}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\\\\"\\\\\\\\c\\\"\\n \\r\\t\\t :\\t\\t\\t\\\"d\\\\f]\\\\bB\\\"\\n,\\n\\t\\\"\\\":\\t{\\r\\r \\r \\\"\\\\f\\\"\\t\\r\\r:\\ttrue\\n\\t\\r ,\\t\\t\\r\\\"\\\\n#%6\\\\/\\\"\\r\\r \\n:\\t\\r[]\\n\\n,\\r\\t\\\"@A\\\" :true\\n\\t\\n\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a0842baa2a7f4ed1c52631b9b709ff04) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// JSON: '\t \n{\r\t\t\"\\r!\":\t \rnull \n\r\n\n,\r\n\t\n \"\\b\" :\nnull\r\n \r,\t\t\r\t\n\"\" \n:\r[\r]\n\r, \r  \"9\":\t  true ,\n\t\"\\f\\tk\":false\t\t\n\r'
	const char* json = "\t \n{\r\t\t\"\\r!\":\t \rnull \n\r\n\n,\r\n\t\n \"\\b\" :\nnull\r\n \r,\t\t\r\t\n\"\" \n:\r[\r]\n\r, \r  \"9\":\t  true ,\n\t\"\\f\\tk\":false\t\t\n\r";
	std::cerr << "Plain JSON string from model: " << "\\t \\n{\\r\\t\\t\\\"\\\\r!\\\":\\t \\rnull \\n\\r\\n\\n,\\r\\n\\t\\n \\\"\\\\b\\\" :\\nnull\\r\\n \\r,\\t\\t\\r\\t\\n\\\"\\\" \\n:\\r[\\r]\\n\\r, \\r  \\\"9\\\":\\t  true ,\\n\\t\\\"\\\\f\\\\tk\\\":false\\t\\t\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8e7dbdfa2a08de01d942401839e8c503) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// JSON: '\n{\r\n\"\"\t\r:true\n \r,\t \n\n\"\\n\\nl\" \n  :\"z'\\n\" \r,\n\t\".\":true\t,\r\"G?\" \t\t:\r\r 6\n\r\r\r, \n\"{a\":  \r[\r{} ],\n\n \"G#\": \"g'
	const char* json = "\n{\r\n\"\"\t\r:true\n \r,\t \n\n\"\\n\\nl\" \n  :\"z'\\n\" \r,\n\t\".\":true\t,\r\"G?\" \t\t:\r\r 6\n\r\r\r, \n\"{a\":  \r[\r{} ],\n\n \"G#\": \"g";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\n\\\"\\\"\\t\\r:true\\n \\r,\\t \\n\\n\\\"\\\\n\\\\nl\\\" \\n  :\\\"z'\\\\n\\\" \\r,\\n\\t\\\".\\\":true\\t,\\r\\\"G?\\\" \\t\\t:\\r\\r 6\\n\\r\\r\\r, \\n\\\"{a\\\":  \\r[\\r{} ],\\n\\n \\\"G#\\\": \\\"g" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a6eefa4bae8bea687a04460d6ef6c2e0) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\r\n{\n\t\"\":{}\t\t\n,\r\t\n\"VgW\\b\\\\\\\"mif\\\\M[}\" : false \r\n,\"6\" \r:false\t\t\n,\n\r\"(d\\f\" \t\r\r\r\t:\ntrue \n \t, \t   \")\"\t\t:\t-'
	const char* json = "\r\n{\n\t\"\":{}\t\t\n,\r\t\n\"VgW\\b\\\\\\\"mif\\\\M[}\" : false \r\n,\"6\" \r:false\t\t\n,\n\r\"(d\\f\" \t\r\r\r\t:\ntrue \n \t, \t   \")\"\t\t:\t-";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\n\\t\\\"\\\":{}\\t\\t\\n,\\r\\t\\n\\\"VgW\\\\b\\\\\\\\\\\\\\\"mif\\\\\\\\M[}\\\" : false \\r\\n,\\\"6\\\" \\r:false\\t\\t\\n,\\n\\r\\\"(d\\\\f\\\" \\t\\r\\r\\r\\t:\\ntrue \\n \\t, \\t   \\\")\\\"\\t\\t:\\t-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4f0df64df75505a691263307562c1f74) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// JSON: '{ \n\"\"\n\t:\r \n{\t}\r,\t\t\n\"\\rs<\\\\\\f\" \n:\n-0e0\t\t,\t \"\\b\":true\t\n\r\n \t\n ,  \t\"\\f\\te{>-~\\b\\f\\fQ\\r\\\\\" \t:\r\t\r-0.020\t,\"'
	const char* json = "{ \n\"\"\n\t:\r \n{\t}\r,\t\t\n\"\\rs<\\\\\\f\" \n:\n-0e0\t\t,\t \"\\b\":true\t\n\r\n \t\n ,  \t\"\\f\\te{>-~\\b\\f\\fQ\\r\\\\\" \t:\r\t\r-0.020\t,\"";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\"\\n\\t:\\r \\n{\\t}\\r,\\t\\t\\n\\\"\\\\rs<\\\\\\\\\\\\f\\\" \\n:\\n-0e0\\t\\t,\\t \\\"\\\\b\\\":true\\t\\n\\r\\n \\t\\n ,  \\t\\\"\\\\f\\\\te{>-~\\\\b\\\\f\\\\fQ\\\\r\\\\\\\\\\\" \\t:\\r\\t\\r-0.020\\t,\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5db50d640048f11bbbd59ab0fda58321) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// JSON: '\t {\t\t\n\"\\b\"\r: \t\rnull,\r\"\":\ttrue\r,\t\n\"y\":false\n\r ,\n\r\t \"7\\n\"\n :\"\\n\",\"\\\\\":\n[ \tnull\n\t\r]\n\t\t \r,\n\t \n\"p\"\r\t\n :0E-'
	const char* json = "\t {\t\t\n\"\\b\"\r: \t\rnull,\r\"\":\ttrue\r,\t\n\"y\":false\n\r ,\n\r\t \"7\\n\"\n :\"\\n\",\"\\\\\":\n[ \tnull\n\t\r]\n\t\t \r,\n\t \n\"p\"\r\t\n :0E-";
	std::cerr << "Plain JSON string from model: " << "\\t {\\t\\t\\n\\\"\\\\b\\\"\\r: \\t\\rnull,\\r\\\"\\\":\\ttrue\\r,\\t\\n\\\"y\\\":false\\n\\r ,\\n\\r\\t \\\"7\\\\n\\\"\\n :\\\"\\\\n\\\",\\\"\\\\\\\\\\\":\\n[ \\tnull\\n\\t\\r]\\n\\t\\t \\r,\\n\\t \\n\\\"p\\\"\\r\\t\\n :0E-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_57f12ac9db37dfb8b20d78aac79bf6c5) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// JSON: '\n\n{\t\"v~\":\n\r\nnull,\n\n\n\"\":\n-0.0\r ,\t\r \n\"l\\/\"\t \r:null\n , \t\r\t\n\"T[\"\r:{}\r\r,\r\n\t\r\"i\"\t\n\n: [ ],\t\r\t\n\"\\n\":\t\"*\\b\"\r\n'
	const char* json = "\n\n{\t\"v~\":\n\r\nnull,\n\n\n\"\":\n-0.0\r ,\t\r \n\"l\\/\"\t \r:null\n , \t\r\t\n\"T[\"\r:{}\r\r,\r\n\t\r\"i\"\t\n\n: [ ],\t\r\t\n\"\\n\":\t\"*\\b\"\r\n";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{\\t\\\"v~\\\":\\n\\r\\nnull,\\n\\n\\n\\\"\\\":\\n-0.0\\r ,\\t\\r \\n\\\"l\\\\/\\\"\\t \\r:null\\n , \\t\\r\\t\\n\\\"T[\\\"\\r:{}\\r\\r,\\r\\n\\t\\r\\\"i\\\"\\t\\n\\n: [ ],\\t\\r\\t\\n\\\"\\\\n\\\":\\t\\\"*\\\\b\\\"\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_378589938bc58066f38a88fa676a88c6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '{\t\"\":true\n \n,\n \n \"xB\\n\"\t \t: null\t\t ,\r\n\t\n\r \"\\b\\f\\/+Hv\\/\\t\\r\"\t\t\t :\n\r\r-0e098\r,\t\n\"\\f\"\r \t\n\r:\nfalse \n\t\n\r, '
	const char* json = "{\t\"\":true\n \n,\n \n \"xB\\n\"\t \t: null\t\t ,\r\n\t\n\r \"\\b\\f\\/+Hv\\/\\t\\r\"\t\t\t :\n\r\r-0e098\r,\t\n\"\\f\"\r \t\n\r:\nfalse \n\t\n\r, ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\":true\\n \\n,\\n \\n \\\"xB\\\\n\\\"\\t \\t: null\\t\\t ,\\r\\n\\t\\n\\r \\\"\\\\b\\\\f\\\\/+Hv\\\\/\\\\t\\\\r\\\"\\t\\t\\t :\\n\\r\\r-0e098\\r,\\t\\n\\\"\\\\f\\\"\\r \\t\\n\\r:\\nfalse \\n\\t\\n\\r, " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f8ea5cdd218f26221266f57afde903bf) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// CloseElements
	// JSON: '{\t\n\r\r\r\t\"U\" \t\r:\rtrue\r\n\t\t\r, \n\t \"\\/\\n \\r\"\r\n\n\r\n\n: {} \r\r,\r\"\\nW\"\n\n:\tnull\r, \n\"\":0.0\n \n,  \"\\r\\/\"\n\n\r:[\t\r\";k)\"'
	const char* json = "{\t\n\r\r\r\t\"U\" \t\r:\rtrue\r\n\t\t\r, \n\t \"\\/\\n \\r\"\r\n\n\r\n\n: {} \r\r,\r\"\\nW\"\n\n:\tnull\r, \n\"\":0.0\n \n,  \"\\r\\/\"\n\n\r:[\t\r\";k)\"";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\r\\r\\r\\t\\\"U\\\" \\t\\r:\\rtrue\\r\\n\\t\\t\\r, \\n\\t \\\"\\\\/\\\\n \\\\r\\\"\\r\\n\\n\\r\\n\\n: {} \\r\\r,\\r\\\"\\\\nW\\\"\\n\\n:\\tnull\\r, \\n\\\"\\\":0.0\\n \\n,  \\\"\\\\r\\\\/\\\"\\n\\n\\r:[\\t\\r\\\";k)\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e491dcd4b1b7c412845de6a359ccf266) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '\t\r{ \t\"\\t>x7\"\n\r :\t \tfalse\t ,\t\t\t\n\r\"\": \ttrue \r\t\r\r,\"\\r-+\\t+\"\n\n: true\t,\t\n\"`\":\"\\b\\tJ\\n\" ,\"\\\\\"\n\r:{}\n\t,\t\t\"\\\\'
	const char* json = "\t\r{ \t\"\\t>x7\"\n\r :\t \tfalse\t ,\t\t\t\n\r\"\": \ttrue \r\t\r\r,\"\\r-+\\t+\"\n\n: true\t,\t\n\"`\":\"\\b\\tJ\\n\" ,\"\\\\\"\n\r:{}\n\t,\t\t\"\\\\";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{ \\t\\\"\\\\t>x7\\\"\\n\\r :\\t \\tfalse\\t ,\\t\\t\\t\\n\\r\\\"\\\": \\ttrue \\r\\t\\r\\r,\\\"\\\\r-+\\\\t+\\\"\\n\\n: true\\t,\\t\\n\\\"`\\\":\\\"\\\\b\\\\tJ\\\\n\\\" ,\\\"\\\\\\\\\\\"\\n\\r:{}\\n\\t,\\t\\t\\\"\\\\\\\\" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_05dd0a3f51fc1612e00d7505af0bdb60) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// JSON: '{\n\r\n\"H\\b\" :null\r, \n\t\r\"\\\\A8\": {\r  \"\\n\"\t\t\n\n\r:null\n,\"\"\r\t\t:false\t,\"\\nNc\\\"\\b\\n?3t\":null\n \t\t}\n,\"{\\r\"\r:\r[\n]'
	const char* json = "{\n\r\n\"H\\b\" :null\r, \n\t\r\"\\\\A8\": {\r  \"\\n\"\t\t\n\n\r:null\n,\"\"\r\t\t:false\t,\"\\nNc\\\"\\b\\n?3t\":null\n \t\t}\n,\"{\\r\"\r:\r[\n]";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\n\\\"H\\\\b\\\" :null\\r, \\n\\t\\r\\\"\\\\\\\\A8\\\": {\\r  \\\"\\\\n\\\"\\t\\t\\n\\n\\r:null\\n,\\\"\\\"\\r\\t\\t:false\\t,\\\"\\\\nNc\\\\\\\"\\\\b\\\\n?3t\\\":null\\n \\t\\t}\\n,\\\"{\\\\r\\\"\\r:\\r[\\n]" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ebb5d60b7413efb317472b417ba351b4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// JSON: ' \r\n{\n\t\t\n\n\"x\\t0\\td\":\n\r \"\\\"\",\n\r\"\\\"\\/Er\\bno*\\n\":\n\t\tfalse\t\r\n\n,\r \t\"\":{\t\t\r\t \t\n \"\\\"Axe\\b\"\t \r\r:true\t\t, \r\r\r\"A'
	const char* json = " \r\n{\n\t\t\n\n\"x\\t0\\td\":\n\r \"\\\"\",\n\r\"\\\"\\/Er\\bno*\\n\":\n\t\tfalse\t\r\n\n,\r \t\"\":{\t\t\r\t \t\n \"\\\"Axe\\b\"\t \r\r:true\t\t, \r\r\r\"A";
	std::cerr << "Plain JSON string from model: " << " \\r\\n{\\n\\t\\t\\n\\n\\\"x\\\\t0\\\\td\\\":\\n\\r \\\"\\\\\\\"\\\",\\n\\r\\\"\\\\\\\"\\\\/Er\\\\bno*\\\\n\\\":\\n\\t\\tfalse\\t\\r\\n\\n,\\r \\t\\\"\\\":{\\t\\t\\r\\t \\t\\n \\\"\\\\\\\"Axe\\\\b\\\"\\t \\r\\r:true\\t\\t, \\r\\r\\r\\\"A" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ace4202a5d190afef936776be01f6a5a) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n{\n\t  \t\"\\nCa\"\n\t:\tnull,\t\"e9h\":false\n\r,\"\\nd?\\r\\t\"\r\n:null\n\r\n,\"\\b\"\r:false,\r\"\\b\\n\"\n\r:false ,\r\n\t\"y6\\f\"\r\n\t:'
	const char* json = "\n{\n\t  \t\"\\nCa\"\n\t:\tnull,\t\"e9h\":false\n\r,\"\\nd?\\r\\t\"\r\n:null\n\r\n,\"\\b\"\r:false,\r\"\\b\\n\"\n\r:false ,\r\n\t\"y6\\f\"\r\n\t:";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\t  \\t\\\"\\\\nCa\\\"\\n\\t:\\tnull,\\t\\\"e9h\\\":false\\n\\r,\\\"\\\\nd?\\\\r\\\\t\\\"\\r\\n:null\\n\\r\\n,\\\"\\\\b\\\"\\r:false,\\r\\\"\\\\b\\\\n\\\"\\n\\r:false ,\\r\\n\\t\\\"y6\\\\f\\\"\\r\\n\\t:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7f70de7827a2529927b70e0aa5d2b4de) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// JSON: '\t{\n\"\":\t\nnull \r,\r \r\n\r\"q\\r\\/\\t#\"  \r\n:false\n \n \r, \r\t\"\\nzP\\rKo\\tUz\" \r\t\r\t:\t\nfalse\r\r\r\r\t,\r \r\"\\t\\f\\r\\f|\"\t:\t7'
	const char* json = "\t{\n\"\":\t\nnull \r,\r \r\n\r\"q\\r\\/\\t#\"  \r\n:false\n \n \r, \r\t\"\\nzP\\rKo\\tUz\" \r\t\r\t:\t\nfalse\r\r\r\r\t,\r \r\"\\t\\f\\r\\f|\"\t:\t7";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\\"\\\":\\t\\nnull \\r,\\r \\r\\n\\r\\\"q\\\\r\\\\/\\\\t#\\\"  \\r\\n:false\\n \\n \\r, \\r\\t\\\"\\\\nzP\\\\rKo\\\\tUz\\\" \\r\\t\\r\\t:\\t\\nfalse\\r\\r\\r\\r\\t,\\r \\r\\\"\\\\t\\\\f\\\\r\\\\f|\\\"\\t:\\t7" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cc53b18f30cce3fe19ab5627c5436fc8) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\n\r\r\"\"\t\r\r:\rfalse \n\t\r ,\n\n\"\\tM%9\\n\"\n\n  :\n-0\t,\r\r\"8Fk.\"\n\n\r:[ \r]\t\t\t\t,\n\n\r\r\"\\/\\b\"\r:\n  true\t   ,\t\t\n\"~@\"\r \n:\n-'
	const char* json = "{\n\r\r\"\"\t\r\r:\rfalse \n\t\r ,\n\n\"\\tM%9\\n\"\n\n  :\n-0\t,\r\r\"8Fk.\"\n\n\r:[ \r]\t\t\t\t,\n\n\r\r\"\\/\\b\"\r:\n  true\t   ,\t\t\n\"~@\"\r \n:\n-";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\r\\\"\\\"\\t\\r\\r:\\rfalse \\n\\t\\r ,\\n\\n\\\"\\\\tM%9\\\\n\\\"\\n\\n  :\\n-0\\t,\\r\\r\\\"8Fk.\\\"\\n\\n\\r:[ \\r]\\t\\t\\t\\t,\\n\\n\\r\\r\\\"\\\\/\\\\b\\\"\\r:\\n  true\\t   ,\\t\\t\\n\\\"~@\\\"\\r \\n:\\n-" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e422eb99b80473d099d27ac93cb5bfc3) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\n{\n \n \"i\\\\\\f9J$\\t>\"\r:false\r\t,\t\"^\" \t\t:-0.0 \n \r,\n\"\\\\\\fY\"\r:null  \r,\"\": \t\n[]\r,\">\\rJ\"\r:\n-0.070701e0\n\r\n\t\t,'
	const char* json = "\n{\n \n \"i\\\\\\f9J$\\t>\"\r:false\r\t,\t\"^\" \t\t:-0.0 \n \r,\n\"\\\\\\fY\"\r:null  \r,\"\": \t\n[]\r,\">\\rJ\"\r:\n-0.070701e0\n\r\n\t\t,";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n \\n \\\"i\\\\\\\\\\\\f9J$\\\\t>\\\"\\r:false\\r\\t,\\t\\\"^\\\" \\t\\t:-0.0 \\n \\r,\\n\\\"\\\\\\\\\\\\fY\\\"\\r:null  \\r,\\\"\\\": \\t\\n[]\\r,\\\">\\\\rJ\\\"\\r:\\n-0.070701e0\\n\\r\\n\\t\\t," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7d8b19683b1d2617eaec9fca805f4bd2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// JSON: '\n\r\n{\t\r \"\"\r: \t \tfalse  \t,\r\t\r \"FLg\\n+\"\r\t  \t:\t[ \n\r\nnull,-54,true\t ]\r,\r\n\t\n\n\r\"`w\\/\\t\\f\\f*\"\t\t\n:-0E+0\n,\"lH|'
	const char* json = "\n\r\n{\t\r \"\"\r: \t \tfalse  \t,\r\t\r \"FLg\\n+\"\r\t  \t:\t[ \n\r\nnull,-54,true\t ]\r,\r\n\t\n\n\r\"`w\\/\\t\\f\\f*\"\t\t\n:-0E+0\n,\"lH|";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\n{\\t\\r \\\"\\\"\\r: \\t \\tfalse  \\t,\\r\\t\\r \\\"FLg\\\\n+\\\"\\r\\t  \\t:\\t[ \\n\\r\\nnull,-54,true\\t ]\\r,\\r\\n\\t\\n\\n\\r\\\"`w\\\\/\\\\t\\\\f\\\\f*\\\"\\t\\t\\n:-0E+0\\n,\\\"lH|" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_97b086c87bc9cc3a91e68508a1fd84c8) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// JSON: '{\"~\\f\"\r:-20E0\r \r\t\n\r, \n\"\\\"\":\n[\n] ,\"EB>K\\\\0\"\r:null\t\r ,\r\t \"g\\\"'\\n\" \r :  \nfalse \r \r\r,\t\t\n\t\n\r  \"\":\t true\r '
	const char* json = "{\"~\\f\"\r:-20E0\r \r\t\n\r, \n\"\\\"\":\n[\n] ,\"EB>K\\\\0\"\r:null\t\r ,\r\t \"g\\\"'\\n\" \r :  \nfalse \r \r\r,\t\t\n\t\n\r  \"\":\t true\r ";
	std::cerr << "Plain JSON string from model: " << "{\\\"~\\\\f\\\"\\r:-20E0\\r \\r\\t\\n\\r, \\n\\\"\\\\\\\"\\\":\\n[\\n] ,\\\"EB>K\\\\\\\\0\\\"\\r:null\\t\\r ,\\r\\t \\\"g\\\\\\\"'\\\\n\\\" \\r :  \\nfalse \\r \\r\\r,\\t\\t\\n\\t\\n\\r  \\\"\\\":\\t true\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8deb92cd31f0522b6ba18d526bb01b4d) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\r {\t \t\"\":null\n\r\n\n\n,\n\"8\\\\{\\/'x\":{\"\\f\"\r\n\t:true \r,\n\t\"\\r\\n\"\n\n:\r\t\t\"4\\/\"\n\t,\n \t\"\\r\"\n:\t{}\r\n\t},   \n\"\\b\\\\\"   :'
	const char* json = "\r {\t \t\"\":null\n\r\n\n\n,\n\"8\\\\{\\/'x\":{\"\\f\"\r\n\t:true \r,\n\t\"\\r\\n\"\n\n:\r\t\t\"4\\/\"\n\t,\n \t\"\\r\"\n:\t{}\r\n\t},   \n\"\\b\\\\\"   :";
	std::cerr << "Plain JSON string from model: " << "\\r {\\t \\t\\\"\\\":null\\n\\r\\n\\n\\n,\\n\\\"8\\\\\\\\{\\\\/'x\\\":{\\\"\\\\f\\\"\\r\\n\\t:true \\r,\\n\\t\\\"\\\\r\\\\n\\\"\\n\\n:\\r\\t\\t\\\"4\\\\/\\\"\\n\\t,\\n \\t\\\"\\\\r\\\"\\n:\\t{}\\r\\n\\t},   \\n\\\"\\\\b\\\\\\\\\\\"   :" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5263447db0810a9ba0ac727fe0b5b5a0) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// JSON: '{\r\t\"\\nc\\\"#\"\n\t\r: \rfalse, \r \"\"\n\r\n\r:\t  false\t,\t\t\"$F\\r\\\\ \\nc\\n\\nN\":\"Q\\f\"\t \r, \"s\\n\" :[\t]\n\r\r,\t\"bz\"\t\r\r\r\t: \"'
	const char* json = "{\r\t\"\\nc\\\"#\"\n\t\r: \rfalse, \r \"\"\n\r\n\r:\t  false\t,\t\t\"$F\\r\\\\ \\nc\\n\\nN\":\"Q\\f\"\t \r, \"s\\n\" :[\t]\n\r\r,\t\"bz\"\t\r\r\r\t: \"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"\\\\nc\\\\\\\"#\\\"\\n\\t\\r: \\rfalse, \\r \\\"\\\"\\n\\r\\n\\r:\\t  false\\t,\\t\\t\\\"$F\\\\r\\\\\\\\ \\\\nc\\\\n\\\\nN\\\":\\\"Q\\\\f\\\"\\t \\r, \\\"s\\\\n\\\" :[\\t]\\n\\r\\r,\\t\\\"bz\\\"\\t\\r\\r\\r\\t: \\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0e18298e3a6e2b17e4355a0c2b1f7db9) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// JSON: '{\r\"\\\"\\r1+;\\b\":true\n  \r,\r\"2YC\":\ttrue\r\t\t ,\n\"\"\t:\n\n\n\"_\"\t\n\n, \n \"\\r7\\fR\\\"\\n\\/\\\"`\\b\\n\"\n\r :\r{ \"-\"\r\t:\t\t\rfalse'
	const char* json = "{\r\"\\\"\\r1+;\\b\":true\n  \r,\r\"2YC\":\ttrue\r\t\t ,\n\"\"\t:\n\n\n\"_\"\t\n\n, \n \"\\r7\\fR\\\"\\n\\/\\\"`\\b\\n\"\n\r :\r{ \"-\"\r\t:\t\t\rfalse";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\\\\"\\\\r1+;\\\\b\\\":true\\n  \\r,\\r\\\"2YC\\\":\\ttrue\\r\\t\\t ,\\n\\\"\\\"\\t:\\n\\n\\n\\\"_\\\"\\t\\n\\n, \\n \\\"\\\\r7\\\\fR\\\\\\\"\\\\n\\\\/\\\\\\\"`\\\\b\\\\n\\\"\\n\\r :\\r{ \\\"-\\\"\\r\\t:\\t\\t\\rfalse" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_049c5eb88cd32a762d10d2144936ac41) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// JSON: '\r\t\t{\t \n\t\"\":0 \n , \"CF\"\n:{}\n,\n\r\t\"\\n\" :\r\t\tnull\n,\r\n \")\\/S\\\\Wj\\n\"\r: \r\nnull \n, \t\n\"\\/\\b\\/\"\r: \r{\"\\n\\\\\"\r:{ \n}'
	const char* json = "\r\t\t{\t \n\t\"\":0 \n , \"CF\"\n:{}\n,\n\r\t\"\\n\" :\r\t\tnull\n,\r\n \")\\/S\\\\Wj\\n\"\r: \r\nnull \n, \t\n\"\\/\\b\\/\"\r: \r{\"\\n\\\\\"\r:{ \n}";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\t{\\t \\n\\t\\\"\\\":0 \\n , \\\"CF\\\"\\n:{}\\n,\\n\\r\\t\\\"\\\\n\\\" :\\r\\t\\tnull\\n,\\r\\n \\\")\\\\/S\\\\\\\\Wj\\\\n\\\"\\r: \\r\\nnull \\n, \\t\\n\\\"\\\\/\\\\b\\\\/\\\"\\r: \\r{\\\"\\\\n\\\\\\\\\\\"\\r:{ \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_22b7d3abebf3b7231cc6aec6ac881a2e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// JSON: ' \t {\n\r\r\"\\n\\n\\\"\"\n:\tfalse\n,\t\t\n \n\"h\"\n\n:-0.065\n,\r\t \t\"\\t\\b\":\r\t null\n\t,\r\n\"~\":true\r \r,\t\n\"\" \r:\"\\/\\n\"\r ,\n\t\"p)'
	const char* json = " \t {\n\r\r\"\\n\\n\\\"\"\n:\tfalse\n,\t\t\n \n\"h\"\n\n:-0.065\n,\r\t \t\"\\t\\b\":\r\t null\n\t,\r\n\"~\":true\r \r,\t\n\"\" \r:\"\\/\\n\"\r ,\n\t\"p)";
	std::cerr << "Plain JSON string from model: " << " \\t {\\n\\r\\r\\\"\\\\n\\\\n\\\\\\\"\\\"\\n:\\tfalse\\n,\\t\\t\\n \\n\\\"h\\\"\\n\\n:-0.065\\n,\\r\\t \\t\\\"\\\\t\\\\b\\\":\\r\\t null\\n\\t,\\r\\n\\\"~\\\":true\\r \\r,\\t\\n\\\"\\\" \\r:\\\"\\\\/\\\\n\\\"\\r ,\\n\\t\\\"p)" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c19638d81b95d6c934cefdf5147a2a89) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '  {\t \n\"\\n\\b\\r\" \t:[]\r\t\n,\r\n\n\r\r \"\\t\\\\\\b\\f\\f\\r\"\n\n:null\r\n\t,\n\t\n\r\t\"\\\"\"\n\t\n:-7\t,\t\r\"\": \rnull\t\t\n ,\"\\b\":null\n,\r\n'
	const char* json = "  {\t \n\"\\n\\b\\r\" \t:[]\r\t\n,\r\n\n\r\r \"\\t\\\\\\b\\f\\f\\r\"\n\n:null\r\n\t,\n\t\n\r\t\"\\\"\"\n\t\n:-7\t,\t\r\"\": \rnull\t\t\n ,\"\\b\":null\n,\r\n";
	std::cerr << "Plain JSON string from model: " << "  {\\t \\n\\\"\\\\n\\\\b\\\\r\\\" \\t:[]\\r\\t\\n,\\r\\n\\n\\r\\r \\\"\\\\t\\\\\\\\\\\\b\\\\f\\\\f\\\\r\\\"\\n\\n:null\\r\\n\\t,\\n\\t\\n\\r\\t\\\"\\\\\\\"\\\"\\n\\t\\n:-7\\t,\\t\\r\\\"\\\": \\rnull\\t\\t\\n ,\\\"\\\\b\\\":null\\n,\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5d985c51094393c5cc6da984a7d6a324) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// JSON: '\t{\r\n\"\\fc\\n\\\"J*\\tK\"\t\n:\tfalse \t\t\r, \r\"\\r0\":null\n\r\r,\r\"\\\\\\r\\\"\":\n\rtrue \n,\"\\fG%\\tp#\"\r\t:false\t\t\t\r, \"\"\r:\t -0\r'
	const char* json = "\t{\r\n\"\\fc\\n\\\"J*\\tK\"\t\n:\tfalse \t\t\r, \r\"\\r0\":null\n\r\r,\r\"\\\\\\r\\\"\":\n\rtrue \n,\"\\fG%\\tp#\"\r\t:false\t\t\t\r, \"\"\r:\t -0\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\n\\\"\\\\fc\\\\n\\\\\\\"J*\\\\tK\\\"\\t\\n:\\tfalse \\t\\t\\r, \\r\\\"\\\\r0\\\":null\\n\\r\\r,\\r\\\"\\\\\\\\\\\\r\\\\\\\"\\\":\\n\\rtrue \\n,\\\"\\\\fG%\\\\tp#\\\"\\r\\t:false\\t\\t\\t\\r, \\\"\\\"\\r:\\t -0\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e0af74d0fced7aa490ec25b3b7a1960d) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// JSON: '{\t\n\r \" l\"\t\n:\n\ntrue\r\n\r, \t\"\" \n\r\t:\nnull\n\t\r,\"\\\"\\\"\\f\\\"\\n\\b\\b*`\\/Y\\/\\b\\naBp\"\r:false\t\n\t,\t\t\t\"\\t\":{\r\"\\t\\/3\"\n\n'
	const char* json = "{\t\n\r \" l\"\t\n:\n\ntrue\r\n\r, \t\"\" \n\r\t:\nnull\n\t\r,\"\\\"\\\"\\f\\\"\\n\\b\\b*`\\/Y\\/\\b\\naBp\"\r:false\t\n\t,\t\t\t\"\\t\":{\r\"\\t\\/3\"\n\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\r \\\" l\\\"\\t\\n:\\n\\ntrue\\r\\n\\r, \\t\\\"\\\" \\n\\r\\t:\\nnull\\n\\t\\r,\\\"\\\\\\\"\\\\\\\"\\\\f\\\\\\\"\\\\n\\\\b\\\\b*`\\\\/Y\\\\/\\\\b\\\\naBp\\\"\\r:false\\t\\n\\t,\\t\\t\\t\\\"\\\\t\\\":{\\r\\\"\\\\t\\\\/3\\\"\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_93214e30f1dad94d81e250e18c8da817) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// JSON: '{\r\r\"\\/\\/ BV\\\\\" \r :true\n,\r \r\r\"8\\b\\b\\t\\t\\t\\nl\\\"\"\t:\t\"y\\/\"  ,\r\r\t\"\"\t:[\t]\r\n,\t\"c\"\n:\"\\fH\", \"\\/M$A\":-0e-0\r,\"E'
	const char* json = "{\r\r\"\\/\\/ BV\\\\\" \r :true\n,\r \r\r\"8\\b\\b\\t\\t\\t\\nl\\\"\"\t:\t\"y\\/\"  ,\r\r\t\"\"\t:[\t]\r\n,\t\"c\"\n:\"\\fH\", \"\\/M$A\":-0e-0\r,\"E";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\\"\\\\/\\\\/ BV\\\\\\\\\\\" \\r :true\\n,\\r \\r\\r\\\"8\\\\b\\\\b\\\\t\\\\t\\\\t\\\\nl\\\\\\\"\\\"\\t:\\t\\\"y\\\\/\\\"  ,\\r\\r\\t\\\"\\\"\\t:[\\t]\\r\\n,\\t\\\"c\\\"\\n:\\\"\\\\fH\\\", \\\"\\\\/M$A\\\":-0e-0\\r,\\\"E" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e70a7a06a4a9dacf6799bcf75b2f6c43) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '   {\t\r\n\t\"\"\t:\t \r{}\t \r \t,\r\"\\/\\n\\f\\bN\\b\"\t\t:\n  {\t\r}\r\t\n,\n\t \"\\f\\n\"\t :\t\"}\\\\\",\n\r\r\"e7\"\r:true\n\r,\"]\\\\\\bkP\"\r \r:\n'
	const char* json = "   {\t\r\n\t\"\"\t:\t \r{}\t \r \t,\r\"\\/\\n\\f\\bN\\b\"\t\t:\n  {\t\r}\r\t\n,\n\t \"\\f\\n\"\t :\t\"}\\\\\",\n\r\r\"e7\"\r:true\n\r,\"]\\\\\\bkP\"\r \r:\n";
	std::cerr << "Plain JSON string from model: " << "   {\\t\\r\\n\\t\\\"\\\"\\t:\\t \\r{}\\t \\r \\t,\\r\\\"\\\\/\\\\n\\\\f\\\\bN\\\\b\\\"\\t\\t:\\n  {\\t\\r}\\r\\t\\n,\\n\\t \\\"\\\\f\\\\n\\\"\\t :\\t\\\"}\\\\\\\\\\\",\\n\\r\\r\\\"e7\\\"\\r:true\\n\\r,\\\"]\\\\\\\\\\\\bkP\\\"\\r \\r:\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8254bcdcc5072913155d123a5bb5a070) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// JSON: '\r{\r\t\n\"\\f\\\"'\\\"\"\n:\n\r\n\n-92e-0 , \t\"*\\\\\\\\\" :\n\"\\\"\\b\"\r \t\t\n \n\t, \r\n\t\"\"\r:-0E+0\t\n,\t  \"9e(~\\t\":false\r\n\r\t,\r  \n\r \"'
	const char* json = "\r{\r\t\n\"\\f\\\"'\\\"\"\n:\n\r\n\n-92e-0 , \t\"*\\\\\\\\\" :\n\"\\\"\\b\"\r \t\t\n \n\t, \r\n\t\"\"\r:-0E+0\t\n,\t  \"9e(~\\t\":false\r\n\r\t,\r  \n\r \"";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\t\\n\\\"\\\\f\\\\\\\"'\\\\\\\"\\\"\\n:\\n\\r\\n\\n-92e-0 , \\t\\\"*\\\\\\\\\\\\\\\\\\\" :\\n\\\"\\\\\\\"\\\\b\\\"\\r \\t\\t\\n \\n\\t, \\r\\n\\t\\\"\\\"\\r:-0E+0\\t\\n,\\t  \\\"9e(~\\\\t\\\":false\\r\\n\\r\\t,\\r  \\n\\r \\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a4c27e595d25d9419ce01c2c29152b11) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// JSON: '{\r\"\"\r  :\rtrue\r\t\t\t\n\t,\t\n\"a\\rN\\fH8\\/s\\rfw\\n\"\n  :[]\r\r ,\t\t\r \"\\b\\n\"\n\t  :\t\t-50E+0\t\r\r,\n\r\"\\r\\\"\\\"\\\\\"\r:false\t  '
	const char* json = "{\r\"\"\r  :\rtrue\r\t\t\t\n\t,\t\n\"a\\rN\\fH8\\/s\\rfw\\n\"\n  :[]\r\r ,\t\t\r \"\\b\\n\"\n\t  :\t\t-50E+0\t\r\r,\n\r\"\\r\\\"\\\"\\\\\"\r:false\t  ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\r  :\\rtrue\\r\\t\\t\\t\\n\\t,\\t\\n\\\"a\\\\rN\\\\fH8\\\\/s\\\\rfw\\\\n\\\"\\n  :[]\\r\\r ,\\t\\t\\r \\\"\\\\b\\\\n\\\"\\n\\t  :\\t\\t-50E+0\\t\\r\\r,\\n\\r\\\"\\\\r\\\\\\\"\\\\\\\"\\\\\\\\\\\"\\r:false\\t  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_97245512525d63478cd2049c7cce481d) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// JSON: '{\r\n\"3\\b\" :\t\r-0\n\n\t\r,  \"\":3 \n\t,\t\"\\t\"\t\r\r:-7e+0110\n ,\n\r \"u#\"\r\t :\"W\"\n\r , \n\r\"x*\": \"6O\\n\"\t\n\t\r\t,\n\r\n \n\n\"m~\\t\"'
	const char* json = "{\r\n\"3\\b\" :\t\r-0\n\n\t\r,  \"\":3 \n\t,\t\"\\t\"\t\r\r:-7e+0110\n ,\n\r \"u#\"\r\t :\"W\"\n\r , \n\r\"x*\": \"6O\\n\"\t\n\t\r\t,\n\r\n \n\n\"m~\\t\"";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"3\\\\b\\\" :\\t\\r-0\\n\\n\\t\\r,  \\\"\\\":3 \\n\\t,\\t\\\"\\\\t\\\"\\t\\r\\r:-7e+0110\\n ,\\n\\r \\\"u#\\\"\\r\\t :\\\"W\\\"\\n\\r , \\n\\r\\\"x*\\\": \\\"6O\\\\n\\\"\\t\\n\\t\\r\\t,\\n\\r\\n \\n\\n\\\"m~\\\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2f9a118259a858a1eb76c05800d747a4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// JSON: '\r\r\r{\n\"9\\n`\\bQ8\\\\\\\\\"\t\t:\"\"\t\t\r,\t \n\r \"b\\nv\\nRU\" :null,\t\"7\"\t\r:false,\t\t\t\r\"^\":true \r\n\r, \r\"|\\/{\":[\r],\n\r\t\"-\"\r'
	const char* json = "\r\r\r{\n\"9\\n`\\bQ8\\\\\\\\\"\t\t:\"\"\t\t\r,\t \n\r \"b\\nv\\nRU\" :null,\t\"7\"\t\r:false,\t\t\t\r\"^\":true \r\n\r, \r\"|\\/{\":[\r],\n\r\t\"-\"\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\r\\r{\\n\\\"9\\\\n`\\\\bQ8\\\\\\\\\\\\\\\\\\\"\\t\\t:\\\"\\\"\\t\\t\\r,\\t \\n\\r \\\"b\\\\nv\\\\nRU\\\" :null,\\t\\\"7\\\"\\t\\r:false,\\t\\t\\t\\r\\\"^\\\":true \\r\\n\\r, \\r\\\"|\\\\/{\\\":[\\r],\\n\\r\\t\\\"-\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1f7cd30753d483e1aafb1b21975de682) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '{ \r  \n\"'\"\n:\r[\r\t {\r\t   \t\"\"\r \n\t:0.0e0\t}\r]\n, \"\\/=\"\n\n\t:\n \ntrue\n, \n\r\r\"DP\"\t\r:[]\r\t\r \r, \"\\/\"\n:null\r\t\t\n,\r\r\"\\n'
	const char* json = "{ \r  \n\"'\"\n:\r[\r\t {\r\t   \t\"\"\r \n\t:0.0e0\t}\r]\n, \"\\/=\"\n\n\t:\n \ntrue\n, \n\r\r\"DP\"\t\r:[]\r\t\r \r, \"\\/\"\n:null\r\t\t\n,\r\r\"\\n";
	std::cerr << "Plain JSON string from model: " << "{ \\r  \\n\\\"'\\\"\\n:\\r[\\r\\t {\\r\\t   \\t\\\"\\\"\\r \\n\\t:0.0e0\\t}\\r]\\n, \\\"\\\\/=\\\"\\n\\n\\t:\\n \\ntrue\\n, \\n\\r\\r\\\"DP\\\"\\t\\r:[]\\r\\t\\r \\r, \\\"\\\\/\\\"\\n:null\\r\\t\\t\\n,\\r\\r\\\"\\\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0ae298166f73a3acec2eeff2fc04f988) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// JSON: '{\r \"\"\r :\"?K\\\"\\t`\"\r,\t\n\"B\\b\" \t:\n0 \n\t\r,\n\t\n\t\"M^\\tO\\b\"\r\r:true \t\t\t\r\r,\r\"9\"\t\t\r\n\n :\n  0\r\n \t, \t \n\"\\r\\\"\"\r:\ntrue'
	const char* json = "{\r \"\"\r :\"?K\\\"\\t`\"\r,\t\n\"B\\b\" \t:\n0 \n\t\r,\n\t\n\t\"M^\\tO\\b\"\r\r:true \t\t\t\r\r,\r\"9\"\t\t\r\n\n :\n  0\r\n \t, \t \n\"\\r\\\"\"\r:\ntrue";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"\\\"\\r :\\\"?K\\\\\\\"\\\\t`\\\"\\r,\\t\\n\\\"B\\\\b\\\" \\t:\\n0 \\n\\t\\r,\\n\\t\\n\\t\\\"M^\\\\tO\\\\b\\\"\\r\\r:true \\t\\t\\t\\r\\r,\\r\\\"9\\\"\\t\\t\\r\\n\\n :\\n  0\\r\\n \\t, \\t \\n\\\"\\\\r\\\\\\\"\\\"\\r:\\ntrue" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_faf02e7eaa49d9644d479507339fb9a4) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// JSON: '{\r\"\\t\\t:\\f\"\n:{\t\r  \";\" \n\n\n:\t[\t]\r}   \r\n,\"\\b\"\n   : \n{}\t\t,\r\"NyO\\t\\r]\\t\\n\\n~x\"\t\t\n\n:\t\r\ttrue \n,\"\" :[],\n\n\"\\t'
	const char* json = "{\r\"\\t\\t:\\f\"\n:{\t\r  \";\" \n\n\n:\t[\t]\r}   \r\n,\"\\b\"\n   : \n{}\t\t,\r\"NyO\\t\\r]\\t\\n\\n~x\"\t\t\n\n:\t\r\ttrue \n,\"\" :[],\n\n\"\\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\t\\\\t:\\\\f\\\"\\n:{\\t\\r  \\\";\\\" \\n\\n\\n:\\t[\\t]\\r}   \\r\\n,\\\"\\\\b\\\"\\n   : \\n{}\\t\\t,\\r\\\"NyO\\\\t\\\\r]\\\\t\\\\n\\\\n~x\\\"\\t\\t\\n\\n:\\t\\r\\ttrue \\n,\\\"\\\" :[],\\n\\n\\\"\\\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fad014deca88d95ae457f9d5628a2628) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\t{\r\r\n\"\\r\"\r\t\n:{\r} ,  \t\"\":\t\tfalse\r,\r\"v\" :\tnull\t ,\n\r \t\"\\\"Rs\\b}\\n?\"\t\n:\n[],\"Y](\\\"\":{\"\\r\\\\jo\\r+\"\n:{}\t\r\n\n\r,'
	const char* json = "\t{\r\r\n\"\\r\"\r\t\n:{\r} ,  \t\"\":\t\tfalse\r,\r\"v\" :\tnull\t ,\n\r \t\"\\\"Rs\\b}\\n?\"\t\n:\n[],\"Y](\\\"\":{\"\\r\\\\jo\\r+\"\n:{}\t\r\n\n\r,";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r\\n\\\"\\\\r\\\"\\r\\t\\n:{\\r} ,  \\t\\\"\\\":\\t\\tfalse\\r,\\r\\\"v\\\" :\\tnull\\t ,\\n\\r \\t\\\"\\\\\\\"Rs\\\\b}\\\\n?\\\"\\t\\n:\\n[],\\\"Y](\\\\\\\"\\\":{\\\"\\\\r\\\\\\\\jo\\\\r+\\\"\\n:{}\\t\\r\\n\\n\\r," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a04caaab7e43d246161a9c2314c63d76) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// JSON: '{\n\"\" :[ ],\n\t\r\"\\\"P\":\r\t\rtrue\t\r\t,\n\"M\\f\"\r\n:\rfalse\n\t ,\r\n\t\r\r\"\\nT\\/\"\r \n:\"LZ`N\"\t\r,\r\r\n\r\t\n\"1x\\n:\\n,\\f\\\"\\rJ\":\"O'
	const char* json = "{\n\"\" :[ ],\n\t\r\"\\\"P\":\r\t\rtrue\t\r\t,\n\"M\\f\"\r\n:\rfalse\n\t ,\r\n\t\r\r\"\\nT\\/\"\r \n:\"LZ`N\"\t\r,\r\r\n\r\t\n\"1x\\n:\\n,\\f\\\"\\rJ\":\"O";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\" :[ ],\\n\\t\\r\\\"\\\\\\\"P\\\":\\r\\t\\rtrue\\t\\r\\t,\\n\\\"M\\\\f\\\"\\r\\n:\\rfalse\\n\\t ,\\r\\n\\t\\r\\r\\\"\\\\nT\\\\/\\\"\\r \\n:\\\"LZ`N\\\"\\t\\r,\\r\\r\\n\\r\\t\\n\\\"1x\\\\n:\\\\n,\\\\f\\\\\\\"\\\\rJ\\\":\\\"O" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a761bc37eb2b206b2982384fda7deac5) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// JSON: '{ \"$ Z<\\t\"\t\n\n\n\r\t:false \n,\"\\/\\r\"\t\t\r:true\n\r,\r \n \n\n\"J\\\\\"\n:\r\t{\t\t\n\"~\\fn\\t\\n\"\n:true\r}\r, \r \r \t\n\"\\n\"\r \r: [\r\r'
	const char* json = "{ \"$ Z<\\t\"\t\n\n\n\r\t:false \n,\"\\/\\r\"\t\t\r:true\n\r,\r \n \n\n\"J\\\\\"\n:\r\t{\t\t\n\"~\\fn\\t\\n\"\n:true\r}\r, \r \r \t\n\"\\n\"\r \r: [\r\r";
	std::cerr << "Plain JSON string from model: " << "{ \\\"$ Z<\\\\t\\\"\\t\\n\\n\\n\\r\\t:false \\n,\\\"\\\\/\\\\r\\\"\\t\\t\\r:true\\n\\r,\\r \\n \\n\\n\\\"J\\\\\\\\\\\"\\n:\\r\\t{\\t\\t\\n\\\"~\\\\fn\\\\t\\\\n\\\"\\n:true\\r}\\r, \\r \\r \\t\\n\\\"\\\\n\\\"\\r \\r: [\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_543deb0663b8dffaf54f9297187793e5) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{\t\n\n \"}N8\":\n \r\"\"\n \r,\t\r\r\"\\fR\\r{AI\":\n0E-0\n\n \t,\r \"<\\b\"\r\r\t:\r\rnull\r\r\t\t ,\t\"A8\\f\"\n\n\r\t :\nnull, \"\\/\\t\":null ,'
	const char* json = "{\t\n\n \"}N8\":\n \r\"\"\n \r,\t\r\r\"\\fR\\r{AI\":\n0E-0\n\n \t,\r \"<\\b\"\r\r\t:\r\rnull\r\r\t\t ,\t\"A8\\f\"\n\n\r\t :\nnull, \"\\/\\t\":null ,";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\n \\\"}N8\\\":\\n \\r\\\"\\\"\\n \\r,\\t\\r\\r\\\"\\\\fR\\\\r{AI\\\":\\n0E-0\\n\\n \\t,\\r \\\"<\\\\b\\\"\\r\\r\\t:\\r\\rnull\\r\\r\\t\\t ,\\t\\\"A8\\\\f\\\"\\n\\n\\r\\t :\\nnull, \\\"\\\\/\\\\t\\\":null ," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8f69ccaa2beeba7ef1ac6a2d031e8996) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// JSON: '\r{ \"\"\r:\n\n\rfalse\t,\t\t\"\\b\\bV\"\n:\ntrue \n,\t\t\t\":uY\":true,\r\n \t\"%:\\/\"\r\r:\tfalse,\t\n\"A\"\t\r:\r0E+0  ,\n\t  \t\"\\/\\\"\\t\\\"'
	const char* json = "\r{ \"\"\r:\n\n\rfalse\t,\t\t\"\\b\\bV\"\n:\ntrue \n,\t\t\t\":uY\":true,\r\n \t\"%:\\/\"\r\r:\tfalse,\t\n\"A\"\t\r:\r0E+0  ,\n\t  \t\"\\/\\\"\\t\\\"";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\\"\\\"\\r:\\n\\n\\rfalse\\t,\\t\\t\\\"\\\\b\\\\bV\\\"\\n:\\ntrue \\n,\\t\\t\\t\\\":uY\\\":true,\\r\\n \\t\\\"%:\\\\/\\\"\\r\\r:\\tfalse,\\t\\n\\\"A\\\"\\t\\r:\\r0E+0  ,\\n\\t  \\t\\\"\\\\/\\\\\\\"\\\\t\\\\\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2c431967cd52899c022d8a344293b662) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '\n {\n\"\"\r:\tfalse \r\n\n\t\t,\t \r\"\\t?3\\r\":\n\rnull\r\n \r ,\"\\n\"\n \t:  \n70.040E080490\t\n\n\t,\r\n\t\t\"I\\r\"\t\t\n:\"Z\\f\",\r \n\n\r\r\"'
	const char* json = "\n {\n\"\"\r:\tfalse \r\n\n\t\t,\t \r\"\\t?3\\r\":\n\rnull\r\n \r ,\"\\n\"\n \t:  \n70.040E080490\t\n\n\t,\r\n\t\t\"I\\r\"\t\t\n:\"Z\\f\",\r \n\n\r\r\"";
	std::cerr << "Plain JSON string from model: " << "\\n {\\n\\\"\\\"\\r:\\tfalse \\r\\n\\n\\t\\t,\\t \\r\\\"\\\\t?3\\\\r\\\":\\n\\rnull\\r\\n \\r ,\\\"\\\\n\\\"\\n \\t:  \\n70.040E080490\\t\\n\\n\\t,\\r\\n\\t\\t\\\"I\\\\r\\\"\\t\\t\\n:\\\"Z\\\\f\\\",\\r \\n\\n\\r\\r\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c959ffccf0721efbe98f3a504d9c50fe) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// CloseElements
	// JSON: '\r{\n\"\"\r\n:\n{\t\"v\\\"\\r{B\\f\\n%\\n\\n\"\n:\r\nfalse  \r \r\n, \n\t\"k\\\\HR\"  \n\r\n\r:\r-0E-0,\"\\n\\\"]\"\t:\t[\n\r{ \"RR\\f\\/\"\n:0\t\n\n}\n'
	const char* json = "\r{\n\"\"\r\n:\n{\t\"v\\\"\\r{B\\f\\n%\\n\\n\"\n:\r\nfalse  \r \r\n, \n\t\"k\\\\HR\"  \n\r\n\r:\r-0E-0,\"\\n\\\"]\"\t:\t[\n\r{ \"RR\\f\\/\"\n:0\t\n\n}\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\\"\\\"\\r\\n:\\n{\\t\\\"v\\\\\\\"\\\\r{B\\\\f\\\\n%\\\\n\\\\n\\\"\\n:\\r\\nfalse  \\r \\r\\n, \\n\\t\\\"k\\\\\\\\HR\\\"  \\n\\r\\n\\r:\\r-0E-0,\\\"\\\\n\\\\\\\"]\\\"\\t:\\t[\\n\\r{ \\\"RR\\\\f\\\\/\\\"\\n:0\\t\\n\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d05c470e37b4c752a6762e82588c9f16) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// JSON: '{\r\"\\/[\" \t:\t [ 90,\n []\r\r,\r\n{\r\r\"\\b\\f\\f\\f\\\"\\fc\\nDy\\\"-\":[\rfalse\t\n,\n\t\t6.0\t]\r\n\r\r }  ]\t\r\n\t,\"\\t\\/\" :\t\"'\"\n , '
	const char* json = "{\r\"\\/[\" \t:\t [ 90,\n []\r\r,\r\n{\r\r\"\\b\\f\\f\\f\\\"\\fc\\nDy\\\"-\":[\rfalse\t\n,\n\t\t6.0\t]\r\n\r\r }  ]\t\r\n\t,\"\\t\\/\" :\t\"'\"\n , ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\/[\\\" \\t:\\t [ 90,\\n []\\r\\r,\\r\\n{\\r\\r\\\"\\\\b\\\\f\\\\f\\\\f\\\\\\\"\\\\fc\\\\nDy\\\\\\\"-\\\":[\\rfalse\\t\\n,\\n\\t\\t6.0\\t]\\r\\n\\r\\r }  ]\\t\\r\\n\\t,\\\"\\\\t\\\\/\\\" :\\t\\\"'\\\"\\n , " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_432c2853d8b16c881344a77f1e88b5e6) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// JSON: '{  \n\r\"sO\\/5\"\n:\n \r[]\n \r,\t\r\t\"\" \n: \"t\"\n,\"\\r\\r\\b\" :[]\n\t, \"\\b\\\"\":\tfalse\t \t,\"s\":true\n\r\n  \r,\t\n\n\"\\/\"\t\t:{\n\t\"y'
	const char* json = "{  \n\r\"sO\\/5\"\n:\n \r[]\n \r,\t\r\t\"\" \n: \"t\"\n,\"\\r\\r\\b\" :[]\n\t, \"\\b\\\"\":\tfalse\t \t,\"s\":true\n\r\n  \r,\t\n\n\"\\/\"\t\t:{\n\t\"y";
	std::cerr << "Plain JSON string from model: " << "{  \\n\\r\\\"sO\\\\/5\\\"\\n:\\n \\r[]\\n \\r,\\t\\r\\t\\\"\\\" \\n: \\\"t\\\"\\n,\\\"\\\\r\\\\r\\\\b\\\" :[]\\n\\t, \\\"\\\\b\\\\\\\"\\\":\\tfalse\\t \\t,\\\"s\\\":true\\n\\r\\n  \\r,\\t\\n\\n\\\"\\\\/\\\"\\t\\t:{\\n\\t\\\"y" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_70fa1532ad21a788f1b6cf5b7a80897c) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// JSON: '{  \"\\f\\f#\\rR\\\"\\\"\"\t\r\t: -66\n\n,\r\"\\/\"\r: \"\\b\\f8\",\r\r  \t\"\"\r\r\t: {\n \r\"\\b\\t\\\"\\r^\\n\"\r:\"?\\b.\\/\"\t \r\n,\" \\b2\"\r\r\t\n:['
	const char* json = "{  \"\\f\\f#\\rR\\\"\\\"\"\t\r\t: -66\n\n,\r\"\\/\"\r: \"\\b\\f8\",\r\r  \t\"\"\r\r\t: {\n \r\"\\b\\t\\\"\\r^\\n\"\r:\"?\\b.\\/\"\t \r\n,\" \\b2\"\r\r\t\n:[";
	std::cerr << "Plain JSON string from model: " << "{  \\\"\\\\f\\\\f#\\\\rR\\\\\\\"\\\\\\\"\\\"\\t\\r\\t: -66\\n\\n,\\r\\\"\\\\/\\\"\\r: \\\"\\\\b\\\\f8\\\",\\r\\r  \\t\\\"\\\"\\r\\r\\t: {\\n \\r\\\"\\\\b\\\\t\\\\\\\"\\\\r^\\\\n\\\"\\r:\\\"?\\\\b.\\\\/\\\"\\t \\r\\n,\\\" \\\\b2\\\"\\r\\r\\t\\n:[" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_effb0cf580ab9f63fc67004374214ef2) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// JSON: '{ \n \"\"\t\t :\t\r\rtrue\n,\t\t \r\n\"@\\\\\"\t:\"1\"\n,\"\\ftV\\\"\\\">\":false \r,\r\"a\\/\" :\n7e-0\t\r\t\r,\"8\\n\\\"\\nxA\\/\"\n \r\r:\n[\t\r\"\\br'
	const char* json = "{ \n \"\"\t\t :\t\r\rtrue\n,\t\t \r\n\"@\\\\\"\t:\"1\"\n,\"\\ftV\\\"\\\">\":false \r,\r\"a\\/\" :\n7e-0\t\r\t\r,\"8\\n\\\"\\nxA\\/\"\n \r\r:\n[\t\r\"\\br";
	std::cerr << "Plain JSON string from model: " << "{ \\n \\\"\\\"\\t\\t :\\t\\r\\rtrue\\n,\\t\\t \\r\\n\\\"@\\\\\\\\\\\"\\t:\\\"1\\\"\\n,\\\"\\\\ftV\\\\\\\"\\\\\\\">\\\":false \\r,\\r\\\"a\\\\/\\\" :\\n7e-0\\t\\r\\t\\r,\\\"8\\\\n\\\\\\\"\\\\nxA\\\\/\\\"\\n \\r\\r:\\n[\\t\\r\\\"\\\\br" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0b6d6ab0f17369a502e0ff088dcd1630) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// JSON: '{\n\"\\/,\"\n:{\t\r\"S\\r54\\n\\\"C\"\n\n:\r\n-8e+03\t\r,\n\t\"\\r\":\t1\n}\t\r,\t\r \t\"\"\t\r\r :\r\ntrue\t\t\n,\r\t\"rK\":\r\n\tfalse  ,\t\r\t\r\n\"\\nA'
	const char* json = "{\n\"\\/,\"\n:{\t\r\"S\\r54\\n\\\"C\"\n\n:\r\n-8e+03\t\r,\n\t\"\\r\":\t1\n}\t\r,\t\r \t\"\"\t\r\r :\r\ntrue\t\t\n,\r\t\"rK\":\r\n\tfalse  ,\t\r\t\r\n\"\\nA";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\\/,\\\"\\n:{\\t\\r\\\"S\\\\r54\\\\n\\\\\\\"C\\\"\\n\\n:\\r\\n-8e+03\\t\\r,\\n\\t\\\"\\\\r\\\":\\t1\\n}\\t\\r,\\t\\r \\t\\\"\\\"\\t\\r\\r :\\r\\ntrue\\t\\t\\n,\\r\\t\\\"rK\\\":\\r\\n\\tfalse  ,\\t\\r\\t\\r\\n\\\"\\\\nA" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8a9cf4e5743b32d1f312e3d7049fccbc) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '{\r\"\"\t :\n\"\\\"\\f\\n>\\rHf\"\t\r\n,  \t\t\r\t\"[r\"\t:{}   \n\r\t, \t\n\r\"\\\\hM-\\b\\n\"\r\n:\n null\t\t,\n\r\"\\/O\" :\"\\\"\"\t\r\n\n,   \r\n\"Z\":'
	const char* json = "{\r\"\"\t :\n\"\\\"\\f\\n>\\rHf\"\t\r\n,  \t\t\r\t\"[r\"\t:{}   \n\r\t, \t\n\r\"\\\\hM-\\b\\n\"\r\n:\n null\t\t,\n\r\"\\/O\" :\"\\\"\"\t\r\n\n,   \r\n\"Z\":";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\t :\\n\\\"\\\\\\\"\\\\f\\\\n>\\\\rHf\\\"\\t\\r\\n,  \\t\\t\\r\\t\\\"[r\\\"\\t:{}   \\n\\r\\t, \\t\\n\\r\\\"\\\\\\\\hM-\\\\b\\\\n\\\"\\r\\n:\\n null\\t\\t,\\n\\r\\\"\\\\/O\\\" :\\\"\\\\\\\"\\\"\\t\\r\\n\\n,   \\r\\n\\\"Z\\\":" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3056555306dc9044459ff671a0f53c55) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{\t\"\\/\\r\" :\n\t\nnull\t \r,\n \t\"\\f\":\rtrue,\n \t\r\n\n\"\\\"\\\\\":\tnull\n ,\n\r\r  \n\"\\t\" :false \r\t   ,\t\n\"\" \n:\"\\f\\\"3\\r\"  \n,'
	const char* json = "{\t\"\\/\\r\" :\n\t\nnull\t \r,\n \t\"\\f\":\rtrue,\n \t\r\n\n\"\\\"\\\\\":\tnull\n ,\n\r\r  \n\"\\t\" :false \r\t   ,\t\n\"\" \n:\"\\f\\\"3\\r\"  \n,";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\/\\\\r\\\" :\\n\\t\\nnull\\t \\r,\\n \\t\\\"\\\\f\\\":\\rtrue,\\n \\t\\r\\n\\n\\\"\\\\\\\"\\\\\\\\\\\":\\tnull\\n ,\\n\\r\\r  \\n\\\"\\\\t\\\" :false \\r\\t   ,\\t\\n\\\"\\\" \\n:\\\"\\\\f\\\\\\\"3\\\\r\\\"  \\n," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b010a8a4fcb9c0c03a280f161f778da8) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\t\t\t{\n\r \t\"\"\r \t\t\t:true\r \n,\r\t\r\n\t\"{mjU\\t\"\t:\"YNMD\" \t\t,\"\\b#\": -80 \r\n\r\r ,\r\t\"9W\" \t \r :\"\\bZg\\\\\\bl\\b\\n\\f\"\t\n,\t\r'
	const char* json = "\t\t\t{\n\r \t\"\"\r \t\t\t:true\r \n,\r\t\r\n\t\"{mjU\\t\"\t:\"YNMD\" \t\t,\"\\b#\": -80 \r\n\r\r ,\r\t\"9W\" \t \r :\"\\bZg\\\\\\bl\\b\\n\\f\"\t\n,\t\r";
	std::cerr << "Plain JSON string from model: " << "\\t\\t\\t{\\n\\r \\t\\\"\\\"\\r \\t\\t\\t:true\\r \\n,\\r\\t\\r\\n\\t\\\"{mjU\\\\t\\\"\\t:\\\"YNMD\\\" \\t\\t,\\\"\\\\b#\\\": -80 \\r\\n\\r\\r ,\\r\\t\\\"9W\\\" \\t \\r :\\\"\\\\bZg\\\\\\\\\\\\bl\\\\b\\\\n\\\\f\\\"\\t\\n,\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bbe1efc8dc4c43ab0968e46b63ce6d56) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '\n{\r\n \t\r\"\":false\t\r\n,  \"\\n\\fg\" \t\n:\t \t\"`\\r\\n\\/\\fX\\fM\\t\\ra\"\n \t,\r\"\\fDl&o\":{\n\n\"P\\\\\"\t\n\t\t\t:\r null\n ,\"\\n\"\r \r:'
	const char* json = "\n{\r\n \t\r\"\":false\t\r\n,  \"\\n\\fg\" \t\n:\t \t\"`\\r\\n\\/\\fX\\fM\\t\\ra\"\n \t,\r\"\\fDl&o\":{\n\n\"P\\\\\"\t\n\t\t\t:\r null\n ,\"\\n\"\r \r:";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\n \\t\\r\\\"\\\":false\\t\\r\\n,  \\\"\\\\n\\\\fg\\\" \\t\\n:\\t \\t\\\"`\\\\r\\\\n\\\\/\\\\fX\\\\fM\\\\t\\\\ra\\\"\\n \\t,\\r\\\"\\\\fDl&o\\\":{\\n\\n\\\"P\\\\\\\\\\\"\\t\\n\\t\\t\\t:\\r null\\n ,\\\"\\\\n\\\"\\r \\r:" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8677d3c07f49ad8b1a3fd9d45d2e9b27) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// JSON: '  \t{\r\r\t \t\"\":\rfalse\t\n\r\n\n\r\n,\t    \r\"\\t\\f\"\r:\"\\t1nwK\"\r\n, \n\r\"\\n|\"\r :\n\r[] \r,\n \t\"Uq\"\r:\"\\ft\\\"\\/T\\n\"\r\t\t,\t\n   \t'
	const char* json = "  \t{\r\r\t \t\"\":\rfalse\t\n\r\n\n\r\n,\t    \r\"\\t\\f\"\r:\"\\t1nwK\"\r\n, \n\r\"\\n|\"\r :\n\r[] \r,\n \t\"Uq\"\r:\"\\ft\\\"\\/T\\n\"\r\t\t,\t\n   \t";
	std::cerr << "Plain JSON string from model: " << "  \\t{\\r\\r\\t \\t\\\"\\\":\\rfalse\\t\\n\\r\\n\\n\\r\\n,\\t    \\r\\\"\\\\t\\\\f\\\"\\r:\\\"\\\\t1nwK\\\"\\r\\n, \\n\\r\\\"\\\\n|\\\"\\r :\\n\\r[] \\r,\\n \\t\\\"Uq\\\"\\r:\\\"\\\\ft\\\\\\\"\\\\/T\\\\n\\\"\\r\\t\\t,\\t\\n   \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_033bc91eeccfe6817affdb892bbdca85) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// JSON: '{ \"*\\\"\":true\n,\t\n\n\"\"\t   :[\n\n\rfalse\t]\t,\r\t\t\r\n\",\"\r:\n\ntrue ,\t\n\"f\\\\\\n\"\t:null, \t\t\r\t\"\\rP[e\":-0,\n\t\"\\r\" :\n{\r\t\r'
	const char* json = "{ \"*\\\"\":true\n,\t\n\n\"\"\t   :[\n\n\rfalse\t]\t,\r\t\t\r\n\",\"\r:\n\ntrue ,\t\n\"f\\\\\\n\"\t:null, \t\t\r\t\"\\rP[e\":-0,\n\t\"\\r\" :\n{\r\t\r";
	std::cerr << "Plain JSON string from model: " << "{ \\\"*\\\\\\\"\\\":true\\n,\\t\\n\\n\\\"\\\"\\t   :[\\n\\n\\rfalse\\t]\\t,\\r\\t\\t\\r\\n\\\",\\\"\\r:\\n\\ntrue ,\\t\\n\\\"f\\\\\\\\\\\\n\\\"\\t:null, \\t\\t\\r\\t\\\"\\\\rP[e\\\":-0,\\n\\t\\\"\\\\r\\\" :\\n{\\r\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0e1aa508a4332b5d4e7988bbfbe95102) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// JSON: '\n \r{\"X?\"\t\r:\t{\r\"d \\n\":{ \"dkb\\r\\n\"\r:-50\t\n\n,\r\r\n\t\n\"\"\n\r:\t\t\r\"+\",\"I\\f}\"\r\r\r :\n\"\\/\"\r,\t\r\t\"\\f\"\n:null\t\t\n\n\t}\n,\n \"'
	const char* json = "\n \r{\"X?\"\t\r:\t{\r\"d \\n\":{ \"dkb\\r\\n\"\r:-50\t\n\n,\r\r\n\t\n\"\"\n\r:\t\t\r\"+\",\"I\\f}\"\r\r\r :\n\"\\/\"\r,\t\r\t\"\\f\"\n:null\t\t\n\n\t}\n,\n \"";
	std::cerr << "Plain JSON string from model: " << "\\n \\r{\\\"X?\\\"\\t\\r:\\t{\\r\\\"d \\\\n\\\":{ \\\"dkb\\\\r\\\\n\\\"\\r:-50\\t\\n\\n,\\r\\r\\n\\t\\n\\\"\\\"\\n\\r:\\t\\t\\r\\\"+\\\",\\\"I\\\\f}\\\"\\r\\r\\r :\\n\\\"\\\\/\\\"\\r,\\t\\r\\t\\\"\\\\f\\\"\\n:null\\t\\t\\n\\n\\t}\\n,\\n \\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_49e230bb8a2bc570971912f361fb6c36) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// JSON: '\n\t {\t\n \t\"\\t3\"\t\t\r\r:70.0e0702 \t\r,   \"\" \r\r\t:\r\"7L\\f\\fsq\\t\\\"\\b\\b-Jy\\\"\\/\\\"\"\n\n\t,\"?\\\")\"\t:null,\n\n \r\"\\f\"\n:true'
	const char* json = "\n\t {\t\n \t\"\\t3\"\t\t\r\r:70.0e0702 \t\r,   \"\" \r\r\t:\r\"7L\\f\\fsq\\t\\\"\\b\\b-Jy\\\"\\/\\\"\"\n\n\t,\"?\\\")\"\t:null,\n\n \r\"\\f\"\n:true";
	std::cerr << "Plain JSON string from model: " << "\\n\\t {\\t\\n \\t\\\"\\\\t3\\\"\\t\\t\\r\\r:70.0e0702 \\t\\r,   \\\"\\\" \\r\\r\\t:\\r\\\"7L\\\\f\\\\fsq\\\\t\\\\\\\"\\\\b\\\\b-Jy\\\\\\\"\\\\/\\\\\\\"\\\"\\n\\n\\t,\\\"?\\\\\\\")\\\"\\t:null,\\n\\n \\r\\\"\\\\f\\\"\\n:true" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b9f2e033ad93ac01e984414b5f3165a8) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// JSON: '{\t \r\"l\\n\\/\\r\\r\\f\\\"9l()\\n\\f\\\"bUDJ\": \r\"\\\"\\/\"\t\t\n\n\t,\r\"\"\t:\t-90\n \r\r ,\t\n\r\t\r\r \n\"6n\\n8\\\\\"\r\n\r:\t\r\rnull\n  \t, \r\t\"'
	const char* json = "{\t \r\"l\\n\\/\\r\\r\\f\\\"9l()\\n\\f\\\"bUDJ\": \r\"\\\"\\/\"\t\t\n\n\t,\r\"\"\t:\t-90\n \r\r ,\t\n\r\t\r\r \n\"6n\\n8\\\\\"\r\n\r:\t\r\rnull\n  \t, \r\t\"";
	std::cerr << "Plain JSON string from model: " << "{\\t \\r\\\"l\\\\n\\\\/\\\\r\\\\r\\\\f\\\\\\\"9l()\\\\n\\\\f\\\\\\\"bUDJ\\\": \\r\\\"\\\\\\\"\\\\/\\\"\\t\\t\\n\\n\\t,\\r\\\"\\\"\\t:\\t-90\\n \\r\\r ,\\t\\n\\r\\t\\r\\r \\n\\\"6n\\\\n8\\\\\\\\\\\"\\r\\n\\r:\\t\\r\\rnull\\n  \\t, \\r\\t\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ed710348098e1de6ccc5459935d25b96) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// JSON: ' { \n\n\r\n\"\\rA\\bsY\"\t:\n\r[[\n] ]\n\n\r,\t\"\":\ntrue\t  \t,   \"\\b\"\t\r\n\t:false\r\r\r\r, \n\"6\\\\k\\nq\" \r :false\n\n ,\"\\\"\" :null'
	const char* json = " { \n\n\r\n\"\\rA\\bsY\"\t:\n\r[[\n] ]\n\n\r,\t\"\":\ntrue\t  \t,   \"\\b\"\t\r\n\t:false\r\r\r\r, \n\"6\\\\k\\nq\" \r :false\n\n ,\"\\\"\" :null";
	std::cerr << "Plain JSON string from model: " << " { \\n\\n\\r\\n\\\"\\\\rA\\\\bsY\\\"\\t:\\n\\r[[\\n] ]\\n\\n\\r,\\t\\\"\\\":\\ntrue\\t  \\t,   \\\"\\\\b\\\"\\t\\r\\n\\t:false\\r\\r\\r\\r, \\n\\\"6\\\\\\\\k\\\\nq\\\" \\r :false\\n\\n ,\\\"\\\\\\\"\\\" :null" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5dfeb839a0fcbe6f6bc6b11657ecef90) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// JSON: '{\t\t\r \"\" :\"\\\"\",\n\n\t\t\t \t\"\\b \\r\":true\r , \r\"s\":false \n\r,\r\t\t\r\"\\b\\n\": \tfalse\n\r , \t\n\r\n\"\\b\\n<\\\\\" \r: 0.0e-08\r\n'
	const char* json = "{\t\t\r \"\" :\"\\\"\",\n\n\t\t\t \t\"\\b \\r\":true\r , \r\"s\":false \n\r,\r\t\t\r\"\\b\\n\": \tfalse\n\r , \t\n\r\n\"\\b\\n<\\\\\" \r: 0.0e-08\r\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\r \\\"\\\" :\\\"\\\\\\\"\\\",\\n\\n\\t\\t\\t \\t\\\"\\\\b \\\\r\\\":true\\r , \\r\\\"s\\\":false \\n\\r,\\r\\t\\t\\r\\\"\\\\b\\\\n\\\": \\tfalse\\n\\r , \\t\\n\\r\\n\\\"\\\\b\\\\n<\\\\\\\\\\\" \\r: 0.0e-08\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_238bff0d8a2edaa62e7ed92baf273f61) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{ \n\n\"Y'\\/\\b\\tm\\r\\b\":false\t \r,\t \t\t\t\"H\\n&\\\"u\"\r :\r0 \t,\n\r\r\t\r\t\"\\b\\rx{\\\\*\":false\n \t,\t\"$\\/>\\n\\n\\b\\\\\":true\r,'
	const char* json = "{ \n\n\"Y'\\/\\b\\tm\\r\\b\":false\t \r,\t \t\t\t\"H\\n&\\\"u\"\r :\r0 \t,\n\r\r\t\r\t\"\\b\\rx{\\\\*\":false\n \t,\t\"$\\/>\\n\\n\\b\\\\\":true\r,";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\n\\\"Y'\\\\/\\\\b\\\\tm\\\\r\\\\b\\\":false\\t \\r,\\t \\t\\t\\t\\\"H\\\\n&\\\\\\\"u\\\"\\r :\\r0 \\t,\\n\\r\\r\\t\\r\\t\\\"\\\\b\\\\rx{\\\\\\\\*\\\":false\\n \\t,\\t\\\"$\\\\/>\\\\n\\\\n\\\\b\\\\\\\\\\\":true\\r," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4e5077b668d8774843bbc8003bbfe9d4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// JSON: ' \r\r{ \"[J\"\t:-22e-0\n\r\n\t,\r\r\r\t\"\\r@\": \r\rtrue\r\r\r  ,\r\r\r\"\\n\\t@B\"\r\t:\rfalse,\t\"\\r\\\\o\":\"N`c\\\\\\r\\\"t\"\n\t ,\n \"q\\t\"  '
	const char* json = " \r\r{ \"[J\"\t:-22e-0\n\r\n\t,\r\r\r\t\"\\r@\": \r\rtrue\r\r\r  ,\r\r\r\"\\n\\t@B\"\r\t:\rfalse,\t\"\\r\\\\o\":\"N`c\\\\\\r\\\"t\"\n\t ,\n \"q\\t\"  ";
	std::cerr << "Plain JSON string from model: " << " \\r\\r{ \\\"[J\\\"\\t:-22e-0\\n\\r\\n\\t,\\r\\r\\r\\t\\\"\\\\r@\\\": \\r\\rtrue\\r\\r\\r  ,\\r\\r\\r\\\"\\\\n\\\\t@B\\\"\\r\\t:\\rfalse,\\t\\\"\\\\r\\\\\\\\o\\\":\\\"N`c\\\\\\\\\\\\r\\\\\\\"t\\\"\\n\\t ,\\n \\\"q\\\\t\\\"  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0e8d39c9d0c67fb1606fc70f9422d8db) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// JSON: '{  \t\t\r\n\r\n\"\"\n  :70E+0\r ,\n\r\t\"n\"\r  :0E+0\r\r\t\r\n,\r\n \"#6\\\\!p\" \r:true  \t ,\"X`\\/\": [\n\n]\n  \n,\n\r\"+G\\/\" \t\t\n\r:{ \n'
	const char* json = "{  \t\t\r\n\r\n\"\"\n  :70E+0\r ,\n\r\t\"n\"\r  :0E+0\r\r\t\r\n,\r\n \"#6\\\\!p\" \r:true  \t ,\"X`\\/\": [\n\n]\n  \n,\n\r\"+G\\/\" \t\t\n\r:{ \n";
	std::cerr << "Plain JSON string from model: " << "{  \\t\\t\\r\\n\\r\\n\\\"\\\"\\n  :70E+0\\r ,\\n\\r\\t\\\"n\\\"\\r  :0E+0\\r\\r\\t\\r\\n,\\r\\n \\\"#6\\\\\\\\!p\\\" \\r:true  \\t ,\\\"X`\\\\/\\\": [\\n\\n]\\n  \\n,\\n\\r\\\"+G\\\\/\\\" \\t\\t\\n\\r:{ \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_dcb6eb9839f6148fb50b73e90f306070) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// JSON: '{\t \"\\n\"\t\t\n \n:[ -9E0\r\t\r  ]\r\t,\n\t\n\"\\\\\"\t\r :{},\t\t \"iQ\\\\[42W\"\t\t\t:\n\"\\r\"\t\r\r\n,\t\t\"\"\n:\tfalse, \"\\r\\\"\\\"I\"\n\t :true'
	const char* json = "{\t \"\\n\"\t\t\n \n:[ -9E0\r\t\r  ]\r\t,\n\t\n\"\\\\\"\t\r :{},\t\t \"iQ\\\\[42W\"\t\t\t:\n\"\\r\"\t\r\r\n,\t\t\"\"\n:\tfalse, \"\\r\\\"\\\"I\"\n\t :true";
	std::cerr << "Plain JSON string from model: " << "{\\t \\\"\\\\n\\\"\\t\\t\\n \\n:[ -9E0\\r\\t\\r  ]\\r\\t,\\n\\t\\n\\\"\\\\\\\\\\\"\\t\\r :{},\\t\\t \\\"iQ\\\\\\\\[42W\\\"\\t\\t\\t:\\n\\\"\\\\r\\\"\\t\\r\\r\\n,\\t\\t\\\"\\\"\\n:\\tfalse, \\\"\\\\r\\\\\\\"\\\\\\\"I\\\"\\n\\t :true" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d4f470b23250740a5f3dcf9ced29a0c3) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// JSON: '\r\r\n{\t\r\"L\"\r \r\r: \rfalse \r\n ,\n \r\t\"\"\t\t\t:true \n \r\t\n,\n\n\n\"\\t\" \n\n\n\r: \t\ntrue, \"F\\f^6O\\\\\\\\\\\"\"\t: \t\t{ \t\"\\b\\\"\\n\"\r'
	const char* json = "\r\r\n{\t\r\"L\"\r \r\r: \rfalse \r\n ,\n \r\t\"\"\t\t\t:true \n \r\t\n,\n\n\n\"\\t\" \n\n\n\r: \t\ntrue, \"F\\f^6O\\\\\\\\\\\"\"\t: \t\t{ \t\"\\b\\\"\\n\"\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\r\\n{\\t\\r\\\"L\\\"\\r \\r\\r: \\rfalse \\r\\n ,\\n \\r\\t\\\"\\\"\\t\\t\\t:true \\n \\r\\t\\n,\\n\\n\\n\\\"\\\\t\\\" \\n\\n\\n\\r: \\t\\ntrue, \\\"F\\\\f^6O\\\\\\\\\\\\\\\\\\\\\\\"\\\"\\t: \\t\\t{ \\t\\\"\\\\b\\\\\\\"\\\\n\\\"\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7730e1725b95ee1429b7d64bc52a2038) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// JSON: '\t\r{\n\r \n\"\":\rfalse,\r\"\\t\\/\\ba\":\t\r\ttrue\r\n ,  \r\"\\/\" : \"\\/\\\"\",\n \r\r \"\\/X|\\\\\\r\" :\n[ \n{ \r}\r\n, \t []]\n\r ,\"\\\\M\":'
	const char* json = "\t\r{\n\r \n\"\":\rfalse,\r\"\\t\\/\\ba\":\t\r\ttrue\r\n ,  \r\"\\/\" : \"\\/\\\"\",\n \r\r \"\\/X|\\\\\\r\" :\n[ \n{ \r}\r\n, \t []]\n\r ,\"\\\\M\":";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{\\n\\r \\n\\\"\\\":\\rfalse,\\r\\\"\\\\t\\\\/\\\\ba\\\":\\t\\r\\ttrue\\r\\n ,  \\r\\\"\\\\/\\\" : \\\"\\\\/\\\\\\\"\\\",\\n \\r\\r \\\"\\\\/X|\\\\\\\\\\\\r\\\" :\\n[ \\n{ \\r}\\r\\n, \\t []]\\n\\r ,\\\"\\\\\\\\M\\\":" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4ce35694aebfc692ca4fce50a10d3f25) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '{\t \n\"\\\\\\f\"\n\n\t:{}\r\r,\n\n\n\t\n \n\"\\t2lK7\\/x\\f~\"\r:[]\n\t,\"\\b\\\\]\\fN\"\r\t\r\n:[null,-6.063,[ ] \t\t ],\"\"\n\r\n:0e+0667  ,'
	const char* json = "{\t \n\"\\\\\\f\"\n\n\t:{}\r\r,\n\n\n\t\n \n\"\\t2lK7\\/x\\f~\"\r:[]\n\t,\"\\b\\\\]\\fN\"\r\t\r\n:[null,-6.063,[ ] \t\t ],\"\"\n\r\n:0e+0667  ,";
	std::cerr << "Plain JSON string from model: " << "{\\t \\n\\\"\\\\\\\\\\\\f\\\"\\n\\n\\t:{}\\r\\r,\\n\\n\\n\\t\\n \\n\\\"\\\\t2lK7\\\\/x\\\\f~\\\"\\r:[]\\n\\t,\\\"\\\\b\\\\\\\\]\\\\fN\\\"\\r\\t\\r\\n:[null,-6.063,[ ] \\t\\t ],\\\"\\\"\\n\\r\\n:0e+0667  ," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_136bb71122ccf99ba796179c532d0c33) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// JSON: '\n\n{ \n \r\t\r\"\"\n:  [\"\\\"\"\n,\r\n\nnull \n,\rtrue \t\r\n] \r\t,\r\t\r\r \n\"G\": false\t \r\r\t,\n\t \r\t\n\n\"L}1\\n\\f\"\r:\n\t {\r\n} \r  \r, '
	const char* json = "\n\n{ \n \r\t\r\"\"\n:  [\"\\\"\"\n,\r\n\nnull \n,\rtrue \t\r\n] \r\t,\r\t\r\r \n\"G\": false\t \r\r\t,\n\t \r\t\n\n\"L}1\\n\\f\"\r:\n\t {\r\n} \r  \r, ";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{ \\n \\r\\t\\r\\\"\\\"\\n:  [\\\"\\\\\\\"\\\"\\n,\\r\\n\\nnull \\n,\\rtrue \\t\\r\\n] \\r\\t,\\r\\t\\r\\r \\n\\\"G\\\": false\\t \\r\\r\\t,\\n\\t \\r\\t\\n\\n\\\"L}1\\\\n\\\\f\\\"\\r:\\n\\t {\\r\\n} \\r  \\r, " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d5d954121ae2d993c9ac6074feef6116) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// CloseElements
	// JSON: '\r {\t\t \"\": null\n\r\n, \"c\"\n\t:[\r {\t  \n\"\\r\\f{q\": \t\rnull,\r\n \"T\"\n\n\t\t\t:\r\t\t\"<.\"\r, \r\t\"J\\t\"\t \t:\ttrue\r}\r\r ,\r \"6N\"'
	const char* json = "\r {\t\t \"\": null\n\r\n, \"c\"\n\t:[\r {\t  \n\"\\r\\f{q\": \t\rnull,\r\n \"T\"\n\n\t\t\t:\r\t\t\"<.\"\r, \r\t\"J\\t\"\t \t:\ttrue\r}\r\r ,\r \"6N\"";
	std::cerr << "Plain JSON string from model: " << "\\r {\\t\\t \\\"\\\": null\\n\\r\\n, \\\"c\\\"\\n\\t:[\\r {\\t  \\n\\\"\\\\r\\\\f{q\\\": \\t\\rnull,\\r\\n \\\"T\\\"\\n\\n\\t\\t\\t:\\r\\t\\t\\\"<.\\\"\\r, \\r\\t\\\"J\\\\t\\\"\\t \\t:\\ttrue\\r}\\r\\r ,\\r \\\"6N\\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_4fdf9c8ae568f1c7d5a1dc22e25e51cf) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// JSON: '\r{ \t\r\t\n\n\"\\/\\nG\\\"04\":{  \"\":  -0,\r\"\\rmz%\"\t\n\t:\n{\n}},\r\t\n\t \"\\/\\n\":{}\r \n\t \n,\n\r\r\r\n\"X\"\n\n  :false\n\r,\"\\r@h\" \t\t'
	const char* json = "\r{ \t\r\t\n\n\"\\/\\nG\\\"04\":{  \"\":  -0,\r\"\\rmz%\"\t\n\t:\n{\n}},\r\t\n\t \"\\/\\n\":{}\r \n\t \n,\n\r\r\r\n\"X\"\n\n  :false\n\r,\"\\r@h\" \t\t";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\t\\r\\t\\n\\n\\\"\\\\/\\\\nG\\\\\\\"04\\\":{  \\\"\\\":  -0,\\r\\\"\\\\rmz%\\\"\\t\\n\\t:\\n{\\n}},\\r\\t\\n\\t \\\"\\\\/\\\\n\\\":{}\\r \\n\\t \\n,\\n\\r\\r\\r\\n\\\"X\\\"\\n\\n  :false\\n\\r,\\\"\\\\r@h\\\" \\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b6fa81b9d18926ae129ddc86d48f5d50) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// JSON: '\r{\t \n\"=\":null \n\n,  \r \r\"n\":-0.0\t,\n\"Z\\\\\"\n:\t\r\rnull,\r \"\\\"\" \t\t : false ,\t\"\"\t\t : {}\t\t\r,\t\"03\"\t\r\n\n: [\n false'
	const char* json = "\r{\t \n\"=\":null \n\n,  \r \r\"n\":-0.0\t,\n\"Z\\\\\"\n:\t\r\rnull,\r \"\\\"\" \t\t : false ,\t\"\"\t\t : {}\t\t\r,\t\"03\"\t\r\n\n: [\n false";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t \\n\\\"=\\\":null \\n\\n,  \\r \\r\\\"n\\\":-0.0\\t,\\n\\\"Z\\\\\\\\\\\"\\n:\\t\\r\\rnull,\\r \\\"\\\\\\\"\\\" \\t\\t : false ,\\t\\\"\\\"\\t\\t : {}\\t\\t\\r,\\t\\\"03\\\"\\t\\r\\n\\n: [\\n false" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8d253a87bf39bfa766471217802636ad) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// JSON: '{\t\"\\\\9\\n\"\n:\rtrue \n\r\n\t\n,\r\"I\"\t\r:true\t,\r\r \"(\\\"\\\"\\/\"\t : false\n  ,\n\r\n \"\":{\r\n\n\"\\/\":[ \n] },\t\n\n\r\"H\\fy\"\n \n: \n'
	const char* json = "{\t\"\\\\9\\n\"\n:\rtrue \n\r\n\t\n,\r\"I\"\t\r:true\t,\r\r \"(\\\"\\\"\\/\"\t : false\n  ,\n\r\n \"\":{\r\n\n\"\\/\":[ \n] },\t\n\n\r\"H\\fy\"\n \n: \n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\\\\\9\\\\n\\\"\\n:\\rtrue \\n\\r\\n\\t\\n,\\r\\\"I\\\"\\t\\r:true\\t,\\r\\r \\\"(\\\\\\\"\\\\\\\"\\\\/\\\"\\t : false\\n  ,\\n\\r\\n \\\"\\\":{\\r\\n\\n\\\"\\\\/\\\":[ \\n] },\\t\\n\\n\\r\\\"H\\\\fy\\\"\\n \\n: \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_da505ed29281d16acf20a4cc1fdb4a1d) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{\n\n\r\t\r\t\"\"\n\t:false\r\t\t ,\t\t \"v\" :{\n}  ,\n \r\n\"\\n\\b\"\n:\"\\r[\" \r\r\n\r ,\r\r\"^\"\n\t\t\r \t:-2\r,\t \r\"\\r\\r\\\"\":60\t ,\r\"b\"\r: -'
	const char* json = "{\n\n\r\t\r\t\"\"\n\t:false\r\t\t ,\t\t \"v\" :{\n}  ,\n \r\n\"\\n\\b\"\n:\"\\r[\" \r\r\n\r ,\r\r\"^\"\n\t\t\r \t:-2\r,\t \r\"\\r\\r\\\"\":60\t ,\r\"b\"\r: -";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\r\\t\\r\\t\\\"\\\"\\n\\t:false\\r\\t\\t ,\\t\\t \\\"v\\\" :{\\n}  ,\\n \\r\\n\\\"\\\\n\\\\b\\\"\\n:\\\"\\\\r[\\\" \\r\\r\\n\\r ,\\r\\r\\\"^\\\"\\n\\t\\t\\r \\t:-2\\r,\\t \\r\\\"\\\\r\\\\r\\\\\\\"\\\":60\\t ,\\r\\\"b\\\"\\r: -" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b6681440889d406a7fff5b5e5a4c18e9) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// JSON: '{\t\t\"\"\r\t:\r\"M\"\r\r \n\t\n,\n\n\"\\/\":\r\n\"\\n\\\"D\" \r,\t\r\n\t\"\\n\" \n \n:false\r\n,  \"E\"\n\n :  \ttrue\n  \n\t\t, \r \">\"\t:null\n\t\n,\n\n'
	const char* json = "{\t\t\"\"\r\t:\r\"M\"\r\r \n\t\n,\n\n\"\\/\":\r\n\"\\n\\\"D\" \r,\t\r\n\t\"\\n\" \n \n:false\r\n,  \"E\"\n\n :  \ttrue\n  \n\t\t, \r \">\"\t:null\n\t\n,\n\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"\\\"\\r\\t:\\r\\\"M\\\"\\r\\r \\n\\t\\n,\\n\\n\\\"\\\\/\\\":\\r\\n\\\"\\\\n\\\\\\\"D\\\" \\r,\\t\\r\\n\\t\\\"\\\\n\\\" \\n \\n:false\\r\\n,  \\\"E\\\"\\n\\n :  \\ttrue\\n  \\n\\t\\t, \\r \\\">\\\"\\t:null\\n\\t\\n,\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fc0be878eb29fa3183977dd0f770c441) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// JSON: '{\"\\/\\r-\":\t\n\ntrue\t\r, \n\r\"\\b\"\n:70\t\r\n ,\n\n\"\\/\\fy\\/\"\t\r :\"\\\"j2\"\r \r,\r \t\"\\\\p7L\\n\"\t:\n \tnull\t\r \n,\r\n\r \"{\"\n\r\t:\r[]'
	const char* json = "{\"\\/\\r-\":\t\n\ntrue\t\r, \n\r\"\\b\"\n:70\t\r\n ,\n\n\"\\/\\fy\\/\"\t\r :\"\\\"j2\"\r \r,\r \t\"\\\\p7L\\n\"\t:\n \tnull\t\r \n,\r\n\r \"{\"\n\r\t:\r[]";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\/\\\\r-\\\":\\t\\n\\ntrue\\t\\r, \\n\\r\\\"\\\\b\\\"\\n:70\\t\\r\\n ,\\n\\n\\\"\\\\/\\\\fy\\\\/\\\"\\t\\r :\\\"\\\\\\\"j2\\\"\\r \\r,\\r \\t\\\"\\\\\\\\p7L\\\\n\\\"\\t:\\n \\tnull\\t\\r \\n,\\r\\n\\r \\\"{\\\"\\n\\r\\t:\\r[]" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_57147b895c9b6503341a98287f6c7af5) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// JSON: '{ \"\"\t \r:[]\r\t\r,   \n\"-|\"\t\t:  \n\"n\\\\Q\",\t\"&\\nk\"\r:\rtrue\r \r\t,\"] \"\n\r: \".\"\t\n\n,\"\\ri\" \t\t:   null \n\r\n,  \t\"\\r\"\r:\n'
	const char* json = "{ \"\"\t \r:[]\r\t\r,   \n\"-|\"\t\t:  \n\"n\\\\Q\",\t\"&\\nk\"\r:\rtrue\r \r\t,\"] \"\n\r: \".\"\t\n\n,\"\\ri\" \t\t:   null \n\r\n,  \t\"\\r\"\r:\n";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\t \\r:[]\\r\\t\\r,   \\n\\\"-|\\\"\\t\\t:  \\n\\\"n\\\\\\\\Q\\\",\\t\\\"&\\\\nk\\\"\\r:\\rtrue\\r \\r\\t,\\\"] \\\"\\n\\r: \\\".\\\"\\t\\n\\n,\\\"\\\\ri\\\" \\t\\t:   null \\n\\r\\n,  \\t\\\"\\\\r\\\"\\r:\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_37fe2f42b0adb65ab5743ee5345876cf) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// OpenString
	// JSON: '{\t\"\\\\\\\\\":true\t\t,\"\\bz\\\\\" \r\r:\nnull\n, \r\r\"\"\n: \"\\b\\b\"\n\n\r, \"\\\\\":[\n\n] \t\n,\t\"\\\\y\\\\\\nb\"\t\r:\t\t-0\t,\n\r \"\\t\\/\" :[ \"'
	const char* json = "{\t\"\\\\\\\\\":true\t\t,\"\\bz\\\\\" \r\r:\nnull\n, \r\r\"\"\n: \"\\b\\b\"\n\n\r, \"\\\\\":[\n\n] \t\n,\t\"\\\\y\\\\\\nb\"\t\r:\t\t-0\t,\n\r \"\\t\\/\" :[ \"";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\\\\\\\\\\\\\\\\":true\\t\\t,\\\"\\\\bz\\\\\\\\\\\" \\r\\r:\\nnull\\n, \\r\\r\\\"\\\"\\n: \\\"\\\\b\\\\b\\\"\\n\\n\\r, \\\"\\\\\\\\\\\":[\\n\\n] \\t\\n,\\t\\\"\\\\\\\\y\\\\\\\\\\\\nb\\\"\\t\\r:\\t\\t-0\\t,\\n\\r \\\"\\\\t\\\\/\\\" :[ \\\"" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b538a449d06bcead65e5cbed923b7d82) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\t\"n\"\r:   true }\n\t'
	const char* json = " {\t\"n\"\r:   true }\n\t";
	std::cerr << "Plain JSON string from model: " << " {\\t\\\"n\\\"\\r:   true }\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_370e144aafb4bb2d5e1f7e6542bdd613) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\"\"\r \r\t :true \r,\r\"#\"\n:null\r\r,\t\t \"+\\f\"\r :\r\"\\\"m^.&\",\n\n\"+\\/\\f\\\"\\f\\/\"  \t\r\t:\t []\r\n\n\n}\r'
	const char* json = "{\r\"\"\r \r\t :true \r,\r\"#\"\n:null\r\r,\t\t \"+\\f\"\r :\r\"\\\"m^.&\",\n\n\"+\\/\\f\\\"\\f\\/\"  \t\r\t:\t []\r\n\n\n}\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\r \\r\\t :true \\r,\\r\\\"#\\\"\\n:null\\r\\r,\\t\\t \\\"+\\\\f\\\"\\r :\\r\\\"\\\\\\\"m^.&\\\",\\n\\n\\\"+\\\\/\\\\f\\\\\\\"\\\\f\\\\/\\\"  \\t\\r\\t:\\t []\\r\\n\\n\\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '#' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '+\f' = '\"m^.&'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "+\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"m^.&", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_76d2e4a68d818eb61b736a54706f350a) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\"\t :false} '
	const char* json = "{\"\"\t :false} ";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\t :false} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_94e17d7d385cf02abd526eb8489e09c1) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\"\\n\\t\":\r[] }\n'
	const char* json = "{\n\"\\n\\t\":\r[] }\n";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\\n\\\\t\\\":\\r[] }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_a07e4e1ba1dbb705f0bf73cd9f9ae7c6) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '  \n{\n\"\\b9\\fr\\n\"\n\r\t:\n[{ \"\" \r\t\n:\r\r\n-0.05E+00\n\t,\t  \"w\\r9\\r\\n\" \r :\rtrue\n \t  \t}\n\t\n\t\r]\n\r\t}'
	const char* json = "  \n{\n\"\\b9\\fr\\n\"\n\r\t:\n[{ \"\" \r\t\n:\r\r\n-0.05E+00\n\t,\t  \"w\\r9\\r\\n\" \r :\rtrue\n \t  \t}\n\t\n\t\r]\n\r\t}";
	std::cerr << "Plain JSON string from model: " << "  \\n{\\n\\\"\\\\b9\\\\fr\\\\n\\\"\\n\\r\\t:\\n[{ \\\"\\\" \\r\\t\\n:\\r\\r\\n-0.05E+00\\n\\t,\\t  \\\"w\\\\r9\\\\r\\\\n\\\" \\r :\\rtrue\\n \\t  \\t}\\n\\t\\n\\t\\r]\\n\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b9\fr\n':0:'' = '-0.05'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b9\fr\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.05, cJSON_double(child));
	}
	{
		// '\b9\fr\n':0:'w\r9\r\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b9\fr\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "w\r9\r\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_feea05ff8537bbfce10ca698d54cc56a) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\"\\/\\/\"\r \r\t:\nnull,\t\t\r\t\"\" \t\t: null\n  \t\r}\n'
	const char* json = "{\r\"\\/\\/\"\r \r\t:\nnull,\t\t\r\t\"\" \t\t: null\n  \t\r}\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\/\\\\/\\\"\\r \\r\\t:\\nnull,\\t\\t\\r\\t\\\"\\\" \\t\\t: null\\n  \\t\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '//' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "//");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4cf96ce38c33ff84c8e7c581e2cac867) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{  \n\"\\b\\b[\":-006.03 \t}\t '
	const char* json = "\n{  \n\"\\b\\b[\":-006.03 \t}\t ";
	std::cerr << "Plain JSON string from model: " << "\\n{  \\n\\\"\\\\b\\\\b[\\\":-006.03 \\t}\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8f4ae0dc25d0e679f78eeb2c803d11dd) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\"\\n\\\"\":\rtrue,\"\"\r :\"l\"\t\r\r}\n\t'
	const char* json = "{\n\"\\n\\\"\":\rtrue,\"\"\r :\"l\"\t\r\r}\n\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\\n\\\\\\\"\\\":\\rtrue,\\\"\\\"\\r :\\\"l\\\"\\t\\r\\r}\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'l'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("l", cJSON_string(child));
	}
	{
		// '\n\"' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6a15225eae183e55e26bfbc3e4b079c5) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\n \n\"\"\n\r\r:-0.030\t\r}'
	const char* json = "{\r\n \n\"\"\n\r\r:-0.030\t\r}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n \\n\\\"\\\"\\n\\r\\r:-0.030\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-0.03'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.03, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_59e8baa419b6b454659a1cfc9d129184) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\r\n\n\"o\\r\":[] \r \t \n}\n'
	const char* json = "\r{\r\n\n\"o\\r\":[] \r \t \n}\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\n\\n\\\"o\\\\r\\\":[] \\r \\t \\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_f093201dc6fff82461f92a48e1110a1b) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' \n{\t\t \r\"\"  :\rnull\r\n\n}\n'
	const char* json = " \n{\t\t \r\"\"  :\rnull\r\n\n}\n";
	std::cerr << "Plain JSON string from model: " << " \\n{\\t\\t \\r\\\"\\\"  :\\rnull\\r\\n\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d0928da08a1e27fc118ded9c2cf080c0) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\n\t{\r\n\"\"\n\r:false\t} '
	const char* json = "\t\n\t{\r\n\"\"\n\r:false\t} ";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\t{\\r\\n\\\"\\\"\\n\\r:false\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cca1efa583311592891fa254b8cce12e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r \n{\t\t\"\"\r\r :\rtrue\t\t ,\r\r\"\\\"^\\t\":\n false\n}\t \r'
	const char* json = "\r \n{\t\t\"\"\r\r :\rtrue\t\t ,\r\r\"\\\"^\\t\":\n false\n}\t \r";
	std::cerr << "Plain JSON string from model: " << "\\r \\n{\\t\\t\\\"\\\"\\r\\r :\\rtrue\\t\\t ,\\r\\r\\\"\\\\\\\"^\\\\t\\\":\\n false\\n}\\t \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\"^\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"^\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_585ee0bdb3dcaa7ed9500c598f4116d1) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\r\n \r\n \"5!\": \n []  }\t'
	const char* json = "\t{\r\n \r\n \"5!\": \n []  }\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\n \\r\\n \\\"5!\\\": \\n []  }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_24942b413415f1b3124950ec2041a9db) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\t\r\n\r \"\\t\"\t\n\t\n:[]}'
	const char* json = "{\r\t\r\n\r \"\\t\"\t\n\t\n:[]}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\r\\n\\r \\\"\\\\t\\\"\\t\\n\\t\\n:[]}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_07e673941d042cce938a1a0d594efbf7) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\"\"\r\n\r:null\t\t\n\r\t}\r'
	const char* json = "{\n\"\"\r\n\r:null\t\t\n\r\t}\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\"\\r\\n\\r:null\\t\\t\\n\\r\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d77a0a40fcb3260919c06d4565d4a549) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\r \"\\n\"\r\t\r\n:null}\n'
	const char* json = "{\t\r \"\\n\"\r\t\r\n:null}\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r \\\"\\\\n\\\"\\r\\t\\r\\n:null}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_942068ca60d46e54a0ff2ebaf98b7306) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\"ku\\b\\f%\\rq<\\\\\"\n:\tnull\r\n,\n \t\n\r\"\\\\\\bV\"\n\r\r:\n \n\"\\\\\"\t \r\r\t}'
	const char* json = "{\r\"ku\\b\\f%\\rq<\\\\\"\n:\tnull\r\n,\n \t\n\r\"\\\\\\bV\"\n\r\r:\n \n\"\\\\\"\t \r\r\t}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"ku\\\\b\\\\f%\\\\rq<\\\\\\\\\\\"\\n:\\tnull\\r\\n,\\n \\t\\n\\r\\\"\\\\\\\\\\\\bV\\\"\\n\\r\\r:\\n \\n\\\"\\\\\\\\\\\"\\t \\r\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\bV' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\bV");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	{
		// 'ku\b\f%\rq<\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ku\b\f%\rq<\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f1acb640584dce03ce253f6f3dad553f) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \n\r \"}\\/Q\"\t\n :\tnull}\r'
	const char* json = "{ \n\r \"}\\/Q\"\t\n :\tnull}\r";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\r \\\"}\\\\/Q\\\"\\t\\n :\\tnull}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '}/Q' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}/Q");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0957bfc28547878c4ba5192a7aeeb0bf) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\t\t\";\"\n:true\t\t,\t\r\r\"\\t1\" \r:null}'
	const char* json = "{\t\t\t\";\"\n:true\t\t,\t\r\r\"\\t1\" \r:null}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\t\\\";\\\"\\n:true\\t\\t,\\t\\r\\r\\\"\\\\t1\\\" \\r:null}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t1' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t1");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// ';' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ";");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6a40f0e1c52fda8b7e5979c85b6e245a) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\r\"Cv\"\n:\n\rtrue\t\n\n, \"\"\n : false} \n'
	const char* json = "{\t\r\"Cv\"\n:\n\rtrue\t\n\n, \"\"\n : false} \n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"Cv\\\"\\n:\\n\\rtrue\\t\\n\\n, \\\"\\\"\\n : false} \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'Cv' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Cv");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_223da487a31a45cac377e7769c5644af) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n{\r\t\n\r\"\\t\\t7L\\bgQz\\t\" \r: \n[\r{}\t\n\n\n, \tfalse,[\nfalse\r,\n\"\"\n\r ,\r\r\t\n07e+00379\r,\"\\\\\"  \r\n\r\n],{} \r\n]\n\n  \n,\t  \t\t\"s\" \n:\t\n true\t\n\n\r}'
	const char* json = "\n{\r\t\n\r\"\\t\\t7L\\bgQz\\t\" \r: \n[\r{}\t\n\n\n, \tfalse,[\nfalse\r,\n\"\"\n\r ,\r\r\t\n07e+00379\r,\"\\\\\"  \r\n\r\n],{} \r\n]\n\n  \n,\t  \t\t\"s\" \n:\t\n true\t\n\n\r}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\t\\n\\r\\\"\\\\t\\\\t7L\\\\bgQz\\\\t\\\" \\r: \\n[\\r{}\\t\\n\\n\\n, \\tfalse,[\\nfalse\\r,\\n\\\"\\\"\\n\\r ,\\r\\r\\t\\n07e+00379\\r,\\\"\\\\\\\\\\\"  \\r\\n\\r\\n],{} \\r\\n]\\n\\n  \\n,\\t  \\t\\t\\\"s\\\" \\n:\\t\\n true\\t\\n\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_566dc8f4a34c0c553df6109d4ddc173b) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n \t{ \"\\tr\\n\\\\\"  :[]\r ,\t\r\r\"\"\t :{\t}  \r\r\t\r,\"\\t\"\t\t:\t\n \r\n[\r\n\t\t\"\\\\Tb\\r\\/\\ta\\\"\"\t ]\n\t, \n\"\\\\\\\"\\\"\\\\#\\/3\"\n :\r\rnull\t ,\"\\r\\\\\\\"\":\r{\r}}\n \t'
	const char* json = "\n \t{ \"\\tr\\n\\\\\"  :[]\r ,\t\r\r\"\"\t :{\t}  \r\r\t\r,\"\\t\"\t\t:\t\n \r\n[\r\n\t\t\"\\\\Tb\\r\\/\\ta\\\"\"\t ]\n\t, \n\"\\\\\\\"\\\"\\\\#\\/3\"\n :\r\rnull\t ,\"\\r\\\\\\\"\":\r{\r}}\n \t";
	std::cerr << "Plain JSON string from model: " << "\\n \\t{ \\\"\\\\tr\\\\n\\\\\\\\\\\"  :[]\\r ,\\t\\r\\r\\\"\\\"\\t :{\\t}  \\r\\r\\t\\r,\\\"\\\\t\\\"\\t\\t:\\t\\n \\r\\n[\\r\\n\\t\\t\\\"\\\\\\\\Tb\\\\r\\\\/\\\\ta\\\\\\\"\\\"\\t ]\\n\\t, \\n\\\"\\\\\\\\\\\\\\\"\\\\\\\"\\\\\\\\#\\\\/3\\\"\\n :\\r\\rnull\\t ,\\\"\\\\r\\\\\\\\\\\\\\\"\\\":\\r{\\r}}\\n \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t':0 = '\\Tb\r/\ta\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\Tb\r/\ta\"", cJSON_string(child));
	}
	{
		// '\\\"\"\\#/3' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\"\"\\#/3");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_beb6693e273e7a32ff1347d385107185) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"\" \t\n:\tnull  }  '
	const char* json = "{\"\" \t\n:\tnull  }  ";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\" \\t\\n:\\tnull  }  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_832aa36614b6b191ae2128fc9b822e93) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\r{ \t\r\"\\/\\\\A!;\" \t\t:\n-0090.0\t}\r'
	const char* json = "\t\r{ \t\r\"\\/\\\\A!;\" \t\t:\n-0090.0\t}\r";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{ \\t\\r\\\"\\\\/\\\\\\\\A!;\\\" \\t\\t:\\n-0090.0\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_60e9e9d7c3e402a846cf32fab991f6b9) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\")\" :true\n\t\r,\r\n\n\n\"\"\r:\t\tnull}\t'
	const char* json = "{\t\")\" :true\n\t\r,\r\n\n\n\"\"\r:\t\tnull}\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\")\\\" :true\\n\\t\\r,\\r\\n\\n\\n\\\"\\\"\\r:\\t\\tnull}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ')' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ")");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c50d8c58ff2e02c1eb9bd9e02667e746) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\r\n\r\t\n\"\"\t\n\t: \"3\\t\\\\Y\"\n}'
	const char* json = " {\r\n\r\t\n\"\"\t\n\t: \"3\\t\\\\Y\"\n}";
	std::cerr << "Plain JSON string from model: " << " {\\r\\n\\r\\t\\n\\\"\\\"\\t\\n\\t: \\\"3\\\\t\\\\\\\\Y\\\"\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '3\t\\Y'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("3\t\\Y", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cb90fd451964ddf442393edc6146211b) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\n{\n\t\"}\\\"\" \r\n:{}\t\r ,\"\"\n\r : 0.0E-0\r\n   \n}\t'
	const char* json = "\r\n{\n\t\"}\\\"\" \r\n:{}\t\r ,\"\"\n\r : 0.0E-0\r\n   \n}\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\n\\t\\\"}\\\\\\\"\\\" \\r\\n:{}\\t\\r ,\\\"\\\"\\n\\r : 0.0E-0\\r\\n   \\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4c027bfb2cac00b95a2e6d1e867c8bbc) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// JSON: '{  \n\"\" \r:\r\t{ \"d\"\t\t\t:-06.08005 \t\r,\r \n \"\\\"\\f\\f\\r\\r\"\n\r\t\n: false\n\t\n,\t\r\n\r\"Q|\"\n:\n\nnull \n\t,\n \r\r\t\"\\f\\\"\" :\r\n \n-05.04e+01880\r\r \r\r,\t \"Wj\"\t\n\t:\r{ \r\t\t\"C\"\r:\r[ \"(!=\"   ,\n\t[],\t \n[ \r0.06004040810350e+05040,null]\t \r \t] '
	const char* json = "{  \n\"\" \r:\r\t{ \"d\"\t\t\t:-06.08005 \t\r,\r \n \"\\\"\\f\\f\\r\\r\"\n\r\t\n: false\n\t\n,\t\r\n\r\"Q|\"\n:\n\nnull \n\t,\n \r\r\t\"\\f\\\"\" :\r\n \n-05.04e+01880\r\r \r\r,\t \"Wj\"\t\n\t:\r{ \r\t\t\"C\"\r:\r[ \"(!=\"   ,\n\t[],\t \n[ \r0.06004040810350e+05040,null]\t \r \t] ";
	std::cerr << "Plain JSON string from model: " << "{  \\n\\\"\\\" \\r:\\r\\t{ \\\"d\\\"\\t\\t\\t:-06.08005 \\t\\r,\\r \\n \\\"\\\\\\\"\\\\f\\\\f\\\\r\\\\r\\\"\\n\\r\\t\\n: false\\n\\t\\n,\\t\\r\\n\\r\\\"Q|\\\"\\n:\\n\\nnull \\n\\t,\\n \\r\\r\\t\\\"\\\\f\\\\\\\"\\\" :\\r\\n \\n-05.04e+01880\\r\\r \\r\\r,\\t \\\"Wj\\\"\\t\\n\\t:\\r{ \\r\\t\\t\\\"C\\\"\\r:\\r[ \\\"(!=\\\"   ,\\n\\t[],\\t \\n[ \\r0.06004040810350e+05040,null]\\t \\r \\t] " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cc1fbcc1e54b3af68538d774b667066d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\"\"\t:true\r\t,\t \",\":true }  '
	const char* json = "\n{\"\"\t:true\r\t,\t \",\":true }  ";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\"\\t:true\\r\\t,\\t \\\",\\\":true }  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// ',' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ",");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_93187d5c8f143a9a48caf1c23f5350ec) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\"\\/\"\t:  true\r}'
	const char* json = "{\t\n\"\\/\"\t:  true\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"\\\\/\\\"\\t:  true\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9865b39bddef1197e39a9362ad765f96) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\r{\n\r \t\n\t\r\"5\\t\\f\"\n:[\t]}'
	const char* json = "\r\r{\n\r \t\n\t\r\"5\\t\\f\"\n:[\t]}";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\n\\r \\t\\n\\t\\r\\\"5\\\\t\\\\f\\\"\\n:[\\t]}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_be48c01367b5654963f651cf462e1dc2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' \t\n{\"\"  :true\n\n }\t'
	const char* json = " \t\n{\"\"  :true\n\n }\t";
	std::cerr << "Plain JSON string from model: " << " \\t\\n{\\\"\\\"  :true\\n\\n }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_273178d5b551403b8842d428bc3a65b3) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\": \r null}\t'
	const char* json = "{\"\": \r null}\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\": \\r null}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_25571979e575f2aad97a85f7dcaffc7c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r\n\r{\t\n\"\"\t:{ \r\r\"\\b0\\t\\\\f\":\"M\"\r ,\n \r\"\\\"\\\\n\"\t:\t{},\n\n\t\t\"r\"\r\r:\r\ttrue \n\t,\r \"\\\\\\b\\\\\\n\"\t\r:{ \"\\t\\nD\\/i\\t\"\n\n:\")\\t*\"\r\r , \"\\\"\\/\\b4\\f\\f\"\n \n\t  :true\t\t\t}\r\n},\r\n\n\"lL\\/\"\t   \t:{}\t}'
	const char* json = "\r\n\r{\t\n\"\"\t:{ \r\r\"\\b0\\t\\\\f\":\"M\"\r ,\n \r\"\\\"\\\\n\"\t:\t{},\n\n\t\t\"r\"\r\r:\r\ttrue \n\t,\r \"\\\\\\b\\\\\\n\"\t\r:{ \"\\t\\nD\\/i\\t\"\n\n:\")\\t*\"\r\r , \"\\\"\\/\\b4\\f\\f\"\n \n\t  :true\t\t\t}\r\n},\r\n\n\"lL\\/\"\t   \t:{}\t}";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\r{\\t\\n\\\"\\\"\\t:{ \\r\\r\\\"\\\\b0\\\\t\\\\\\\\f\\\":\\\"M\\\"\\r ,\\n \\r\\\"\\\\\\\"\\\\\\\\n\\\"\\t:\\t{},\\n\\n\\t\\t\\\"r\\\"\\r\\r:\\r\\ttrue \\n\\t,\\r \\\"\\\\\\\\\\\\b\\\\\\\\\\\\n\\\"\\t\\r:{ \\\"\\\\t\\\\nD\\\\/i\\\\t\\\"\\n\\n:\\\")\\\\t*\\\"\\r\\r , \\\"\\\\\\\"\\\\/\\\\b4\\\\f\\\\f\\\"\\n \\n\\t  :true\\t\\t\\t}\\r\\n},\\r\\n\\n\\\"lL\\\\/\\\"\\t   \\t:{}\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':'\\\b\\\n':'\t\nD/i\t' = ')\t*'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\b\\\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\nD/i\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(")\t*", cJSON_string(child));
	}
	{
		// '':'\\\b\\\n':'\"/\b4\f\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\b\\\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"/\b4\f\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':'\b0\t\\f' = 'M'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b0\t\\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("M", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_169162dce7da04f75e59215565c0e2e3) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\r\t\r\"\\f\"\n\r:true\t\t,\n\"j\" :\"\\\"(\\b!\\b<x\\n\\npo\\r,\"\t,\t \r\"{\\f=\"\r:null\t\r\r,\t \n\"\\bQG\":\r{\t\"\"\t:\r{\"1Z3\\t\\b\\n\"\t:false } \r\r } \t}\n'
	const char* json = "\r{\r\t\r\"\\f\"\n\r:true\t\t,\n\"j\" :\"\\\"(\\b!\\b<x\\n\\npo\\r,\"\t,\t \r\"{\\f=\"\r:null\t\r\r,\t \n\"\\bQG\":\r{\t\"\"\t:\r{\"1Z3\\t\\b\\n\"\t:false } \r\r } \t}\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\t\\r\\\"\\\\f\\\"\\n\\r:true\\t\\t,\\n\\\"j\\\" :\\\"\\\\\\\"(\\\\b!\\\\b<x\\\\n\\\\npo\\\\r,\\\"\\t,\\t \\r\\\"{\\\\f=\\\"\\r:null\\t\\r\\r,\\t \\n\\\"\\\\bQG\\\":\\r{\\t\\\"\\\"\\t:\\r{\\\"1Z3\\\\t\\\\b\\\\n\\\"\\t:false } \\r\\r } \\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '{\f=' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "{\f=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'j' = '\"(\b!\b<x\n\npo\r,'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "j");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"(\b!\b<x\n\npo\r,", cJSON_string(child));
	}
	{
		// '\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\bQG':'':'1Z3\t\b\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bQG");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1Z3\t\b\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fb7529a515eabb431a061339511cbefb) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '  {\"yy\\r\"\n\n\t:\rtrue\t\n\r}\t\r'
	const char* json = "  {\"yy\\r\"\n\n\t:\rtrue\t\n\r}\t\r";
	std::cerr << "Plain JSON string from model: " << "  {\\\"yy\\\\r\\\"\\n\\n\\t:\\rtrue\\t\\n\\r}\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'yy\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "yy\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ebcec5aaaca72bd0afa497b7de31215a) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \n\"\"\t\r\n : \r[\n\n \n{\r\"_\\f\":-0037\r }, \r\"\\\\R\\\"IF\" ,\t\ttrue\r\n\t]\r }'
	const char* json = "{ \n\"\"\t\r\n : \r[\n\n \n{\r\"_\\f\":-0037\r }, \r\"\\\\R\\\"IF\" ,\t\ttrue\r\n\t]\r }";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\"\\t\\r\\n : \\r[\\n\\n \\n{\\r\\\"_\\\\f\\\":-0037\\r }, \\r\\\"\\\\\\\\R\\\\\\\"IF\\\" ,\\t\\ttrue\\r\\n\\t]\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b17ed38d9e2b98c5bca60e7fe5bc1cb3) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t\t\n\t\r\"\" : \n-001e+00\r\t\t\t}'
	const char* json = "{\t\t\n\t\r\"\" : \n-001e+00\r\t\t\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\n\\t\\r\\\"\\\" : \\n-001e+00\\r\\t\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8c2525764b61ff0ae3535470c5116ea6) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\t \n \n\"\":true  \t,\n  \n\r\r\"\\/Z\":\r [\r\t\r[-0E+070,\t{}\n]]\n\r\n\t\t\r,\t\n\r\"\\fT\" :true\t}\r\t\t'
	const char* json = "{\n\t \n \n\"\":true  \t,\n  \n\r\r\"\\/Z\":\r [\r\t\r[-0E+070,\t{}\n]]\n\r\n\t\t\r,\t\n\r\"\\fT\" :true\t}\r\t\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t \\n \\n\\\"\\\":true  \\t,\\n  \\n\\r\\r\\\"\\\\/Z\\\":\\r [\\r\\t\\r[-0E+070,\\t{}\\n]]\\n\\r\\n\\t\\t\\r,\\t\\n\\r\\\"\\\\fT\\\" :true\\t}\\r\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\fT' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fT");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '/Z':0:0 = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/Z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3dd9e4170e9ac37aebf165b7dc56b062) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"\":  [\n]\r\t\n \t}'
	const char* json = "{\r\"\":  [\n]\r\t\n \t}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\":  [\\n]\\r\\t\\n \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_6c8d31e1e2df3c9106d40311e930f883) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\t\"w0\\\\\\r\\r\\\\Y#\\\\\"\n\r:\n\t -0.0e+001,\r \n\"\"  \n:070e0\t\t \r\t\r,\n\r\n\"HT\"\t  \n\n: \rfalse\r\n\t\t,\r \n\n\t\n\"\\b\"\r \n:null\r\n,\n \"\\n\"\n \n\t :null  \r\n}\n\t '
	const char* json = "\r{\t\"w0\\\\\\r\\r\\\\Y#\\\\\"\n\r:\n\t -0.0e+001,\r \n\"\"  \n:070e0\t\t \r\t\r,\n\r\n\"HT\"\t  \n\n: \rfalse\r\n\t\t,\r \n\n\t\n\"\\b\"\r \n:null\r\n,\n \"\\n\"\n \n\t :null  \r\n}\n\t ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\\"w0\\\\\\\\\\\\r\\\\r\\\\\\\\Y#\\\\\\\\\\\"\\n\\r:\\n\\t -0.0e+001,\\r \\n\\\"\\\"  \\n:070e0\\t\\t \\r\\t\\r,\\n\\r\\n\\\"HT\\\"\\t  \\n\\n: \\rfalse\\r\\n\\t\\t,\\r \\n\\n\\t\\n\\\"\\\\b\\\"\\r \\n:null\\r\\n,\\n \\\"\\\\n\\\"\\n \\n\\t :null  \\r\\n}\\n\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ad03c332bb3909440fadfa856295ad3c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\r\r \t\"U\"\t:-0  ,\"+\\\\\\b+\\r\\\\\\t=(w\\n\" : \t\r-00 }'
	const char* json = "{\r\r\r \t\"U\"\t:-0  ,\"+\\\\\\b+\\r\\\\\\t=(w\\n\" : \t\r-00 }";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\r \\t\\\"U\\\"\\t:-0  ,\\\"+\\\\\\\\\\\\b+\\\\r\\\\\\\\\\\\t=(w\\\\n\\\" : \\t\\r-00 }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cc8f0992b9772cc3fba179b9a219631f) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t { \r\"\" :\t\r\ttrue\n\t,\n\r\"\\n\"\t\n  :{}\t,\r \t\"\\t\":  [\t \n\rfalse\n \r]  \r}\n\n'
	const char* json = "\t { \r\"\" :\t\r\ttrue\n\t,\n\r\"\\n\"\t\n  :{}\t,\r \t\"\\t\":  [\t \n\rfalse\n \r]  \r}\n\n";
	std::cerr << "Plain JSON string from model: " << "\\t { \\r\\\"\\\" :\\t\\r\\ttrue\\n\\t,\\n\\r\\\"\\\\n\\\"\\t\\n  :{}\\t,\\r \\t\\\"\\\\t\\\":  [\\t \\n\\rfalse\\n \\r]  \\r}\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\t':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_84be8198d0677999d527db0aa226bfb0) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \t\"\":\n{\t \r\"#\":[\r\n\n{},\ntrue,\t\"x]I\"\r]}\n\r,\"\\\"O\\f\"\n:\nfalse\r\r}\r\r\r'
	const char* json = "{ \t\"\":\n{\t \r\"#\":[\r\n\n{},\ntrue,\t\"x]I\"\r]}\n\r,\"\\\"O\\f\"\n:\nfalse\r\r}\r\r\r";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"\\\":\\n{\\t \\r\\\"#\\\":[\\r\\n\\n{},\\ntrue,\\t\\\"x]I\\\"\\r]}\\n\\r,\\\"\\\\\\\"O\\\\f\\\"\\n:\\nfalse\\r\\r}\\r\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'#':1 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':'#':2 = 'x]I'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("x]I", cJSON_string(child));
	}
	{
		// '\"O\f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"O\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_21ebce5769c13d8f14f17884308c078f) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r \r \"+\"\n\n\r\t\t:0E-06 \n }\t'
	const char* json = "{\r \r \"+\"\n\n\r\t\t:0E-06 \n }\t";
	std::cerr << "Plain JSON string from model: " << "{\\r \\r \\\"+\\\"\\n\\n\\r\\t\\t:0E-06 \\n }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '+' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "+");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_de56b41088ff433fa7e80a142426b177) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \r\t\r\t\t\"}\\rg\\t\\/8\"\r: true\t \n \n,\n\t\r\n\">\\\"V\\r!\": 0, \n\r\n\"\\n\\r7\\n\"\r\t :\ntrue\r\r }'
	const char* json = "{ \r\t\r\t\t\"}\\rg\\t\\/8\"\r: true\t \n \n,\n\t\r\n\">\\\"V\\r!\": 0, \n\r\n\"\\n\\r7\\n\"\r\t :\ntrue\r\r }";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\t\\r\\t\\t\\\"}\\\\rg\\\\t\\\\/8\\\"\\r: true\\t \\n \\n,\\n\\t\\r\\n\\\">\\\\\\\"V\\\\r!\\\": 0, \\n\\r\\n\\\"\\\\n\\\\r7\\\\n\\\"\\r\\t :\\ntrue\\r\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '>\"V\r!' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ">\"V\r!");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\n\r7\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\r7\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '}\rg\t/8' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}\rg\t/8");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5464fa2ec08fa8c6a708a59634c28b16) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{ \r \"\\/S\\\"\":true}'
	const char* json = "\t{ \r \"\\/S\\\"\":true}";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\r \\\"\\\\/S\\\\\\\"\\\":true}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/S\"' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/S\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_38906168a59088e049ed75a827472b0b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\"\\t'\\/\\r\"\n:-000.0E+00070717013060\t\n}\r'
	const char* json = "\n{\"\\t'\\/\\r\"\n:-000.0E+00070717013060\t\n}\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\\t'\\\\/\\\\r\\\"\\n:-000.0E+00070717013060\\t\\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a97c1f6e7c7692f395bcba3c5d931eea) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{ \t\r\"\\\\\\td\"\n\r\r:0e+0536001\t \r, \t\r\"\" :false \r,\n \t\">mXX\":0e00009\r\r\r\n\n}\t\r'
	const char* json = "\r{ \t\r\"\\\\\\td\"\n\r\r:0e+0536001\t \r, \t\r\"\" :false \r,\n \t\">mXX\":0e00009\r\r\r\n\n}\t\r";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\t\\r\\\"\\\\\\\\\\\\td\\\"\\n\\r\\r:0e+0536001\\t \\r, \\t\\r\\\"\\\" :false \\r,\\n \\t\\\">mXX\\\":0e00009\\r\\r\\r\\n\\n}\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\td' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\td");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '>mXX' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ">mXX");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7b39e658e96d2f53097dd2059046bb7b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\r\"9[z\" :true\r\n}\n'
	const char* json = "\r{\r\"9[z\" :true\r\n}\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\\"9[z\\\" :true\\r\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '9[z' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "9[z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1864a5b361b9ff2fa0a45c00771404fb) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\t\r\n\"\":01.00\n}'
	const char* json = "{\n\t\r\n\"\":01.00\n}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\r\\n\\\"\\\":01.00\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ce96360f992dc595ff39a1644fc5c526) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\n\r\t\"\" \r:\n\n null \t\r\n\r }\t\r'
	const char* json = " {\n\r\t\"\" \r:\n\n null \t\r\n\r }\t\r";
	std::cerr << "Plain JSON string from model: " << " {\\n\\r\\t\\\"\\\" \\r:\\n\\n null \\t\\r\\n\\r }\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_aea952c521ca857fffb15149fc847c17) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '  \t{\n \"\"\n \r:\nnull\r\n\n}\t  '
	const char* json = "  \t{\n \"\"\n \r:\nnull\r\n\n}\t  ";
	std::cerr << "Plain JSON string from model: " << "  \\t{\\n \\\"\\\"\\n \\r:\\nnull\\r\\n\\n}\\t  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_90a1bb602c7011a1ff53f169a359cf8e) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \n\"\\b\"\r\r :\tnull\r\n}  \r'
	const char* json = "{ \n\"\\b\"\r\r :\tnull\r\n}  \r";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\\b\\\"\\r\\r :\\tnull\\r\\n}  \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_12e8d8708c64bacf3f7b26145db0845b) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\"\": \r[\r]\r\t ,\t\r\t\r\":\\t\\noq\\/\" :null\t,\t\n\"Y\"\r \t : null\r\t\n}\t\t\t'
	const char* json = "{\n\"\": \r[\r]\r\t ,\t\r\t\r\":\\t\\noq\\/\" :null\t,\t\n\"Y\"\r \t : null\r\t\n}\t\t\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\": \\r[\\r]\\r\\t ,\\t\\r\\t\\r\\\":\\\\t\\\\noq\\\\/\\\" :null\\t,\\t\\n\\\"Y\\\"\\r \\t : null\\r\\t\\n}\\t\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Y' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Y");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// ':\t\noq/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ":\t\noq/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8f8e94f1028e34a086e379ca318ed8cb) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\r{\"\\t\\nH)\\r\\/v\": {}\r}\n'
	const char* json = "\r\r{\"\\t\\nH)\\r\\/v\": {}\r}\n";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\\"\\\\t\\\\nH)\\\\r\\\\/v\\\": {}\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_6626b48e21515a8c5646b85ccf34e7aa) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{\t\r\t\n\"\\b\\\"\"  : \t{}\n  \n\t ,\n\t\"\"\r\n\r:\tfalse, \t\r\n\"5\"\n\t :{\r\n}\n  \t}'
	const char* json = "\t{\t\r\t\n\"\\b\\\"\"  : \t{}\n  \n\t ,\n\t\"\"\r\n\r:\tfalse, \t\r\n\"5\"\n\t :{\r\n}\n  \t}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\r\\t\\n\\\"\\\\b\\\\\\\"\\\"  : \\t{}\\n  \\n\\t ,\\n\\t\\\"\\\"\\r\\n\\r:\\tfalse, \\t\\r\\n\\\"5\\\"\\n\\t :{\\r\\n}\\n  \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e1409997405d96e878b9b79a8ebf2b5e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\"\":null\r\t}'
	const char* json = "\r{\"\":null\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\":null\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_17dd2c414196079dc1edf6cd8860daac) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t \"\"\t:\t0E-060960004\r\t\n\t\t\n\n,\n  \"D\\/\\\"\\/\" \t\t:\n\n\ttrue}'
	const char* json = "{\t \"\"\t:\t0E-060960004\r\t\n\t\t\n\n,\n  \"D\\/\\\"\\/\" \t\t:\n\n\ttrue}";
	std::cerr << "Plain JSON string from model: " << "{\\t \\\"\\\"\\t:\\t0E-060960004\\r\\t\\n\\t\\t\\n\\n,\\n  \\\"D\\\\/\\\\\\\"\\\\/\\\" \\t\\t:\\n\\n\\ttrue}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// 'D/\"/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "D/\"/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7b747d40cee1ec72498ed035225780a7) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' { \"\"\n\t\r\r\n:\nnull, \t\"~\\n<\"\r\t:\"`\\n\"\r\n,\n\t\"\\\\3\\\\\\n!\"\r:\t\t002.04\t\r ,\t\"n\"\n  :\t [\n]\t,    \";\" :\nnull,\n\n\r\"E\"\n :\r{}\t\n}'
	const char* json = " { \"\"\n\t\r\r\n:\nnull, \t\"~\\n<\"\r\t:\"`\\n\"\r\n,\n\t\"\\\\3\\\\\\n!\"\r:\t\t002.04\t\r ,\t\"n\"\n  :\t [\n]\t,    \";\" :\nnull,\n\n\r\"E\"\n :\r{}\t\n}";
	std::cerr << "Plain JSON string from model: " << " { \\\"\\\"\\n\\t\\r\\r\\n:\\nnull, \\t\\\"~\\\\n<\\\"\\r\\t:\\\"`\\\\n\\\"\\r\\n,\\n\\t\\\"\\\\\\\\3\\\\\\\\\\\\n!\\\"\\r:\\t\\t002.04\\t\\r ,\\t\\\"n\\\"\\n  :\\t [\\n]\\t,    \\\";\\\" :\\nnull,\\n\\n\\r\\\"E\\\"\\n :\\r{}\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_fced044f6e3ae3ce17084a78ed6d9e2f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\"\"\t \r\t\r:{\r\t\"l:\"   : \n\"{\"\n}\t\r \r,\r\"\\\\X\"\t\n\r:000001e00062\r\t\t}'
	const char* json = " {\"\"\t \r\t\r:{\r\t\"l:\"   : \n\"{\"\n}\t\r \r,\r\"\\\\X\"\t\n\r:000001e00062\r\t\t}";
	std::cerr << "Plain JSON string from model: " << " {\\\"\\\"\\t \\r\\t\\r:{\\r\\t\\\"l:\\\"   : \\n\\\"{\\\"\\n}\\t\\r \\r,\\r\\\"\\\\\\\\X\\\"\\t\\n\\r:000001e00062\\r\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_86a0e03922f635d165f757a88016f8b6) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\n \n\"ft\"\t :\n 00\r\r \r\n\t,  \r \r\"\\r\"\t   \r :\t{}\r\n,\r\n\r\t\"\"\t\n\n:\n\t\r{\n\"9\\f\":  -0  \r\r\r} }'
	const char* json = "{\r\n \n\"ft\"\t :\n 00\r\r \r\n\t,  \r \r\"\\r\"\t   \r :\t{}\r\n,\r\n\r\t\"\"\t\n\n:\n\t\r{\n\"9\\f\":  -0  \r\r\r} }";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n \\n\\\"ft\\\"\\t :\\n 00\\r\\r \\r\\n\\t,  \\r \\r\\\"\\\\r\\\"\\t   \\r :\\t{}\\r\\n,\\r\\n\\r\\t\\\"\\\"\\t\\n\\n:\\n\\t\\r{\\n\\\"9\\\\f\\\":  -0  \\r\\r\\r} }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_acb4741ea3506ee6410b01724ee8b472) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n\n \"\\r\" \t:\"i03\"\t\t }'
	const char* json = "{\n\n\n \"\\r\" \t:\"i03\"\t\t }";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\n \\\"\\\\r\\\" \\t:\\\"i03\\\"\\t\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r' = 'i03'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("i03", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_81d0ed95a7579907d4c22e9ccc46a203) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\t\t\"\":  [{\t\t\"?P\"\t\t:\rfalse\n\n\n,\t\"]\\\"7\"\t\n\t:\t\n[  \n],\"u\\/z\"\n:\t\"\\r\" \r\n\t\r }\n]\n\t\r}'
	const char* json = "{\n\t\t\"\":  [{\t\t\"?P\"\t\t:\rfalse\n\n\n,\t\"]\\\"7\"\t\n\t:\t\n[  \n],\"u\\/z\"\n:\t\"\\r\" \r\n\t\r }\n]\n\t\r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\t\\\"\\\":  [{\\t\\t\\\"?P\\\"\\t\\t:\\rfalse\\n\\n\\n,\\t\\\"]\\\\\\\"7\\\"\\t\\n\\t:\\t\\n[  \\n],\\\"u\\\\/z\\\"\\n:\\t\\\"\\\\r\\\" \\r\\n\\t\\r }\\n]\\n\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0:'u/z' = '\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "u/z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r", cJSON_string(child));
	}
	{
		// '':0:'?P' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "?P");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b1a1effde2d7358a105c4e376e52cf9a) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\t{\t\r\r \n \"\" \r:\n \n0.000\r} '
	const char* json = "\r\t{\t\r\r \n \"\" \r:\n \n0.000\r} ";
	std::cerr << "Plain JSON string from model: " << "\\r\\t{\\t\\r\\r \\n \\\"\\\" \\r:\\n \\n0.000\\r} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7a90be19b00e9e35c309246e3c4567da) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\n\"\\f\\n\"\r \r:null\t  ,\t\n\r\"\"\n:{}\t}\t'
	const char* json = "{\r\n\"\\f\\n\"\r \r:null\t  ,\t\n\r\"\"\n:{}\t}\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"\\\\f\\\\n\\\"\\r \\r:null\\t  ,\\t\\n\\r\\\"\\\"\\n:{}\\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fc61dc643d8c9f9a57388a09d4d017e3) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{ \t\t\t\r\r\n\"W\"\t:\r{\n}\n }\t\t'
	const char* json = "\n{ \t\t\t\r\r\n\"W\"\t:\r{\n}\n }\t\t";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t\\t\\t\\r\\r\\n\\\"W\\\"\\t:\\r{\\n}\\n }\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_a953cbd2481090b25246ee6a492fac75) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{   \n\"\"\r\n:\"\\b\\b\"\t\r\t}\r'
	const char* json = "{   \n\"\"\r\n:\"\\b\\b\"\t\r\t}\r";
	std::cerr << "Plain JSON string from model: " << "{   \\n\\\"\\\"\\r\\n:\\\"\\\\b\\\\b\\\"\\t\\r\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\b\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\b\b", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4d7b94fc2a062df3568f85acca2895b2) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r { \t\"\"\n :\tnull,  \n  \n\"\\t\"\r: \r\r040e-00 \t,\t\n\"\\tD}K\\n\\\\-\"\n\t\t\t:\ttrue\n\r\t,\n\r\r\"l\": {\t\n\"\\\\dD\"\r:true}\n\r\n,\r\r  \n \"\\r[\\f\"\t\r:\"\\tS\\b\\\"e\\t\"   \t}'
	const char* json = "\r { \t\"\"\n :\tnull,  \n  \n\"\\t\"\r: \r\r040e-00 \t,\t\n\"\\tD}K\\n\\\\-\"\n\t\t\t:\ttrue\n\r\t,\n\r\r\"l\": {\t\n\"\\\\dD\"\r:true}\n\r\n,\r\r  \n \"\\r[\\f\"\t\r:\"\\tS\\b\\\"e\\t\"   \t}";
	std::cerr << "Plain JSON string from model: " << "\\r { \\t\\\"\\\"\\n :\\tnull,  \\n  \\n\\\"\\\\t\\\"\\r: \\r\\r040e-00 \\t,\\t\\n\\\"\\\\tD}K\\\\n\\\\\\\\-\\\"\\n\\t\\t\\t:\\ttrue\\n\\r\\t,\\n\\r\\r\\\"l\\\": {\\t\\n\\\"\\\\\\\\dD\\\"\\r:true}\\n\\r\\n,\\r\\r  \\n \\\"\\\\r[\\\\f\\\"\\t\\r:\\\"\\\\tS\\\\b\\\\\\\"e\\\\t\\\"   \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2406d4744a33b6600278f0c91d9fcd9d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' {\n\t\n\r\n\"\\\\\": true\t\n\t\n}\t'
	const char* json = " {\n\t\n\r\n\"\\\\\": true\t\n\t\n}\t";
	std::cerr << "Plain JSON string from model: " << " {\\n\\t\\n\\r\\n\\\"\\\\\\\\\\\": true\\t\\n\\t\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0639257e94086648a30d9561f50a796d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' {\t\n\n\n\"\":\t0e-00\r \n  \n\t}'
	const char* json = " {\t\n\n\n\"\":\t0e-00\r \n  \n\t}";
	std::cerr << "Plain JSON string from model: " << " {\\t\\n\\n\\n\\\"\\\":\\t0e-00\\r \\n  \\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b0117ed42430f02dc98cc1722d0c6255) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\r \n \"mg\"\r\t\t:\n\t\ttrue\n }'
	const char* json = "{\t\n\r \n \"mg\"\r\t\t:\n\t\ttrue\n }";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\r \\n \\\"mg\\\"\\r\\t\\t:\\n\\t\\ttrue\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'mg' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "mg");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_644b82663460b392cd59e5eec8f454c4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \r\n{\n\t \r \"Nz\":00E-0\t\n, \t\t\r\r\"\"\t : \"\\/\\f\" }'
	const char* json = " \r\n{\n\t \r \"Nz\":00E-0\t\n, \t\t\r\r\"\"\t : \"\\/\\f\" }";
	std::cerr << "Plain JSON string from model: " << " \\r\\n{\\n\\t \\r \\\"Nz\\\":00E-0\\t\\n, \\t\\t\\r\\r\\\"\\\"\\t : \\\"\\\\/\\\\f\\\" }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d596f071b5efd45ce2568363851f27ba) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t \"\\\\\\t\\t\"\r\t\n:false\n,\n \"\"\r:\t[]\n\r ,\"y\"\t:\t\r\n0030\t}'
	const char* json = "{\t \"\\\\\\t\\t\"\r\t\n:false\n,\n \"\"\r:\t[]\n\r ,\"y\"\t:\t\r\n0030\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t \\\"\\\\\\\\\\\\t\\\\t\\\"\\r\\t\\n:false\\n,\\n \\\"\\\"\\r:\\t[]\\n\\r ,\\\"y\\\"\\t:\\t\\r\\n0030\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b2a31a9e0490e71b583f65c6283ad78d) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\t\r\t\t\n \r\"p(\\n\":-000e+0 \n\t} \n'
	const char* json = "{\r\t\r\t\t\n \r\"p(\\n\":-000e+0 \n\t} \n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\r\\t\\t\\n \\r\\\"p(\\\\n\\\":-000e+0 \\n\\t} \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_dfa97a2f6803232fc2a3418da78d6562) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \t\n\"\"\n:null\t\r}\n\r\n'
	const char* json = "{ \t\n\"\"\n:null\t\r}\n\r\n";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\n\\\"\\\"\\n:null\\t\\r}\\n\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_19520608757f6c539e7fe1b616b04421) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t {\"\\r\" \n:\r\t \rnull}\n\n\t'
	const char* json = "\t {\"\\r\" \n:\r\t \rnull}\n\n\t";
	std::cerr << "Plain JSON string from model: " << "\\t {\\\"\\\\r\\\" \\n:\\r\\t \\rnull}\\n\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f4c96446eb5a58bb872cbc7d089dd344) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' \r{\r\t \t\"m\\\"^U\"\n\n:\r\nfalse\n \r,\n \n \n\"\"\n:{\"\\\\Nw\":\ntrue\r\r}\t \n,\n\n\r \"\\r\\\"\\\"\\f\":\r{\r \"G\": false\t\r ,\r\"4M\\\"\\\\XL\"\t\r :\tnull}\t\n,\r\n \n\"\\r\"\n \n:\nfalse\t\r \r \n}'
	const char* json = " \r{\r\t \t\"m\\\"^U\"\n\n:\r\nfalse\n \r,\n \n \n\"\"\n:{\"\\\\Nw\":\ntrue\r\r}\t \n,\n\n\r \"\\r\\\"\\\"\\f\":\r{\r \"G\": false\t\r ,\r\"4M\\\"\\\\XL\"\t\r :\tnull}\t\n,\r\n \n\"\\r\"\n \n:\nfalse\t\r \r \n}";
	std::cerr << "Plain JSON string from model: " << " \\r{\\r\\t \\t\\\"m\\\\\\\"^U\\\"\\n\\n:\\r\\nfalse\\n \\r,\\n \\n \\n\\\"\\\"\\n:{\\\"\\\\\\\\Nw\\\":\\ntrue\\r\\r}\\t \\n,\\n\\n\\r \\\"\\\\r\\\\\\\"\\\\\\\"\\\\f\\\":\\r{\\r \\\"G\\\": false\\t\\r ,\\r\\\"4M\\\\\\\"\\\\\\\\XL\\\"\\t\\r :\\tnull}\\t\\n,\\r\\n \\n\\\"\\\\r\\\"\\n \\n:\\nfalse\\t\\r \\r \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\\Nw' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\Nw");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'm\"^U' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "m\"^U");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\r\"\"\f':'4M\"\\XL' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\"\"\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "4M\"\\XL");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\r\"\"\f':'G' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\"\"\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "G");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_95319576bced8d5e43f218f5979ccc9a) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t \"*\"\n\n:[] ,\t \"\\r\" :-099.00E0\t\r\r \r\n\t\t\n}'
	const char* json = "{\t \"*\"\n\n:[] ,\t \"\\r\" :-099.00E0\t\r\r \r\n\t\t\n}";
	std::cerr << "Plain JSON string from model: " << "{\\t \\\"*\\\"\\n\\n:[] ,\\t \\\"\\\\r\\\" :-099.00E0\\t\\r\\r \\r\\n\\t\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8813d52625c0f47f2bcc762f2aca9496) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\r\r\"\"\t\n\r:\n\n \"\\b4\" \n \t,\"\\tM\\/\\\"jQY\\t\\rx3Zq\" \t:\n  false\n \t\n}'
	const char* json = "\t{\r\r\"\"\t\n\r:\n\n \"\\b4\" \n \t,\"\\tM\\/\\\"jQY\\t\\rx3Zq\" \t:\n  false\n \t\n}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r\\\"\\\"\\t\\n\\r:\\n\\n \\\"\\\\b4\\\" \\n \\t,\\\"\\\\tM\\\\/\\\\\\\"jQY\\\\t\\\\rx3Zq\\\" \\t:\\n  false\\n \\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\b4'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\b4", cJSON_string(child));
	}
	{
		// '\tM/\"jQY\t\rx3Zq' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\tM/\"jQY\t\rx3Zq");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5dfc30e2281818c8c907b297c74cd3bf) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\r\r\n\r\t\"\" :\t false\t\n\r\n}'
	const char* json = "{\r\r\r\n\r\t\"\" :\t false\t\n\r\n}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\r\\n\\r\\t\\\"\\\" :\\t false\\t\\n\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bad4e82e164dd447a2bdae1d110276ae) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r \r \"\"\t:\r-08.050 \r\n   }\r'
	const char* json = "{\r \r \"\"\t:\r-08.050 \r\n   }\r";
	std::cerr << "Plain JSON string from model: " << "{\\r \\r \\\"\\\"\\t:\\r-08.050 \\r\\n   }\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a1862fe20e6cd9b3641c81a9591b6338) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\n\n\r\n\"4\" :null\n   }\n'
	const char* json = "\r{\n\n\r\n\"4\" :null\n   }\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\n\\r\\n\\\"4\\\" :null\\n   }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '4' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "4");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8dcc4f3ecdfa8e87fdf9882edbe102dc) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\r\r\"\\r]\"\n \n:\r\"{\"\r  \t  ,\r\t\n\"\"\r\r :\r\t\tfalse\n\r\n}\n\n'
	const char* json = "{\r\r\r\"\\r]\"\n \n:\r\"{\"\r  \t  ,\r\t\n\"\"\r\r :\r\t\tfalse\n\r\n}\n\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\r\\\"\\\\r]\\\"\\n \\n:\\r\\\"{\\\"\\r  \\t  ,\\r\\t\\n\\\"\\\"\\r\\r :\\r\\t\\tfalse\\n\\r\\n}\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r]' = '{'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("{", cJSON_string(child));
	}
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ac2cbee7079ed110ba7bb2f8b450c067) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '  \t{\t\"gq\"  :\n{} \r}\t'
	const char* json = "  \t{\t\"gq\"  :\n{} \r}\t";
	std::cerr << "Plain JSON string from model: " << "  \\t{\\t\\\"gq\\\"  :\\n{} \\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_569149d2d15f7bed1f0ad536a661b4b3) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{   \"\":\n  false\n,\t\n\"Z\" \n :-00005\t\n ,\r\"\\/\"\r\t:\t\t\tfalse\r  }'
	const char* json = "{   \"\":\n  false\n,\t\n\"Z\" \n :-00005\t\n ,\r\"\\/\"\r\t:\t\t\tfalse\r  }";
	std::cerr << "Plain JSON string from model: " << "{   \\\"\\\":\\n  false\\n,\\t\\n\\\"Z\\\" \\n :-00005\\t\\n ,\\r\\\"\\\\/\\\"\\r\\t:\\t\\t\\tfalse\\r  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_6baf0ac7d3b522d198fb6a4f33b92d0f) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \"nD*&\": true\t}'
	const char* json = "{ \"nD*&\": true\t}";
	std::cerr << "Plain JSON string from model: " << "{ \\\"nD*&\\\": true\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'nD*&' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "nD*&");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a005cf87059632ffdafa667d07d4392c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\"6\":true\n,\t\t\"\" \n:\n\r false\n \t,\n\t\t\n\"u\":\r\"`k\\r6\\n\\\"\"\r,\n\n\r\"n\"\n :false}\t\r'
	const char* json = "\n{\"6\":true\n,\t\t\"\" \n:\n\r false\n \t,\n\t\t\n\"u\":\r\"`k\\r6\\n\\\"\"\r,\n\n\r\"n\"\n :false}\t\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"6\\\":true\\n,\\t\\t\\\"\\\" \\n:\\n\\r false\\n \\t,\\n\\t\\t\\n\\\"u\\\":\\r\\\"`k\\\\r6\\\\n\\\\\\\"\\\"\\r,\\n\\n\\r\\\"n\\\"\\n :false}\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'u' = '`k\r6\n\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "u");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("`k\r6\n\"", cJSON_string(child));
	}
	{
		// '6' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "6");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a4b887a50726de064bb8615be0b59d06) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{  \t\n\"iR\":-00E+0766 \n,\"\\n\"\r:\ntrue\r\r\r}'
	const char* json = "{  \t\n\"iR\":-00E+0766 \n,\"\\n\"\r:\ntrue\r\r\r}";
	std::cerr << "Plain JSON string from model: " << "{  \\t\\n\\\"iR\\\":-00E+0766 \\n,\\\"\\\\n\\\"\\r:\\ntrue\\r\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_eb5bed67fcbead7cd87dbf4eee5e8f3f) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{ \t  \t\"\\/\":[]\n\t\t\n}'
	const char* json = "\r{ \t  \t\"\\/\":[]\n\t\t\n}";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\t  \\t\\\"\\\\/\\\":[]\\n\\t\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_b7cecdae100d1dfec67a3109a3d2cd20) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n{\t \r\n\"\":null\n}'
	const char* json = "\n{\t \r\n\"\":null\n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t \\r\\n\\\"\\\":null\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_71a7da97573d684fa133059430e7d594) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"\":\n \ntrue,\"u\\fI\\b\\f\"\r:{\r\n}}\t\n\n'
	const char* json = "{\"\":\n \ntrue,\"u\\fI\\b\\f\"\r:{\r\n}}\t\n\n";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\":\\n \\ntrue,\\\"u\\\\fI\\\\b\\\\f\\\"\\r:{\\r\\n}}\\t\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_aa850e3751969fe5961677e00bbc0d7c) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\r\n\"\"\t\t\r\t:null\t \t\r\n\n,\"1\":\n\"RuN\"\n,\r\"\\b\\f-r\" :null\r\t  , \t \"\\/\\r\\\\\"\n :\r null\t\r\t, \t\t\t\r\"\\t\\n\":\tnull}'
	const char* json = "{\n\r\n\"\"\t\t\r\t:null\t \t\r\n\n,\"1\":\n\"RuN\"\n,\r\"\\b\\f-r\" :null\r\t  , \t \"\\/\\r\\\\\"\n :\r null\t\r\t, \t\t\t\r\"\\t\\n\":\tnull}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\n\\\"\\\"\\t\\t\\r\\t:null\\t \\t\\r\\n\\n,\\\"1\\\":\\n\\\"RuN\\\"\\n,\\r\\\"\\\\b\\\\f-r\\\" :null\\r\\t  , \\t \\\"\\\\/\\\\r\\\\\\\\\\\"\\n :\\r null\\t\\r\\t, \\t\\t\\t\\r\\\"\\\\t\\\\n\\\":\\tnull}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '1' = 'RuN'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("RuN", cJSON_string(child));
	}
	{
		// '\t\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\b\f-r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\f-r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '/\r\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\r\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a394da67449431957e81be1f6a3b83e3) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Zero
	// Digit
	// Zero
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \"\"\t\r :-00004.0500500\n\n,\n \"K+?\"\r:\r{}\r ,\t\r \r\r\"s\":  \"\\b\"\n\r\n}'
	const char* json = "{ \"\"\t\r :-00004.0500500\n\n,\n \"K+?\"\r:\r{}\r ,\t\r \r\r\"s\":  \"\\b\"\n\r\n}";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\t\\r :-00004.0500500\\n\\n,\\n \\\"K+?\\\"\\r:\\r{}\\r ,\\t\\r \\r\\r\\\"s\\\":  \\\"\\\\b\\\"\\n\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_0ecf4ea6a103557a33c5407a6fe13a2e) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Zero
	// Digit
	// Zero
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\n\n\n \"\\r\\t\\t8`\\r\\b\\\\\\\"\\r\":null\r,\r\t\"V4\" : \t{ \r \"\":\t\t\t{\t}\t}\n , \r\r \"j\"  :\ntrue \n\n\n,\n \t\r\"QV\\n2\\\"\":-03082.012e0808001000\n\t  \t , \t\n\r \"\\r^\\/\\/\" :false \n\r\n}  '
	const char* json = "{\t\n\n\n \"\\r\\t\\t8`\\r\\b\\\\\\\"\\r\":null\r,\r\t\"V4\" : \t{ \r \"\":\t\t\t{\t}\t}\n , \r\r \"j\"  :\ntrue \n\n\n,\n \t\r\"QV\\n2\\\"\":-03082.012e0808001000\n\t  \t , \t\n\r \"\\r^\\/\\/\" :false \n\r\n}  ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\n\\n \\\"\\\\r\\\\t\\\\t8`\\\\r\\\\b\\\\\\\\\\\\\\\"\\\\r\\\":null\\r,\\r\\t\\\"V4\\\" : \\t{ \\r \\\"\\\":\\t\\t\\t{\\t}\\t}\\n , \\r\\r \\\"j\\\"  :\\ntrue \\n\\n\\n,\\n \\t\\r\\\"QV\\\\n2\\\\\\\"\\\":-03082.012e0808001000\\n\\t  \\t , \\t\\n\\r \\\"\\\\r^\\\\/\\\\/\\\" :false \\n\\r\\n}  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_14e7962a0261fcc8d48b96744cc1f210) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Zero
	// Zero
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\t\r\r\"\\n\"\t\n :null\t,\r\t\t   \t\"7)+\\t\\r\"\n\r:\r-0.010000\n\r\r}'
	const char* json = "\n{\t\r\r\"\\n\"\t\n :null\t,\r\t\t   \t\"7)+\\t\\r\"\n\r:\r-0.010000\n\r\r}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\r\\r\\\"\\\\n\\\"\\t\\n :null\\t,\\r\\t\\t   \\t\\\"7)+\\\\t\\\\r\\\"\\n\\r:\\r-0.010000\\n\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '7)+\t\r' = '-0.01'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "7)+\t\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.01, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5fbbd18255428f2116cde5bc15d5459b) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' {\n \"V\\f\" :true}\r'
	const char* json = " {\n \"V\\f\" :true}\r";
	std::cerr << "Plain JSON string from model: " << " {\\n \\\"V\\\\f\\\" :true}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'V\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "V\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_957c4bd9a78eeb6c555b5638681babfa) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\\n$\\b\" :\t\t000.07e+050\t\t \n\n }\n'
	const char* json = "{\"\\n$\\b\" :\t\t000.07e+050\t\t \n\n }\n";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\n$\\\\b\\\" :\\t\\t000.07e+050\\t\\t \\n\\n }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e0580f6bcbded64cb5d1dffea9cfb601) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r\n{\t\"\\\"\"  \n:null \n,\t\r\r\":tj\": 0070.09E+0260\r \n}'
	const char* json = "\r\n{\t\"\\\"\"  \n:null \n,\t\r\r\":tj\": 0070.09E+0260\r \n}";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\t\\\"\\\\\\\"\\\"  \\n:null \\n,\\t\\r\\r\\\":tj\\\": 0070.09E+0260\\r \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_187a9d1e75bc2cc96e0bbeff326d0de2) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\n{\n \"\"\n \n:-086.000909 \r\n,\t  \t\"Q\\\\\\ry\"  : \t[\r]\n\r ,\t\n\t\t\"\\rz\\f\\\\\"  :\t[false,\r[[]]\t\t\n] ,\n \"\\r\\t\"\t: {}}'
	const char* json = "\r\n{\n \"\"\n \n:-086.000909 \r\n,\t  \t\"Q\\\\\\ry\"  : \t[\r]\n\r ,\t\n\t\t\"\\rz\\f\\\\\"  :\t[false,\r[[]]\t\t\n] ,\n \"\\r\\t\"\t: {}}";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\n \\\"\\\"\\n \\n:-086.000909 \\r\\n,\\t  \\t\\\"Q\\\\\\\\\\\\ry\\\"  : \\t[\\r]\\n\\r ,\\t\\n\\t\\t\\\"\\\\rz\\\\f\\\\\\\\\\\"  :\\t[false,\\r[[]]\\t\\t\\n] ,\\n \\\"\\\\r\\\\t\\\"\\t: {}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a4e1de29a0e3beaa014d972a748ea2c6) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\r\"$\" :[\n\n\r\t\tfalse\n\t]\r\r ,\t\t \"_\":true\t\r\n}\t'
	const char* json = "{\t\r\"$\" :[\n\n\r\t\tfalse\n\t]\r\r ,\t\t \"_\":true\t\r\n}\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"$\\\" :[\\n\\n\\r\\t\\tfalse\\n\\t]\\r\\r ,\\t\\t \\\"_\\\":true\\t\\r\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '$':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "$");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '_' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "_");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f1e2fb2f16c4ac75b92cb7ea27a6a75d) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t { \n\n \"\"\r\t:\t\r\t\"\\n\\b\\\"\" \n} \n'
	const char* json = "\t { \n\n \"\"\r\t:\t\r\t\"\\n\\b\\\"\" \n} \n";
	std::cerr << "Plain JSON string from model: " << "\\t { \\n\\n \\\"\\\"\\r\\t:\\t\\r\\t\\\"\\\\n\\\\b\\\\\\\"\\\" \\n} \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\n\b\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n\b\"", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_13598c4b6553ea6376e5ef56783b4738) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\t\"o\"\n  :{\"\"\t:\tnull},\r\"r\\\"3\\r\"\n:\r\tfalse\r\n} '
	const char* json = "{\r\t\"o\"\n  :{\"\"\t:\tnull},\r\"r\\\"3\\r\"\n:\r\tfalse\r\n} ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"o\\\"\\n  :{\\\"\\\"\\t:\\tnull},\\r\\\"r\\\\\\\"3\\\\r\\\"\\n:\\r\\tfalse\\r\\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'r\"3\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "r\"3\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'o':'' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "o");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c837fe9273308bffe5299beb0dfa9b22) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{ \"\":[]\n\t,\t\r\"\\r\":\n-005205 \n\n\t,\r\r\n\"\\n!}\"\n:\n \t[\n\n \"\\/i\\r\\b\\\"M\\f\",\r{}\n\t\t,\"\\n\\b\\b&N\\t)\"\t\t] \r,\"\\f\\b\\b\"\t \t:\t[\t false \r]\n,\r\t\"O\\b\" \n\n \r:null\t\n} \t'
	const char* json = "\r{ \"\":[]\n\t,\t\r\"\\r\":\n-005205 \n\n\t,\r\r\n\"\\n!}\"\n:\n \t[\n\n \"\\/i\\r\\b\\\"M\\f\",\r{}\n\t\t,\"\\n\\b\\b&N\\t)\"\t\t] \r,\"\\f\\b\\b\"\t \t:\t[\t false \r]\n,\r\t\"O\\b\" \n\n \r:null\t\n} \t";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\\"\\\":[]\\n\\t,\\t\\r\\\"\\\\r\\\":\\n-005205 \\n\\n\\t,\\r\\r\\n\\\"\\\\n!}\\\"\\n:\\n \\t[\\n\\n \\\"\\\\/i\\\\r\\\\b\\\\\\\"M\\\\f\\\",\\r{}\\n\\t\\t,\\\"\\\\n\\\\b\\\\b&N\\\\t)\\\"\\t\\t] \\r,\\\"\\\\f\\\\b\\\\b\\\"\\t \\t:\\t[\\t false \\r]\\n,\\r\\t\\\"O\\\\b\\\" \\n\\n \\r:null\\t\\n} \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8862bebc8c5d7936cff34378fc810cde) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\"!\"\r:null, \r\r\";\"\r\t:\n [\r{}\r\t]} \n'
	const char* json = "\r{\"!\"\r:null, \r\r\";\"\r\t:\n [\r{}\r\t]} \n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"!\\\"\\r:null, \\r\\r\\\";\\\"\\r\\t:\\n [\\r{}\\r\\t]} \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '!' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "!");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_dfeb961612c37edb2570687f44ad7a38) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\t\r\n\"\\t|\"\n:[]\r\t\n ,\t\n\t \n\n\"\"\r:false,\n\r\r\"\\r{\":\t -00007\t\t\t}\r'
	const char* json = "{\n\t\r\n\"\\t|\"\n:[]\r\t\n ,\t\n\t \n\n\"\"\r:false,\n\r\r\"\\r{\":\t -00007\t\t\t}\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\r\\n\\\"\\\\t|\\\"\\n:[]\\r\\t\\n ,\\t\\n\\t \\n\\n\\\"\\\"\\r:false,\\n\\r\\r\\\"\\\\r{\\\":\\t -00007\\t\\t\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_aa76e5c0b8fe4e477024c6e0914eab28) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n\r\r{\"\\/\\\\\\f\\/N\\f1\"\t:\n null \r\r\n }'
	const char* json = "\n\r\r{\"\\/\\\\\\f\\/N\\f1\"\t:\n null \r\r\n }";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\r{\\\"\\\\/\\\\\\\\\\\\f\\\\/N\\\\f1\\\"\\t:\\n null \\r\\r\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\\\f/N\f1' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\\\f/N\f1");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1eb30ac3baed32bab5daa0f683b2f62f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\"\\\"\"\n\n:true\t\n} '
	const char* json = "\t{\"\\\"\"\n\n:true\t\n} ";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"\\\\\\\"\\\"\\n\\n:true\\t\\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_80d0ab70360768310c8d17cba0995a84) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\t\r\r\"\\t\"\r\n:\"\"\r\n\r\t}  \r'
	const char* json = "\r{\t\r\r\"\\t\"\r\n:\"\"\r\n\r\t}  \r";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\r\\r\\\"\\\\t\\\"\\r\\n:\\\"\\\"\\r\\n\\r\\t}  \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_12e9dd917c3a5eda35ade71841383706) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\r\"\\t\\f\":\n\r[\t]\r}  \t'
	const char* json = " {\r\"\\t\\f\":\n\r[\t]\r}  \t";
	std::cerr << "Plain JSON string from model: " << " {\\r\\\"\\\\t\\\\f\\\":\\n\\r[\\t]\\r}  \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_4c8c266907a9d32332beb0e7a77c0c85) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t\r\r{\t\n\"\"\t\t\r:\t \t true \t}'
	const char* json = "\t\r\r{\t\n\"\"\t\t\r:\t \t true \t}";
	std::cerr << "Plain JSON string from model: " << "\\t\\r\\r{\\t\\n\\\"\\\"\\t\\t\\r:\\t \\t true \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f0bb68db339ef25b62d2e463869335dc) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r \t{\r\"\\b\\b\\n\\r\\/a\\ty\\/M\\b\":null \n}'
	const char* json = "\r \t{\r\"\\b\\b\\n\\r\\/a\\ty\\/M\\b\":null \n}";
	std::cerr << "Plain JSON string from model: " << "\\r \\t{\\r\\\"\\\\b\\\\b\\\\n\\\\r\\\\/a\\\\ty\\\\/M\\\\b\\\":null \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\b\n\r/a\ty/M\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\b\n\r/a\ty/M\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8f9647a8339b4511d2549c6388e2bca1) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"\\nRg\"  \n:\t[\tnull\n]\r\n\r\n,  \"\\/\":{}  }\n\n\t'
	const char* json = "{\"\\nRg\"  \n:\t[\tnull\n]\r\n\r\n,  \"\\/\":{}  }\n\n\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\nRg\\\"  \\n:\\t[\\tnull\\n]\\r\\n\\r\\n,  \\\"\\\\/\\\":{}  }\\n\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\nRg':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nRg");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_94cebfbafa4d943602b38126abeaff66) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\n\"\\f\\t\\f\\rF\\r=F\\t\" : \t{\"\"\r\t:null\n},\"\\t\\/1\"\n :null \r \r\r}\r'
	const char* json = "\n{\n\"\\f\\t\\f\\rF\\r=F\\t\" : \t{\"\"\r\t:null\n},\"\\t\\/1\"\n :null \r \r\r}\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\\"\\\\f\\\\t\\\\f\\\\rF\\\\r=F\\\\t\\\" : \\t{\\\"\\\"\\r\\t:null\\n},\\\"\\\\t\\\\/1\\\"\\n :null \\r \\r\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t/1' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t/1");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\f\t\f\rF\r=F\t':'' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\t\f\rF\r=F\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5298cd5957d81b62e296d8b1760952dd) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r \r{\t\n\"-\\b\"\t\n:true\t\r,\n\r \"A\\r\"\t \t\r:true\n\r}\t'
	const char* json = "\r \r{\t\n\"-\\b\"\t\n:true\t\r,\n\r \"A\\r\"\t \t\r:true\n\r}\t";
	std::cerr << "Plain JSON string from model: " << "\\r \\r{\\t\\n\\\"-\\\\b\\\"\\t\\n:true\\t\\r,\\n\\r \\\"A\\\\r\\\"\\t \\t\\r:true\\n\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'A\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "A\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '-\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "-\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f9cf448320e8a976f9ecc4936370676d) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \n\"\":\n \rtrue\t\n}\t'
	const char* json = "{ \n\"\":\n \rtrue\t\n}\t";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\":\\n \\rtrue\\t\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_eb9f2932a5b8f4f77902eb492b471ef8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' {\t\t \r\r\r \"p\"\t\n:null,\n\n\t\t\"\\\\\" \n: 03E+0000\t\n}'
	const char* json = " {\t\t \r\r\r \"p\"\t\n:null,\n\n\t\t\"\\\\\" \n: 03E+0000\t\n}";
	std::cerr << "Plain JSON string from model: " << " {\\t\\t \\r\\r\\r \\\"p\\\"\\t\\n:null,\\n\\n\\t\\t\\\"\\\\\\\\\\\" \\n: 03E+0000\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d5feb7e7a5af224bc232c93a25c90382) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t{\r\r\r\t\r\"\":null,\t\t \r\"\\f\" \n:\"\\\\X\"\t\r}'
	const char* json = " \t{\r\r\r\t\r\"\":null,\t\t \r\"\\f\" \n:\"\\\\X\"\t\r}";
	std::cerr << "Plain JSON string from model: " << " \\t{\\r\\r\\r\\t\\r\\\"\\\":null,\\t\\t \\r\\\"\\\\f\\\" \\n:\\\"\\\\\\\\X\\\"\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\f' = '\\X'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\X", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_61ca719bdf11c3ebc388c80691757ed7) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\t \n\"l\":[]\n\r ,\"= \"\t:\"DtGz]\"} '
	const char* json = "{\n\t \n\"l\":[]\n\r ,\"= \"\t:\"DtGz]\"} ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t \\n\\\"l\\\":[]\\n\\r ,\\\"= \\\"\\t:\\\"DtGz]\\\"} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '= ' = 'DtGz]'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "= ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("DtGz]", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9fe31ad3080ec5272a8c6748a0077530) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\r{\"\":true}\r\r'
	const char* json = "\n\r{\"\":true}\r\r";
	std::cerr << "Plain JSON string from model: " << "\\n\\r{\\\"\\\":true}\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_05b20244f97848a8ff2ad85e287bf078) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\"\"\r\t: \t\nfalse\r\r,\r\"wW\":-000119}\t  '
	const char* json = "{\r\"\"\r\t: \t\nfalse\r\r,\r\"wW\":-000119}\t  ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\r\\t: \\t\\nfalse\\r\\r,\\r\\\"wW\\\":-000119}\\t  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bca3ffacbaff9f54cf7559fe40400b8e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{\r\"\\/\"\t\r \t:   0000e062 \n\r\n\n,\n\t\t\r\t\r \t\"\\nc\":\n\t\rfalse\t \t}\r\r'
	const char* json = "\t{\r\"\\/\"\t\r \t:   0000e062 \n\r\n\n,\n\t\t\r\t\r \t\"\\nc\":\n\t\rfalse\t \t}\r\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\\"\\\\/\\\"\\t\\r \\t:   0000e062 \\n\\r\\n\\n,\\n\\t\\t\\r\\t\\r \\t\\\"\\\\nc\\\":\\n\\t\\rfalse\\t \\t}\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f96eaaed75b200b4a3a63c7fd6896783) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\t\n\"`\\b\\\\\"\n \n:\r-0401e+0\n\r\r \t}'
	const char* json = "\r{\t\n\"`\\b\\\\\"\n \n:\r-0401e+0\n\r\r \t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\n\\\"`\\\\b\\\\\\\\\\\"\\n \\n:\\r-0401e+0\\n\\r\\r \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1850be6013310ab67b334035d8ba5655) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\"\\r\"\r\t \t\t :\n-0,\r\"\\f\"\t\t\n\t:false\r\t,\"\":\n{\n\"\\n\"\r\n\n\n:null\r\n ,\n\n\r \"|\"  :  {} }}\r'
	const char* json = "{\t\"\\r\"\r\t \t\t :\n-0,\r\"\\f\"\t\t\n\t:false\r\t,\"\":\n{\n\"\\n\"\r\n\n\n:null\r\n ,\n\n\r \"|\"  :  {} }}\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\r\\\"\\r\\t \\t\\t :\\n-0,\\r\\\"\\\\f\\\"\\t\\t\\n\\t:false\\r\\t,\\\"\\\":\\n{\\n\\\"\\\\n\\\"\\r\\n\\n\\n:null\\r\\n ,\\n\\n\\r \\\"|\\\"  :  {} }}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\r' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_67f98643e22ad19bf5378d328ce8e087) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t\n\r\r\"#Z\\b\\t\"\r:[]\r\n\n\t\r}'
	const char* json = "{\t\n\r\r\"#Z\\b\\t\"\r:[]\r\n\n\t\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\r\\r\\\"#Z\\\\b\\\\t\\\"\\r:[]\\r\\n\\n\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_20e35e32db923bb3528ccb125b61b5db) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\n\n\"\\fY_\"  \r:\r-0002E-0\r\r\n \n}'
	const char* json = "{\r\n\n\"\\fY_\"  \r:\r-0002E-0\r\r\n \n}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\n\\\"\\\\fY_\\\"  \\r:\\r-0002E-0\\r\\r\\n \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_00ef39a191545c0cee9b47c6cf194e3c) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \"\"\r:\r\t\r{}\t  \n}'
	const char* json = "{ \"\"\r:\r\t\r{}\t  \n}";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\r:\\r\\t\\r{}\\t  \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_96dec27de85dd359ac800ab32a2921b8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{ \r\"\":null\t\n}'
	const char* json = "\r{ \r\"\":null\t\n}";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\r\\\"\\\":null\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ce38a166af36a6b21c5a1dd0cc28a52d) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Zero
	// Zero
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\t\"r\\/\\n\"\n:\r -020600099.0\r}'
	const char* json = "{\n\t\"r\\/\\n\"\n:\r -020600099.0\r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\\"r\\\\/\\\\n\\\"\\n:\\r -020600099.0\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_74df4b85cc2b10c1bdc3a8e01aa1ebbf) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\r\n{\r\n\"\\\\\\b\" :[\n \r\ntrue\n],\t\n\"-\\f\\/\"\r  :\"\"\n\r,\t\">YsYu\"\t\r :[] }'
	const char* json = "\n\r\n{\r\n\"\\\\\\b\" :[\n \r\ntrue\n],\t\n\"-\\f\\/\"\r  :\"\"\n\r,\t\">YsYu\"\t\r :[] }";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\n{\\r\\n\\\"\\\\\\\\\\\\b\\\" :[\\n \\r\\ntrue\\n],\\t\\n\\\"-\\\\f\\\\/\\\"\\r  :\\\"\\\"\\n\\r,\\t\\\">YsYu\\\"\\t\\r :[] }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '-\f/' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "-\f/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\\\b':0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a83576da93a38ddf796cfe1ca7eea668) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Digit
	// Digit
	// Digit
	// Digit
	// Digit
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// Zero
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{  \t \r\n\"\\\"\"\n:-0005456200e-0000070010\r \t\n}'
	const char* json = "\n{  \t \r\n\"\\\"\"\n:-0005456200e-0000070010\r \t\n}";
	std::cerr << "Plain JSON string from model: " << "\\n{  \\t \\r\\n\\\"\\\\\\\"\\\"\\n:-0005456200e-0000070010\\r \\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_3bac26c765f0abd6487d5f0b6210444b) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\n\r\n\"\\r\\f_\":\n-000,\"\"\t\r:-0e-0\n ,\n\t\"\\r=2\\\"HA\" \r: \"b\" ,\n\"\\r\\\"\\\"\" \t\r   :false\n\n }'
	const char* json = "{\n\r\n\"\\r\\f_\":\n-000,\"\"\t\r:-0e-0\n ,\n\t\"\\r=2\\\"HA\" \r: \"b\" ,\n\"\\r\\\"\\\"\" \t\r   :false\n\n }";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\n\\\"\\\\r\\\\f_\\\":\\n-000,\\\"\\\"\\t\\r:-0e-0\\n ,\\n\\t\\\"\\\\r=2\\\\\\\"HA\\\" \\r: \\\"b\\\" ,\\n\\\"\\\\r\\\\\\\"\\\\\\\"\\\" \\t\\r   :false\\n\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_952a87eb0c3af5f0b158dac9c55d4409) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"L\\r\":false,\t\t\n \"\\t\":\t\n{\r\t\"\\\\\\\"[\"  :false  \n\t}  \r} '
	const char* json = "{\"L\\r\":false,\t\t\n \"\\t\":\t\n{\r\t\"\\\\\\\"[\"  :false  \n\t}  \r} ";
	std::cerr << "Plain JSON string from model: " << "{\\\"L\\\\r\\\":false,\\t\\t\\n \\\"\\\\t\\\":\\t\\n{\\r\\t\\\"\\\\\\\\\\\\\\\"[\\\"  :false  \\n\\t}  \\r} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t':'\\\"[' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\"[");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'L\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "L\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7beca102f27e4c263a757a0fd7bd0224) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r \n\t\n\r\" \\/\\\\0\\b<\\b\\r-\"\t\t\r:\"\\\"\\f(.\" \t\r \t\r}'
	const char* json = "{\r \n\t\n\r\" \\/\\\\0\\b<\\b\\r-\"\t\t\r:\"\\\"\\f(.\" \t\r \t\r}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\n\\t\\n\\r\\\" \\\\/\\\\\\\\0\\\\b<\\\\b\\\\r-\\\"\\t\\t\\r:\\\"\\\\\\\"\\\\f(.\\\" \\t\\r \\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ' /\\0\b<\b\r-' = '\"\f(.'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " /\\0\b<\b\r-");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"\f(.", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_456fd5bec181daa9dbca88ac0880c29e) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \n\"\\\\]\\r\": \nfalse }'
	const char* json = "{ \n\"\\\\]\\r\": \nfalse }";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\\\\\\]\\\\r\\\": \\nfalse }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\]\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\]\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2d3087caed69d829611e6ef08baf9cee) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t\t\"?\" \n :\n\"\" \r\n\r}'
	const char* json = "{\t\t\"?\" \n :\n\"\" \r\n\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"?\\\" \\n :\\n\\\"\\\" \\r\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '?' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "?");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a83e8a123d976ef0a66f992fc31db7a5) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t \n\n\"\"\r:[ \t\t], \r\r\"c\" \n :\r\rtrue }'
	const char* json = "{\t \n\n\"\"\r:[ \t\t], \r\r\"c\" \n :\r\rtrue }";
	std::cerr << "Plain JSON string from model: " << "{\\t \\n\\n\\\"\\\"\\r:[ \\t\\t], \\r\\r\\\"c\\\" \\n :\\r\\rtrue }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'c' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "c");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8ed575a583b49bec971b244b79c80967) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{ \t\t\t\"[\\/\\\\\" :-0.0 }'
	const char* json = "\n{ \t\t\t\"[\\/\\\\\" :-0.0 }";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t\\t\\t\\\"[\\\\/\\\\\\\\\\\" :-0.0 }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '[/\\' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "[/\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c65aeedbcd18e4959aa586fcf885e511) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"\"\r\r\n\n:\"\\t:\"\t\n,\r \r\r\r\"\\/\\n[vQ?\\/\":\nnull,\t\r\t\"\\\\\\f\\r343\\f\" \n \r:\t\t-00.06E+00\n\n\r}'
	const char* json = "{\"\"\r\r\n\n:\"\\t:\"\t\n,\r \r\r\r\"\\/\\n[vQ?\\/\":\nnull,\t\r\t\"\\\\\\f\\r343\\f\" \n \r:\t\t-00.06E+00\n\n\r}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\r\\r\\n\\n:\\\"\\\\t:\\\"\\t\\n,\\r \\r\\r\\r\\\"\\\\/\\\\n[vQ?\\\\/\\\":\\nnull,\\t\\r\\t\\\"\\\\\\\\\\\\f\\\\r343\\\\f\\\" \\n \\r:\\t\\t-00.06E+00\\n\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f498970159e6f132f4ac1a1280be37ab) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{ \"\\n\\\"\\f\"\r\n\t:\r\n\rtrue \n\n\r\t}'
	const char* json = "\r{ \"\\n\\\"\\f\"\r\n\t:\r\n\rtrue \n\n\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\\"\\\\n\\\\\\\"\\\\f\\\"\\r\\n\\t:\\r\\n\\rtrue \\n\\n\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n\"\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\"\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_247e6cab1a1ab8c3d03f00145d7cae90) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\n\"\\n\":\t \t\r\"\"}'
	const char* json = "\r{\n\"\\n\":\t \t\r\"\"}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\\"\\\\n\\\":\\t \\t\\r\\\"\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_164caf407c40eed4c09fc830e1f3b209) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\t\n\r\"<\\b\\/?X\"\t\r:\r[  true\t\r] ,\r\t\"\" \t\r\t: []\t\n\n,\r\"\\b\" \n\t\n:\n{\t\"\\nFF\\\"\"\n\t:\t\t\rfalse\n\n\r} }\r'
	const char* json = "{\n\t\n\r\"<\\b\\/?X\"\t\r:\r[  true\t\r] ,\r\t\"\" \t\r\t: []\t\n\n,\r\"\\b\" \n\t\n:\n{\t\"\\nFF\\\"\"\n\t:\t\t\rfalse\n\n\r} }\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\n\\r\\\"<\\\\b\\\\/?X\\\"\\t\\r:\\r[  true\\t\\r] ,\\r\\t\\\"\\\" \\t\\r\\t: []\\t\\n\\n,\\r\\\"\\\\b\\\" \\n\\t\\n:\\n{\\t\\\"\\\\nFF\\\\\\\"\\\"\\n\\t:\\t\\t\\rfalse\\n\\n\\r} }\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b':'\nFF\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nFF\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '<\b/?X':0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<\b/?X");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_98891a31d0445da8d6f7f8d5ca75650b) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\n\t{\n\r\r\"\\r\"\r: false\n\r ,\"\": {} \n}\n'
	const char* json = "\t\n\t{\n\r\r\"\\r\"\r: false\n\r ,\"\": {} \n}\n";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\t{\\n\\r\\r\\\"\\\\r\\\"\\r: false\\n\\r ,\\\"\\\": {} \\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5686cf1854f42aa75429618527181e39) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\r \r\t\r\"\":true\r\r,\t \n\"\\r\"\t: 0e+060 \r,\"\\t\\/8\"\n\r : \t\n\"R?\",\r\r\"p\"\n:\t{} , \"\\/F\":true\r\r\r} \r\n'
	const char* json = "\n{\r \r\t\r\"\":true\r\r,\t \n\"\\r\"\t: 0e+060 \r,\"\\t\\/8\"\n\r : \t\n\"R?\",\r\r\"p\"\n:\t{} , \"\\/F\":true\r\r\r} \r\n";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r \\r\\t\\r\\\"\\\":true\\r\\r,\\t \\n\\\"\\\\r\\\"\\t: 0e+060 \\r,\\\"\\\\t\\\\/8\\\"\\n\\r : \\t\\n\\\"R?\\\",\\r\\r\\\"p\\\"\\n:\\t{} , \\\"\\\\/F\\\":true\\r\\r\\r} \\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\r' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '/F' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/F");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\t/8' = 'R?'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t/8");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("R?", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b12276391d0b58298b6c70147262b13b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\n\"\\n\\\\Y\":{\n \r \t\"B#\" \n\r\r\n:\r\rnull\n\t\n} }'
	const char* json = "\r{\n\"\\n\\\\Y\":{\n \r \t\"B#\" \n\r\r\n:\r\rnull\n\t\n} }";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\\"\\\\n\\\\\\\\Y\\\":{\\n \\r \\t\\\"B#\\\" \\n\\r\\r\\n:\\r\\rnull\\n\\t\\n} }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n\\Y':'B#' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\\Y");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "B#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a21ea044183f5dd028f400bc53a7522f) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\n{\t\t\"0>\" \n:true}\t \n'
	const char* json = "\t\n{\t\t\"0>\" \n:true}\t \n";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{\\t\\t\\\"0>\\\" \\n:true}\\t \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '0>' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "0>");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4c22e2fb23b59512fd2ac8a5edcbb4f4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// JSON: '\t\n\r{\r\t\t \"\\\\\"\n\r :null\t \r\n\n\t,  \n\r\"\"\r\n:\r{},\t\"l\\b\": \n{ \r\"\\\\`\" \t:true\t \n} \n,\"\\f\\tC@p\":null\n \t,  \t\t\t\"$\\/\\/B\":00102000007e+09 \r,\r\n\"\\\\\\\\\\f\\t}r\\td\":-0E+0200\r\t ,\r \"BO~\\/\"\t\r\r:\"D\\t\"\t\n, \r \"\\\\tfM\"\t\r\t\t\n:\n\"\\/R\\\\9\\r\",'
	const char* json = "\t\n\r{\r\t\t \"\\\\\"\n\r :null\t \r\n\n\t,  \n\r\"\"\r\n:\r{},\t\"l\\b\": \n{ \r\"\\\\`\" \t:true\t \n} \n,\"\\f\\tC@p\":null\n \t,  \t\t\t\"$\\/\\/B\":00102000007e+09 \r,\r\n\"\\\\\\\\\\f\\t}r\\td\":-0E+0200\r\t ,\r \"BO~\\/\"\t\r\r:\"D\\t\"\t\n, \r \"\\\\tfM\"\t\r\t\t\n:\n\"\\/R\\\\9\\r\",";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\r{\\r\\t\\t \\\"\\\\\\\\\\\"\\n\\r :null\\t \\r\\n\\n\\t,  \\n\\r\\\"\\\"\\r\\n:\\r{},\\t\\\"l\\\\b\\\": \\n{ \\r\\\"\\\\\\\\`\\\" \\t:true\\t \\n} \\n,\\\"\\\\f\\\\tC@p\\\":null\\n \\t,  \\t\\t\\t\\\"$\\\\/\\\\/B\\\":00102000007e+09 \\r,\\r\\n\\\"\\\\\\\\\\\\\\\\\\\\f\\\\t}r\\\\td\\\":-0E+0200\\r\\t ,\\r \\\"BO~\\\\/\\\"\\t\\r\\r:\\\"D\\\\t\\\"\\t\\n, \\r \\\"\\\\\\\\tfM\\\"\\t\\r\\t\\t\\n:\\n\\\"\\\\/R\\\\\\\\9\\\\r\\\"," << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_bd1bbf6858e6b769d23de41a8a990a2d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\r \"\":false\t, \n\n\"Wz\\b\\nS\"\t\t\t:null\t\n}\n'
	const char* json = "{\r\r \"\":false\t, \n\n\"Wz\\b\\nS\"\t\t\t:null\t\n}\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r \\\"\\\":false\\t, \\n\\n\\\"Wz\\\\b\\\\nS\\\"\\t\\t\\t:null\\t\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'Wz\b\nS' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Wz\b\nS");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7f70afd5309ed65694df4a85f56a544a) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{  \n\n \"\"\r :-0006.000e+05}'
	const char* json = "{  \n\n \"\"\r :-0006.000e+05}";
	std::cerr << "Plain JSON string from model: " << "{  \\n\\n \\\"\\\"\\r :-0006.000e+05}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_093a63242b7aea57de3d550ce7669666) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' \t{\"\"\r:\"\\fOy\"  ,\t \"\\\"\\f\\\"K\\/\":true  \t\t }\n\t'
	const char* json = " \t{\"\"\r:\"\\fOy\"  ,\t \"\\\"\\f\\\"K\\/\":true  \t\t }\n\t";
	std::cerr << "Plain JSON string from model: " << " \\t{\\\"\\\"\\r:\\\"\\\\fOy\\\"  ,\\t \\\"\\\\\\\"\\\\f\\\\\\\"K\\\\/\\\":true  \\t\\t }\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\fOy'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\fOy", cJSON_string(child));
	}
	{
		// '\"\f\"K/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\f\"K/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_77d21faf3396db2b93f124a5718ba670) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\r\r\"\\\\\":[]\t}\r'
	const char* json = "{\t\r\r\"\\\\\":[]\t}\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\r\\\"\\\\\\\\\\\":[]\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_ba88ef95a8da1e7005f94db5efccb1de) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{\t\t \"0\"\r:\"\\\\\"\n\r\n\r}'
	const char* json = "\t{\t\t \"0\"\r:\"\\\\\"\n\r\n\r}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\t \\\"0\\\"\\r:\\\"\\\\\\\\\\\"\\n\\r\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '0' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "0");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1c660dc43d462ee35feb4c078bf02b2f) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\t\"\\r\":\n[\r]\n\r ,\n\"(W\\n\\b)\" :true\r\r\r\n,\t\r\r\n\n\"RO\"\n:0.00 \n,\"\"\r\n\n\t:\n\n\nnull\n\r\r,\t\"3\\r6\\b\\tx\"\r: false\n\r}'
	const char* json = "\r{\t\"\\r\":\n[\r]\n\r ,\n\"(W\\n\\b)\" :true\r\r\r\n,\t\r\r\n\n\"RO\"\n:0.00 \n,\"\"\r\n\n\t:\n\n\nnull\n\r\r,\t\"3\\r6\\b\\tx\"\r: false\n\r}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\\"\\\\r\\\":\\n[\\r]\\n\\r ,\\n\\\"(W\\\\n\\\\b)\\\" :true\\r\\r\\r\\n,\\t\\r\\r\\n\\n\\\"RO\\\"\\n:0.00 \\n,\\\"\\\"\\r\\n\\n\\t:\\n\\n\\nnull\\n\\r\\r,\\t\\\"3\\\\r6\\\\b\\\\tx\\\"\\r: false\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'RO' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "RO");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '(W\n\b)' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(W\n\b)");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '3\r6\b\tx' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "3\r6\b\tx");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_627fad1fb5da64655811671f8d5806a0) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\r\n\n\"\\tH&\"\n\r\n\n\t :{}\r}'
	const char* json = "{\t\r\n\n\"\\tH&\"\n\r\n\n\t :{}\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\n\\n\\\"\\\\tH&\\\"\\n\\r\\n\\n\\t :{}\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_13e148ce279f0c2b6f16bbc441725c99) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\t \n\"\"\t\r\t:{\t }\n\n\t} '
	const char* json = "{\r\t \n\"\"\t\r\t:{\t }\n\n\t} ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t \\n\\\"\\\"\\t\\r\\t:{\\t }\\n\\n\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_1b612d8501f589f866e96f2a1bcca0c8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\t\t\"\":\n  null \n}'
	const char* json = "\n{\t\t\"\":\n  null \n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\t\\\"\\\":\\n  null \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_548c903e585ea6145bb43889b37e2a03) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \"\"\n :\t\r false\r\r\r\t\r,\t\r\r\"\\\\\\r\":false\t\r\t\n,\t\n\r\t\"\\n\\n\\nT8\\\"@n\"\n\t \r : -00.0053e+0940109\n}'
	const char* json = "{ \"\"\n :\t\r false\r\r\r\t\r,\t\r\r\"\\\\\\r\":false\t\r\t\n,\t\n\r\t\"\\n\\n\\nT8\\\"@n\"\n\t \r : -00.0053e+0940109\n}";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\n :\\t\\r false\\r\\r\\r\\t\\r,\\t\\r\\r\\\"\\\\\\\\\\\\r\\\":false\\t\\r\\t\\n,\\t\\n\\r\\t\\\"\\\\n\\\\n\\\\nT8\\\\\\\"@n\\\"\\n\\t \\r : -00.0053e+0940109\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_80611fdffa84723a8433ec3dd7290a05) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t{\n \n \n\"(fwHA\\b\" \n\n:\t\t\r\"\"  \r}'
	const char* json = " \t{\n \n \n\"(fwHA\\b\" \n\n:\t\t\r\"\"  \r}";
	std::cerr << "Plain JSON string from model: " << " \\t{\\n \\n \\n\\\"(fwHA\\\\b\\\" \\n\\n:\\t\\t\\r\\\"\\\"  \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '(fwHA\b' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(fwHA\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_edb7795ab452eebd35e63f8943d3141e) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\r\"\\\"N\\nR@\\f \"\t \r:\r \t{ \"\":00\t\r } \r\n  }\t\n\n'
	const char* json = "\r{\r\"\\\"N\\nR@\\f \"\t \r:\r \t{ \"\":00\t\r } \r\n  }\t\n\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\\"\\\\\\\"N\\\\nR@\\\\f \\\"\\t \\r:\\r \\t{ \\\"\\\":00\\t\\r } \\r\\n  }\\t\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_8802187d4db96cb627a2f16f915f4873) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Digit
	// Digit
	// Digit
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \r\r\t\"|\\n\\f\\\"\\t\\/7%k\" :\t\r \"v\"\r\r\t\n \r,  \"\"\t:\n{\r}\r\n\r\r, \"g\\f\"\t\t\n: -00010E-00958168 ,\n\n\"\\r\"\n :true\r \r}\t \n'
	const char* json = "{ \r\r\t\"|\\n\\f\\\"\\t\\/7%k\" :\t\r \"v\"\r\r\t\n \r,  \"\"\t:\n{\r}\r\n\r\r, \"g\\f\"\t\t\n: -00010E-00958168 ,\n\n\"\\r\"\n :true\r \r}\t \n";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\r\\t\\\"|\\\\n\\\\f\\\\\\\"\\\\t\\\\/7%k\\\" :\\t\\r \\\"v\\\"\\r\\r\\t\\n \\r,  \\\"\\\"\\t:\\n{\\r}\\r\\n\\r\\r, \\\"g\\\\f\\\"\\t\\t\\n: -00010E-00958168 ,\\n\\n\\\"\\\\r\\\"\\n :true\\r \\r}\\t \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_2b5f9a319f93263324375533ca5328d2) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' {\n\"\\n\":false\r \t\r\r}'
	const char* json = " {\n\"\\n\":false\r \t\r\r}";
	std::cerr << "Plain JSON string from model: " << " {\\n\\\"\\\\n\\\":false\\r \\t\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b6ba31c288457a837f4a4b4c82baee99) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"\\b\\nt\\\"\\/ \"\r\t:{\t\"<\\/c\\t\" \t\r:\r\r{\n\t\r\n\"\\f\":\"F<\"\n\r\t\t\r\t}\r\n ,\t\t \r \n\n\"\"\r\r :\t\rfalse\r\r\r,  \"\\bK\\\"\\f.\" \n:null\r\r,\t\"\\r\\n\": \t\r{}\n\t\n\t,\t\"\\f8\\t\":-02062\t \r,\n\"\\\"\"   :\t[]\r,\n\"WG\" :\n\"\\rrb\",\r\"\\r\\\\\\\\.\":null\t\n\t}\t\r}'
	const char* json = "{\r\"\\b\\nt\\\"\\/ \"\r\t:{\t\"<\\/c\\t\" \t\r:\r\r{\n\t\r\n\"\\f\":\"F<\"\n\r\t\t\r\t}\r\n ,\t\t \r \n\n\"\"\r\r :\t\rfalse\r\r\r,  \"\\bK\\\"\\f.\" \n:null\r\r,\t\"\\r\\n\": \t\r{}\n\t\n\t,\t\"\\f8\\t\":-02062\t \r,\n\"\\\"\"   :\t[]\r,\n\"WG\" :\n\"\\rrb\",\r\"\\r\\\\\\\\.\":null\t\n\t}\t\r}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\b\\\\nt\\\\\\\"\\\\/ \\\"\\r\\t:{\\t\\\"<\\\\/c\\\\t\\\" \\t\\r:\\r\\r{\\n\\t\\r\\n\\\"\\\\f\\\":\\\"F<\\\"\\n\\r\\t\\t\\r\\t}\\r\\n ,\\t\\t \\r \\n\\n\\\"\\\"\\r\\r :\\t\\rfalse\\r\\r\\r,  \\\"\\\\bK\\\\\\\"\\\\f.\\\" \\n:null\\r\\r,\\t\\\"\\\\r\\\\n\\\": \\t\\r{}\\n\\t\\n\\t,\\t\\\"\\\\f8\\\\t\\\":-02062\\t \\r,\\n\\\"\\\\\\\"\\\"   :\\t[]\\r,\\n\\\"WG\\\" :\\n\\\"\\\\rrb\\\",\\r\\\"\\\\r\\\\\\\\\\\\\\\\.\\\":null\\t\\n\\t}\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cced679009f68241b58676c4bbc5b158) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\"N\"\n\r:-0\r\n\n\r ,\t\r \n\"z\" \r\t \t\t:{\t}, \t\"\"\n \n: \t\ttrue\t\n\n}\t'
	const char* json = "{\r\"N\"\n\r:-0\r\n\n\r ,\t\r \n\"z\" \r\t \t\t:{\t}, \t\"\"\n \n: \t\ttrue\t\n\n}\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"N\\\"\\n\\r:-0\\r\\n\\n\\r ,\\t\\r \\n\\\"z\\\" \\r\\t \\t\\t:{\\t}, \\t\\\"\\\"\\n \\n: \\t\\ttrue\\t\\n\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'N' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "N");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ff08e4a2734593807b2370f583ef725e) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\n\t\"\\/>\"\r \t:\n\n\nnull\n\n} \r '
	const char* json = "{\t\n\t\"\\/>\"\r \t:\n\n\nnull\n\n} \r ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\t\\\"\\\\/>\\\"\\r \\t:\\n\\n\\nnull\\n\\n} \\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/>' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/>");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_48e739e3e56e20fe23df4a73cee53276) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \t\t\t\r\"\\b\\\\\"\n\n\t:true\r\t }\r\n'
	const char* json = "{ \t\t\t\r\"\\b\\\\\"\n\n\t:true\r\t }\r\n";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\t\\t\\r\\\"\\\\b\\\\\\\\\\\"\\n\\n\\t:true\\r\\t }\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_49ba8391931de8c81ea40bc6d6b9594a) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\r\n\r\"\\rN\\/\\/\" \t\n:\r[]\t,\r\n \t\"`\\n\"\n\t:\r\"`>\\r\"\r\n,  \n\"\\t\":\r[null]  \r\r\t  ,\n\r\r\n\"\" :\rtrue\r \r\n,  \"N\\b\\\"\\\\\" :\t\nfalse\r\n\t}'
	const char* json = "\r{\r\n\r\"\\rN\\/\\/\" \t\n:\r[]\t,\r\n \t\"`\\n\"\n\t:\r\"`>\\r\"\r\n,  \n\"\\t\":\r[null]  \r\r\t  ,\n\r\r\n\"\" :\rtrue\r \r\n,  \"N\\b\\\"\\\\\" :\t\nfalse\r\n\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\n\\r\\\"\\\\rN\\\\/\\\\/\\\" \\t\\n:\\r[]\\t,\\r\\n \\t\\\"`\\\\n\\\"\\n\\t:\\r\\\"`>\\\\r\\\"\\r\\n,  \\n\\\"\\\\t\\\":\\r[null]  \\r\\r\\t  ,\\n\\r\\r\\n\\\"\\\" :\\rtrue\\r \\r\\n,  \\\"N\\\\b\\\\\\\"\\\\\\\\\\\" :\\t\\nfalse\\r\\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '`\n' = '`>\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "`\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("`>\r", cJSON_string(child));
	}
	{
		// '\t':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'N\b\"\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "N\b\"\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_97ac14de7e8ba0e1b57bcbf689ea3359) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \r\"\\n\" \n:\n\n\r[\"\" \r\n\n ]\t\r}'
	const char* json = "{ \r\"\\n\" \n:\n\n\r[\"\" \r\n\n ]\t\r}";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\\"\\\\n\\\" \\n:\\n\\n\\r[\\\"\\\" \\r\\n\\n ]\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n':0 = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6c822686cee3c5259f1905317503b727) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' \n {\r\"\"\t :null\t\r\t\n \t\t\r\r}\n'
	const char* json = " \n {\r\"\"\t :null\t\r\t\n \t\t\r\r}\n";
	std::cerr << "Plain JSON string from model: " << " \\n {\\r\\\"\\\"\\t :null\\t\\r\\t\\n \\t\\t\\r\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_10029f0c412bd4f56183ff1d93b73217) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r \t{ \t \t\"O\"\n\n\r:false, \n \n\"V8\"\t\t\r:\t \ttrue\r\n\r\t, \n\t\"\\fXW!\\f\\\"\"\r\r:[\r null\r\t,[] \r\t\t]\n,\r\t   \r\"\\r\\r1-\":\t\r\t0.0e-0002060,\r\r\t\r \"\" :\n\t{\n\t}\t }\n'
	const char* json = "\r \t{ \t \t\"O\"\n\n\r:false, \n \n\"V8\"\t\t\r:\t \ttrue\r\n\r\t, \n\t\"\\fXW!\\f\\\"\"\r\r:[\r null\r\t,[] \r\t\t]\n,\r\t   \r\"\\r\\r1-\":\t\r\t0.0e-0002060,\r\r\t\r \"\" :\n\t{\n\t}\t }\n";
	std::cerr << "Plain JSON string from model: " << "\\r \\t{ \\t \\t\\\"O\\\"\\n\\n\\r:false, \\n \\n\\\"V8\\\"\\t\\t\\r:\\t \\ttrue\\r\\n\\r\\t, \\n\\t\\\"\\\\fXW!\\\\f\\\\\\\"\\\"\\r\\r:[\\r null\\r\\t,[] \\r\\t\\t]\\n,\\r\\t   \\r\\\"\\\\r\\\\r1-\\\":\\t\\r\\t0.0e-0002060,\\r\\r\\t\\r \\\"\\\" :\\n\\t{\\n\\t}\\t }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'V8' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "V8");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\fXW!\f\"':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fXW!\f\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\r\r1-' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\r1-");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// 'O' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "O");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_063eed2f8ad2ddb06a24cec17ae865da) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\r{\n\r\t\r \"\\/\": false \n\t ,\t\"\" :{ } \t\t\t}'
	const char* json = "\r\r{\n\r\t\r \"\\/\": false \n\t ,\t\"\" :{ } \t\t\t}";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\n\\r\\t\\r \\\"\\\\/\\\": false \\n\\t ,\\t\\\"\\\" :{ } \\t\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ed4117056ba901de117576d104861c4a) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n \t{\t\r\r\"\\/v\"\t\r:\tnull\t}'
	const char* json = "\n \t{\t\r\r\"\\/v\"\t\r:\tnull\t}";
	std::cerr << "Plain JSON string from model: " << "\\n \\t{\\t\\r\\r\\\"\\\\/v\\\"\\t\\r:\\tnull\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/v' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/v");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0afddf199281827e820066ee8f41b3e2) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\n\r\t\" W4\"\t \n\t:\t\t\ttrue}'
	const char* json = " {\n\r\t\" W4\"\t \n\t:\t\t\ttrue}";
	std::cerr << "Plain JSON string from model: " << " {\\n\\r\\t\\\" W4\\\"\\t \\n\\t:\\t\\t\\ttrue}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ' W4' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " W4");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2ddd3fa721f17918c7f68bcb4a59880e) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \n \"\\n\\\\\" : {},\r\r\r\"t\\fk\" \n\n :true\r}'
	const char* json = "{ \n \"\\n\\\\\" : {},\r\r\r\"t\\fk\" \n\n :true\r}";
	std::cerr << "Plain JSON string from model: " << "{ \\n \\\"\\\\n\\\\\\\\\\\" : {},\\r\\r\\r\\\"t\\\\fk\\\" \\n\\n :true\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 't\fk' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "t\fk");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0b80073c15ccb8cfba3cffd0e1299179) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\r\t{\r\n\n\"xZ\\t)\":false\r\t\t\t\r}\n\n\r'
	const char* json = "\n\r\t{\r\n\n\"xZ\\t)\":false\r\t\t\t\r}\n\n\r";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{\\r\\n\\n\\\"xZ\\\\t)\\\":false\\r\\t\\t\\t\\r}\\n\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'xZ\t)' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "xZ\t)");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_992abf7bd48912df5873b7b3187dd381) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n    \n\"\":\"\\np\"\r\r ,\r\r\t\"<\"\n \t:true,\r\r\"\\rqz}\" :\n \r[]\n\r\t\n,  \"6\\t\" :\t  \"\\\\\"\r\n }\n'
	const char* json = "{\n    \n\"\":\"\\np\"\r\r ,\r\r\t\"<\"\n \t:true,\r\r\"\\rqz}\" :\n \r[]\n\r\t\n,  \"6\\t\" :\t  \"\\\\\"\r\n }\n";
	std::cerr << "Plain JSON string from model: " << "{\\n    \\n\\\"\\\":\\\"\\\\np\\\"\\r\\r ,\\r\\r\\t\\\"<\\\"\\n \\t:true,\\r\\r\\\"\\\\rqz}\\\" :\\n \\r[]\\n\\r\\t\\n,  \\\"6\\\\t\\\" :\\t  \\\"\\\\\\\\\\\"\\r\\n }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\np'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\np", cJSON_string(child));
	}
	{
		// '<' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '6\t' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "6\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_862f483bae17a1a0bd456ee0d5bdab5d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Zero
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\".\" \n\r\t: \n\t true,\n \"\" \r\n\r:\t   {\r  \r\"\\tp\"\t:\rfalse\r\n \r\r\n,\n\r \r\"\\f\\n\":\t\r \".\\/\\f\\\\\\\\\"\t\r\t,\r \n  \"tK\"\t:-0070010.05E0406\n\t}\n\r,\r\"u,\\\"I\\t\\n\\fC\"\r:\r\n\t-0} '
	const char* json = "\r{\".\" \n\r\t: \n\t true,\n \"\" \r\n\r:\t   {\r  \r\"\\tp\"\t:\rfalse\r\n \r\r\n,\n\r \r\"\\f\\n\":\t\r \".\\/\\f\\\\\\\\\"\t\r\t,\r \n  \"tK\"\t:-0070010.05E0406\n\t}\n\r,\r\"u,\\\"I\\t\\n\\fC\"\r:\r\n\t-0} ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\".\\\" \\n\\r\\t: \\n\\t true,\\n \\\"\\\" \\r\\n\\r:\\t   {\\r  \\r\\\"\\\\tp\\\"\\t:\\rfalse\\r\\n \\r\\r\\n,\\n\\r \\r\\\"\\\\f\\\\n\\\":\\t\\r \\\".\\\\/\\\\f\\\\\\\\\\\\\\\\\\\"\\t\\r\\t,\\r \\n  \\\"tK\\\"\\t:-0070010.05E0406\\n\\t}\\n\\r,\\r\\\"u,\\\\\\\"I\\\\t\\\\n\\\\fC\\\"\\r:\\r\\n\\t-0} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a6642844bbe714e4c051a6c1a6f28e47) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\t\"\\fd\\/\\b\": \r\t-00e0\n , \n\"\\\\\\b\\\"B\\\"Z\":\n\n\n \"\"\n\t\t\n}\n\r'
	const char* json = "\n{\t\"\\fd\\/\\b\": \r\t-00e0\n , \n\"\\\\\\b\\\"B\\\"Z\":\n\n\n \"\"\n\t\t\n}\n\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\\"\\\\fd\\\\/\\\\b\\\": \\r\\t-00e0\\n , \\n\\\"\\\\\\\\\\\\b\\\\\\\"B\\\\\\\"Z\\\":\\n\\n\\n \\\"\\\"\\n\\t\\t\\n}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f7a1e3ef06e785e59a339a8bdf77fb11) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\r\r{\t \"o\\r\\\"\"\r\n:null\t\r\n,\t\r\n\r\r\n\"T\\/^\\f8\\\\z\\bTh\\\\\":\tfalse}'
	const char* json = "\r\r\r{\t \"o\\r\\\"\"\r\n:null\t\r\n,\t\r\n\r\r\n\"T\\/^\\f8\\\\z\\bTh\\\\\":\tfalse}";
	std::cerr << "Plain JSON string from model: " << "\\r\\r\\r{\\t \\\"o\\\\r\\\\\\\"\\\"\\r\\n:null\\t\\r\\n,\\t\\r\\n\\r\\r\\n\\\"T\\\\/^\\\\f8\\\\\\\\z\\\\bTh\\\\\\\\\\\":\\tfalse}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'o\r\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "o\r\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'T/^\f8\\z\bTh\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "T/^\f8\\z\bTh\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_faec24c2fb7187df03acf15ac000d0c7) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\t \"\":{\"3\":\n\r\r[\rnull\r\n ]\t} \t\r }\n'
	const char* json = "{\r\t \"\":{\"3\":\n\r\r[\rnull\r\n ]\t} \t\r }\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t \\\"\\\":{\\\"3\\\":\\n\\r\\r[\\rnull\\r\\n ]\\t} \\t\\r }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'3':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "3");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7606256e7ff8a38ab37edb36df9f0ee1) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\"\"\n: false\t\t\r,\t\r\r\t\"#\" :null\t  \n}'
	const char* json = "{\"\"\n: false\t\t\r,\t\r\r\t\"#\" :null\t  \n}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\n: false\\t\\t\\r,\\t\\r\\r\\t\\\"#\\\" :null\\t  \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '#' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5d7ed6181453b0d85746cf74ee249aaa) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\t\"\":\tnull\n\n,\t\t\"[\\b\\\"n\"\n\n :-098.0550 \n\r} \t\r'
	const char* json = " {\t\"\":\tnull\n\n,\t\t\"[\\b\\\"n\"\n\n :-098.0550 \n\r} \t\r";
	std::cerr << "Plain JSON string from model: " << " {\\t\\\"\\\":\\tnull\\n\\n,\\t\\t\\\"[\\\\b\\\\\\\"n\\\"\\n\\n :-098.0550 \\n\\r} \\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a4cb93cd802cab2b0f12418b3b6193bf) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\"\":[ \n] \n ,   \n\n\t\r\"[\\r\\n\":\ntrue\t\n\t,\"\\\"\\n\\fc\":  \tfalse\n\r\r\r\r\n\r,\t \n\",\"\n\n:[\n03040.083403E+0,\n\r\r[\ttrue]\r,\t\r\rtrue\n] }\n'
	const char* json = "{\n\"\":[ \n] \n ,   \n\n\t\r\"[\\r\\n\":\ntrue\t\n\t,\"\\\"\\n\\fc\":  \tfalse\n\r\r\r\r\n\r,\t \n\",\"\n\n:[\n03040.083403E+0,\n\r\r[\ttrue]\r,\t\r\rtrue\n] }\n";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\":[ \\n] \\n ,   \\n\\n\\t\\r\\\"[\\\\r\\\\n\\\":\\ntrue\\t\\n\\t,\\\"\\\\\\\"\\\\n\\\\fc\\\":  \\tfalse\\n\\r\\r\\r\\r\\n\\r,\\t \\n\\\",\\\"\\n\\n:[\\n03040.083403E+0,\\n\\r\\r[\\ttrue]\\r,\\t\\r\\rtrue\\n] }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e8c7c03daa28c8944c4d49f78d5f1c7c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \r\t\"nL\\tc@\"\t\t\n:null\r\n   \n\t\r}\t'
	const char* json = "{ \r\t\"nL\\tc@\"\t\t\n:null\r\n   \n\t\r}\t";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\t\\\"nL\\\\tc@\\\"\\t\\t\\n:null\\r\\n   \\n\\t\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'nL\tc@' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "nL\tc@");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ac81f8851a6eb7815542b7903b6bf72d) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\n  \r\t\n\"\\\"\"\n\n \t: \rnull \n\n\r}'
	const char* json = "{\n  \r\t\n\"\\\"\"\n\n \t: \rnull \n\n\r}";
	std::cerr << "Plain JSON string from model: " << "{\\n  \\r\\t\\n\\\"\\\\\\\"\\\"\\n\\n \\t: \\rnull \\n\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_dde99d8cfb5e4cc48c51b0c313b98e09) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\"{\"\r \n:\rnull\n}'
	const char* json = "{\t\"{\"\r \n:\rnull\n}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"{\\\"\\r \\n:\\rnull\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '{' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "{");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f0195e4cd0e76a40d0e585b43166ba17) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t{\n \r\r\"\\n\"\r:true\t }'
	const char* json = " \t{\n \r\r\"\\n\"\r:true\t }";
	std::cerr << "Plain JSON string from model: " << " \\t{\\n \\r\\r\\\"\\\\n\\\"\\r:true\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9c905b86fc9e0956f93a3b5c08c2ae22) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\t\"{\"\n \t :{\r}\t \r,\r\n \"B\\\"\\f\"\t:\n\"h\"\r\n \t}\t'
	const char* json = "{\t\t\"{\"\n \t :{\r}\t \r,\r\n \"B\\\"\\f\"\t:\n\"h\"\r\n \t}\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"{\\\"\\n \\t :{\\r}\\t \\r,\\r\\n \\\"B\\\\\\\"\\\\f\\\"\\t:\\n\\\"h\\\"\\r\\n \\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'B\"\f' = 'h'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "B\"\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("h", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_09ad50d494f795543c65686ff2ec9c52) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\t\n\n\r\r\"O\\t\\t\"\t\t :[\r\n\r {}]\r\t,\t\n\r\n\"\\\\\":\n\rnull\r\r \r}'
	const char* json = "{\r\t\n\n\r\r\"O\\t\\t\"\t\t :[\r\n\r {}]\r\t,\t\n\r\n\"\\\\\":\n\rnull\r\r \r}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\n\\n\\r\\r\\\"O\\\\t\\\\t\\\"\\t\\t :[\\r\\n\\r {}]\\r\\t,\\t\\n\\r\\n\\\"\\\\\\\\\\\":\\n\\rnull\\r\\r \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_796178ef9f484f119007d2cc6edad785) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"#\"\t \n:-070}\n'
	const char* json = "{ \"#\"\t \n:-070}\n";
	std::cerr << "Plain JSON string from model: " << "{ \\\"#\\\"\\t \\n:-070}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_da4243ec4fa9422c69cd5146b697abd8) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\r\r\t\t\"~\" :\t null\n  ,\t\"E\\t\":\t {\r\"m\"\t:\"g@\"\n\r\r}\n\t\n,\t\r\r\r\"\"\r : \n{\n\n},\t\r\n\"\\\\\"\t\r\t:\t\r \nfalse }\n'
	const char* json = "{\r\r\r\t\t\"~\" :\t null\n  ,\t\"E\\t\":\t {\r\"m\"\t:\"g@\"\n\r\r}\n\t\n,\t\r\r\r\"\"\r : \n{\n\n},\t\r\n\"\\\\\"\t\r\t:\t\r \nfalse }\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\r\\t\\t\\\"~\\\" :\\t null\\n  ,\\t\\\"E\\\\t\\\":\\t {\\r\\\"m\\\"\\t:\\\"g@\\\"\\n\\r\\r}\\n\\t\\n,\\t\\r\\r\\r\\\"\\\"\\r : \\n{\\n\\n},\\t\\r\\n\\\"\\\\\\\\\\\"\\t\\r\\t:\\t\\r \\nfalse }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'E\t':'m' = 'g@'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "E\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "m");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("g@", cJSON_string(child));
	}
	{
		// '\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '~' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "~");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c0784f9e249a6812840ec7cad81b3883) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{ \t\t\n\"\\\\\" :\n-0.0  }'
	const char* json = "\n{ \t\t\n\"\\\\\" :\n-0.0  }";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t\\t\\n\\\"\\\\\\\\\\\" :\\n-0.0  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bb66bbe9b2b28c75146ddd89576eb925) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n \"\"\n\r:null  \t\t ,\"\\t\"\n: \n 0 }'
	const char* json = "{\n\n \"\"\n\r:null  \t\t ,\"\\t\"\n: \n 0 }";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n \\\"\\\"\\n\\r:null  \\t\\t ,\\\"\\\\t\\\"\\n: \\n 0 }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\t' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7275c9406c2fc5139d96e4ea56812575) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{  \"\\f\\tIC\"\n\t\t:[[] , -060005\r\n\r\t , null\r \n ]\n \r}\t'
	const char* json = "{  \"\\f\\tIC\"\n\t\t:[[] , -060005\r\n\r\t , null\r \n ]\n \r}\t";
	std::cerr << "Plain JSON string from model: " << "{  \\\"\\\\f\\\\tIC\\\"\\n\\t\\t:[[] , -060005\\r\\n\\r\\t , null\\r \\n ]\\n \\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_319a76e6cfdc2ba43c204ae87902a627) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n \t\"\":\nnull,\";\\nm\"\n \n:\t{\"\\t\\\\$(\":-02.000e+07\t\t\t,   \n\n\"\\t\\r\\fz\"\n:  00289e0}\n\t \r,\r \"\\f\\ts\\r\": \t\rtrue\r\r\t}\t  '
	const char* json = "{\n \t\"\":\nnull,\";\\nm\"\n \n:\t{\"\\t\\\\$(\":-02.000e+07\t\t\t,   \n\n\"\\t\\r\\fz\"\n:  00289e0}\n\t \r,\r \"\\f\\ts\\r\": \t\rtrue\r\r\t}\t  ";
	std::cerr << "Plain JSON string from model: " << "{\\n \\t\\\"\\\":\\nnull,\\\";\\\\nm\\\"\\n \\n:\\t{\\\"\\\\t\\\\\\\\$(\\\":-02.000e+07\\t\\t\\t,   \\n\\n\\\"\\\\t\\\\r\\\\fz\\\"\\n:  00289e0}\\n\\t \\r,\\r \\\"\\\\f\\\\ts\\\\r\\\": \\t\\rtrue\\r\\r\\t}\\t  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_34aaef30970e50de7af8fe036a22d0bd) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\r\n{\"\\\\\\b\\\\\\/\\r\\f\"\n\r: [ \t\n\"\",false\r \r],  \t\t\"\\b\\t\\\\\": null\n}\t'
	const char* json = "\r\r\n{\"\\\\\\b\\\\\\/\\r\\f\"\n\r: [ \t\n\"\",false\r \r],  \t\t\"\\b\\t\\\\\": null\n}\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\r\\n{\\\"\\\\\\\\\\\\b\\\\\\\\\\\\/\\\\r\\\\f\\\"\\n\\r: [ \\t\\n\\\"\\\",false\\r \\r],  \\t\\t\\\"\\\\b\\\\t\\\\\\\\\\\": null\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\b\\/\r\f':0 = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\b\\/\r\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\\\b\\/\r\f':1 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\b\\/\r\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\b\t\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\t\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2746dae2c5a2f79f5c0e4c0ff942cb93) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\":[]\r\r \t ,\t\t\t\t\"\\b\"\t \n:\r\t[]\r\n\t\r}\t'
	const char* json = "{ \"\":[]\r\r \t ,\t\t\t\t\"\\b\"\t \n:\r\t[]\r\n\t\r}\t";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\":[]\\r\\r \\t ,\\t\\t\\t\\t\\\"\\\\b\\\"\\t \\n:\\r\\t[]\\r\\n\\t\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_23cc349742d392ae662cec75c438d787) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\n \r \n\r\"\\/\\\"q7s~\"\n \r\n:false\r }'
	const char* json = "{\r\n \r \n\r\"\\/\\\"q7s~\"\n \r\n:false\r }";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n \\r \\n\\r\\\"\\\\/\\\\\\\"q7s~\\\"\\n \\r\\n:false\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\"q7s~' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\"q7s~");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ec3f2ce47d83d8d82efac8d12465451d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\"^\\n\" :\tfalse\n \r\t}'
	const char* json = "{\"^\\n\" :\tfalse\n \r\t}";
	std::cerr << "Plain JSON string from model: " << "{\\\"^\\\\n\\\" :\\tfalse\\n \\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '^\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "^\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0445a46a3096c64e66531361b12f18c5) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{ \n\r\"\\rK\"\n  \r\t:\n \rfalse\n\r}'
	const char* json = "\r{ \n\r\"\\rK\"\n  \r\t:\n \rfalse\n\r}";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\n\\r\\\"\\\\rK\\\"\\n  \\r\\t:\\n \\rfalse\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\rK' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\rK");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fa0dafccb0cb903e0ba8e458eb8df28c) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\n\"\\f\"\t\n:\".\\\"\"\r, \t \n\r\t\"\\by4&\"\r:\t\"\"  ,\n\r\n\n\t\"\\ty\"\t:\nfalse\n\t ,\r\r  \"\\b\":true\t,\r\r\n\n\"\\n\"\r:\ntrue}\n'
	const char* json = "{\n\n\"\\f\"\t\n:\".\\\"\"\r, \t \n\r\t\"\\by4&\"\r:\t\"\"  ,\n\r\n\n\t\"\\ty\"\t:\nfalse\n\t ,\r\r  \"\\b\":true\t,\r\r\n\n\"\\n\"\r:\ntrue}\n";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\\"\\\\f\\\"\\t\\n:\\\".\\\\\\\"\\\"\\r, \\t \\n\\r\\t\\\"\\\\by4&\\\"\\r:\\t\\\"\\\"  ,\\n\\r\\n\\n\\t\\\"\\\\ty\\\"\\t:\\nfalse\\n\\t ,\\r\\r  \\\"\\\\b\\\":true\\t,\\r\\r\\n\\n\\\"\\\\n\\\"\\r:\\ntrue}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\ty' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\ty");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\f' = '.\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(".\"", cJSON_string(child));
	}
	{
		// '\by4&' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\by4&");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9e760d31e86385a5a6c1837630b569d0) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Digit
	// Zero
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Digit
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\r\t\"^\"\r\t:073000E-00080007\t\t\n\t ,\"\":\r true}'
	const char* json = "{\r\r\t\"^\"\r\t:073000E-00080007\t\t\n\t ,\"\":\r true}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\\"^\\\"\\r\\t:073000E-00080007\\t\\t\\n\\t ,\\\"\\\":\\r true}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_49d040a81ca28238f184406eaf211443) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\r{\n \n\t \"A>\"   :[\r\r\t\t-0060.0727030E-00000050\n] \t\t,\n\n\n\"#\"\t\t:\t \t\"\" \n\t ,\"M\\/\\\"\"\t\t \n:{\t\t\"P\":\t false\t}}\n'
	const char* json = "\r\r{\n \n\t \"A>\"   :[\r\r\t\t-0060.0727030E-00000050\n] \t\t,\n\n\n\"#\"\t\t:\t \t\"\" \n\t ,\"M\\/\\\"\"\t\t \n:{\t\t\"P\":\t false\t}}\n";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\n \\n\\t \\\"A>\\\"   :[\\r\\r\\t\\t-0060.0727030E-00000050\\n] \\t\\t,\\n\\n\\n\\\"#\\\"\\t\\t:\\t \\t\\\"\\\" \\n\\t ,\\\"M\\\\/\\\\\\\"\\\"\\t\\t \\n:{\\t\\t\\\"P\\\":\\t false\\t}}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_197defa8b23669d32d844ac4e7f51ef1) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\n\n{\n\r\n \"\"\n  \n: \"V\\tmP\"\r\t ,\t\"\\r2\"  \t\t\t :null  }\n\n\t'
	const char* json = "\t\n\n{\n\r\n \"\"\n  \n: \"V\\tmP\"\r\t ,\t\"\\r2\"  \t\t\t :null  }\n\n\t";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\n{\\n\\r\\n \\\"\\\"\\n  \\n: \\\"V\\\\tmP\\\"\\r\\t ,\\t\\\"\\\\r2\\\"  \\t\\t\\t :null  }\\n\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'V\tmP'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("V\tmP", cJSON_string(child));
	}
	{
		// '\r2' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r2");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d7075aeca2bb5bb8d2f20eb9f21259de) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\r{\n\n\"*\\\"\\/OiG\\b\":\r \r null\n\r\n\n\r,\r \t\"m\\/\\fh|\"\n\r\t:\tfalse\n}  '
	const char* json = "\r\r{\n\n\"*\\\"\\/OiG\\b\":\r \r null\n\r\n\n\r,\r \t\"m\\/\\fh|\"\n\r\t:\tfalse\n}  ";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\n\\n\\\"*\\\\\\\"\\\\/OiG\\\\b\\\":\\r \\r null\\n\\r\\n\\n\\r,\\r \\t\\\"m\\\\/\\\\fh|\\\"\\n\\r\\t:\\tfalse\\n}  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '*\"/OiG\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "*\"/OiG\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'm/\fh|' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "m/\fh|");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f78b617568befc8feb0469a73523d30b) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n {\r\"\\n0\"\r\n :true\r,\n\n\r \n\"\\t&uDOtkV\\f\"\r :\n\t\ntrue \t\n}\n\t'
	const char* json = "\n {\r\"\\n0\"\r\n :true\r,\n\n\r \n\"\\t&uDOtkV\\f\"\r :\n\t\ntrue \t\n}\n\t";
	std::cerr << "Plain JSON string from model: " << "\\n {\\r\\\"\\\\n0\\\"\\r\\n :true\\r,\\n\\n\\r \\n\\\"\\\\t&uDOtkV\\\\f\\\"\\r :\\n\\t\\ntrue \\t\\n}\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t&uDOtkV\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t&uDOtkV\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\n0' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n0");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bf8d8960d4503335292c00c36466c5e2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n\t\n{\n\n\"\\b\\/\\n37\"   :\n0000.0E-0\t,\n \r\"\\f\\b!l\":[\r\tfalse\t\t ,[ ], null  ,\nfalse\n\n\n]\r\n\n\n\r\t\r\t}'
	const char* json = "\n\t\n{\n\n\"\\b\\/\\n37\"   :\n0000.0E-0\t,\n \r\"\\f\\b!l\":[\r\tfalse\t\t ,[ ], null  ,\nfalse\n\n\n]\r\n\n\n\r\t\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\n\\t\\n{\\n\\n\\\"\\\\b\\\\/\\\\n37\\\"   :\\n0000.0E-0\\t,\\n \\r\\\"\\\\f\\\\b!l\\\":[\\r\\tfalse\\t\\t ,[ ], null  ,\\nfalse\\n\\n\\n]\\r\\n\\n\\n\\r\\t\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_dd2f851b2e1d98666f538eef0efff8a7) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\r\r\t\"X\":\r\n{\t\"\"\r\r: \rfalse }\t\r, \n \n\t\n\"{\"\n\t:\rfalse}'
	const char* json = "\t{\r\r\t\"X\":\r\n{\t\"\"\r\r: \rfalse }\t\r, \n \n\t\n\"{\"\n\t:\rfalse}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r\\t\\\"X\\\":\\r\\n{\\t\\\"\\\"\\r\\r: \\rfalse }\\t\\r, \\n \\n\\t\\n\\\"{\\\"\\n\\t:\\rfalse}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'X':'' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "X");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '{' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "{");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bc9f227e52a4acd081defdc3bc94134e) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"\"\t\t:\t\tfalse,\t \t\r\t\"\\n\"  :true \n,\r\t\t\"\\tp\\f\" \n:\";\"\r,\r\";\\f\\t\":true\n\r,\n\n\n\"\\b\":{}  }'
	const char* json = "{\"\"\t\t:\t\tfalse,\t \t\r\t\"\\n\"  :true \n,\r\t\t\"\\tp\\f\" \n:\";\"\r,\r\";\\f\\t\":true\n\r,\n\n\n\"\\b\":{}  }";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\t\\t:\\t\\tfalse,\\t \\t\\r\\t\\\"\\\\n\\\"  :true \\n,\\r\\t\\t\\\"\\\\tp\\\\f\\\" \\n:\\\";\\\"\\r,\\r\\\";\\\\f\\\\t\\\":true\\n\\r,\\n\\n\\n\\\"\\\\b\\\":{}  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// ';\f\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ";\f\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\tp\f' = ';'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\tp\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(";", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7301e9a9ccac473c11cff9c8b6bb6880) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t{\n\"\":\n\t\n[\n\n[]\n\t\r\r\n\r,false\r\n, \t\nfalse\t\n] ,\r\r\r\n\"CG5\"\r: \n[]}'
	const char* json = " \t{\n\"\":\n\t\n[\n\n[]\n\t\r\r\n\r,false\r\n, \t\nfalse\t\n] ,\r\r\r\n\"CG5\"\r: \n[]}";
	std::cerr << "Plain JSON string from model: " << " \\t{\\n\\\"\\\":\\n\\t\\n[\\n\\n[]\\n\\t\\r\\r\\n\\r,false\\r\\n, \\t\\nfalse\\t\\n] ,\\r\\r\\r\\n\\\"CG5\\\"\\r: \\n[]}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':1 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':2 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5062084cd3a76cf11a3bc40ce9500834) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\t\r \t\r\"\" \t  : \t{}\r, \r\"\\/\": \tnull}'
	const char* json = "{\t\t\r \t\r\"\" \t  : \t{}\r, \r\"\\/\": \tnull}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\r \\t\\r\\\"\\\" \\t  : \\t{}\\r, \\r\\\"\\\\/\\\": \\tnull}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_06b6916cb86c03098089c227b8bdb617) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\n{\t  \"1pNuU\\f\\\"\\/Qp\": false }\r'
	const char* json = "\r\n{\t  \"1pNuU\\f\\\"\\/Qp\": false }\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\t  \\\"1pNuU\\\\f\\\\\\\"\\\\/Qp\\\": false }\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '1pNuU\f\"/Qp' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1pNuU\f\"/Qp");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c78f3af9c643b15dc6ee6de2f27b17c0) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n \t{\n\n\t\"zni\" \n\t:\r\n[]\n,  \n \t\r\"S}\\\"\\t6\"\n\n\r:[\ntrue\t]\n\r\n,\n\n\"5\\n\\r\\t:\\/\\n\\t\\rm\"\n : \t \"gi\"\r\n}\r\n'
	const char* json = "\n \t{\n\n\t\"zni\" \n\t:\r\n[]\n,  \n \t\r\"S}\\\"\\t6\"\n\n\r:[\ntrue\t]\n\r\n,\n\n\"5\\n\\r\\t:\\/\\n\\t\\rm\"\n : \t \"gi\"\r\n}\r\n";
	std::cerr << "Plain JSON string from model: " << "\\n \\t{\\n\\n\\t\\\"zni\\\" \\n\\t:\\r\\n[]\\n,  \\n \\t\\r\\\"S}\\\\\\\"\\\\t6\\\"\\n\\n\\r:[\\ntrue\\t]\\n\\r\\n,\\n\\n\\\"5\\\\n\\\\r\\\\t:\\\\/\\\\n\\\\t\\\\rm\\\"\\n : \\t \\\"gi\\\"\\r\\n}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '5\n\r\t:/\n\t\rm' = 'gi'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "5\n\r\t:/\n\t\rm");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("gi", cJSON_string(child));
	}
	{
		// 'S}\"\t6':0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "S}\"\t6");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_413cf4fec65f0a3d8f5051524466cb2f) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\r\"G\\\\\"\t\t\n :true\r\t\t,\t\r\r \"M\":\t\n\"T\\\":\\\"k\"\r \n\r\n,\r\n\"JF\"\t\n\r\r:\rfalse\t\n\n\n \r,\r\"@\\n\\t\"\n\n :null\n\t\t\t}'
	const char* json = "{\n\r\"G\\\\\"\t\t\n :true\r\t\t,\t\r\r \"M\":\t\n\"T\\\":\\\"k\"\r \n\r\n,\r\n\"JF\"\t\n\r\r:\rfalse\t\n\n\n \r,\r\"@\\n\\t\"\n\n :null\n\t\t\t}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\\"G\\\\\\\\\\\"\\t\\t\\n :true\\r\\t\\t,\\t\\r\\r \\\"M\\\":\\t\\n\\\"T\\\\\\\":\\\\\\\"k\\\"\\r \\n\\r\\n,\\r\\n\\\"JF\\\"\\t\\n\\r\\r:\\rfalse\\t\\n\\n\\n \\r,\\r\\\"@\\\\n\\\\t\\\"\\n\\n :null\\n\\t\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '@\n\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "@\n\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'JF' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "JF");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'G\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "G\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'M' = 'T\":\"k'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "M");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("T\":\"k", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e205a4d8a634a0919771093db2025e9e) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\"\r\r\t  \r:\r\t0.094e0  \t }\r'
	const char* json = "{\"\"\r\r\t  \r:\r\t0.094e0  \t }\r";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\r\\r\\t  \\r:\\r\\t0.094e0  \\t }\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.094'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.094, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7c3999f2f7ba9651dac36b05bd3614cc) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\t\"\\f\"\n\t\n:0000e-07\t\t\t\t}'
	const char* json = "{\r\t\"\\f\"\n\t\n:0000e-07\t\t\t\t}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"\\\\f\\\"\\n\\t\\n:0000e-07\\t\\t\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a5822711c1d2e646b9e831ec10484047) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' { \n\"\"\n:\n{\n},\t \r\r\":\\rp\\fb\\t\\\\G8\\\\\\rQ'\\rp\\t\" :true  , \r \"1\\\"\\\"\\r\\tG\": {\t\n\n\"7\"\t:false\t\t\t,\"\\/o};)\\t\"\r\r\n:\r{ \n\t \"\\\"\":\rtrue\n\r\r}\t\t}}'
	const char* json = " { \n\"\"\n:\n{\n},\t \r\r\":\\rp\\fb\\t\\\\G8\\\\\\rQ'\\rp\\t\" :true  , \r \"1\\\"\\\"\\r\\tG\": {\t\n\n\"7\"\t:false\t\t\t,\"\\/o};)\\t\"\r\r\n:\r{ \n\t \"\\\"\":\rtrue\n\r\r}\t\t}}";
	std::cerr << "Plain JSON string from model: " << " { \\n\\\"\\\"\\n:\\n{\\n},\\t \\r\\r\\\":\\\\rp\\\\fb\\\\t\\\\\\\\G8\\\\\\\\\\\\rQ'\\\\rp\\\\t\\\" :true  , \\r \\\"1\\\\\\\"\\\\\\\"\\\\r\\\\tG\\\": {\\t\\n\\n\\\"7\\\"\\t:false\\t\\t\\t,\\\"\\\\/o};)\\\\t\\\"\\r\\r\\n:\\r{ \\n\\t \\\"\\\\\\\"\\\":\\rtrue\\n\\r\\r}\\t\\t}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '1\"\"\r\tG':'/o};)\t':'\"' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1\"\"\r\tG");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/o};)\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '1\"\"\r\tG':'7' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1\"\"\r\tG");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "7");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// ':\rp\fb\t\\G8\\\rQ'\rp\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ":\rp\fb\t\\G8\\\rQ'\rp\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2626850c217b67a795395dc2ce35c321) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\n\"\\\\\\/\" \n : true\n\n\n\r, \t\r\"\":false\r}\n '
	const char* json = "{\t\n\"\\\\\\/\" \n : true\n\n\n\r, \t\r\"\":false\r}\n ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"\\\\\\\\\\\\/\\\" \\n : true\\n\\n\\n\\r, \\t\\r\\\"\\\":false\\r}\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b7c0de441c83949b1f74e1131c384adf) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\t\t{ \"\"\r\n\t\t\r:{\"\\t\" :true\r\t}\r}'
	const char* json = "\r\t\t{ \"\"\r\n\t\t\r:{\"\\t\" :true\r\t}\r}";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\t{ \\\"\\\"\\r\\n\\t\\t\\r:{\\\"\\\\t\\\" :true\\r\\t}\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c0d6341179624e612c2bbc3f4ee0a90c) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\"\\r\\fo\\fnE\"\n\n:\n\t{\r\n} ,\"\"\n:\"#\\\"`\\t\\r`\",\r \"\\b7\\\"\"\r\n:\n\ntrue }\n'
	const char* json = "{\t\"\\r\\fo\\fnE\"\n\n:\n\t{\r\n} ,\"\"\n:\"#\\\"`\\t\\r`\",\r \"\\b7\\\"\"\r\n:\n\ntrue }\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\r\\\\fo\\\\fnE\\\"\\n\\n:\\n\\t{\\r\\n} ,\\\"\\\"\\n:\\\"#\\\\\\\"`\\\\t\\\\r`\\\",\\r \\\"\\\\b7\\\\\\\"\\\"\\r\\n:\\n\\ntrue }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '#\"`\t\r`'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("#\"`\t\r`", cJSON_string(child));
	}
	{
		// '\b7\"' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b7\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_08ef806716ec7184548f4b035e446ec8) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t\n\"\\r\\/\"\t\r\t:\nnull\n \r }'
	const char* json = "{\t\n\"\\r\\/\"\t\r\t:\nnull\n \r }";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"\\\\r\\\\/\\\"\\t\\r\\t:\\nnull\\n \\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c132490f750d03b86cfaf60d2434080e) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\n\t\"Z\" \r :\t\t\"\"\r }\t'
	const char* json = "{\t\n\t\"Z\" \r :\t\t\"\"\r }\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\t\\\"Z\\\" \\r :\\t\\t\\\"\\\"\\r }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Z' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_65f164196914d4938d3a6829ce048ef9) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\"ABm\\\"\" \r:\t\t \"\"\t\n }'
	const char* json = "\r{\"ABm\\\"\" \r:\t\t \"\"\t\n }";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"ABm\\\\\\\"\\\" \\r:\\t\\t \\\"\\\"\\t\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'ABm\"' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ABm\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8ece5360b581258bc05ff1acc78b1ea2) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\n\"C\": [\"bV\"  ,null]\n, \n\r\"\\t\\\\\\/\"\r:\r[]\t\r}\t'
	const char* json = "{\n\n\"C\": [\"bV\"  ,null]\n, \n\r\"\\t\\\\\\/\"\r:\r[]\t\r}\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\\"C\\\": [\\\"bV\\\"  ,null]\\n, \\n\\r\\\"\\\\t\\\\\\\\\\\\/\\\"\\r:\\r[]\\t\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'C':0 = 'bV'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("bV", cJSON_string(child));
	}
	{
		// 'C':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_757bfc7074b2b9507d0ea1768da582cb) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Digit
	// Digit
	// Digit
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\r\t\r\"\"\n \t:\rtrue\n\t\n\r, \r \"\\n\\/\\bH\\/S\\/\"\r\r:0354600e0,\n \"\\/\"\n\r:\t\t-0.00E0220\r,\"i?\":false \r}\r\r'
	const char* json = "{\r\r\t\r\"\"\n \t:\rtrue\n\t\n\r, \r \"\\n\\/\\bH\\/S\\/\"\r\r:0354600e0,\n \"\\/\"\n\r:\t\t-0.00E0220\r,\"i?\":false \r}\r\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\r\\\"\\\"\\n \\t:\\rtrue\\n\\t\\n\\r, \\r \\\"\\\\n\\\\/\\\\bH\\\\/S\\\\/\\\"\\r\\r:0354600e0,\\n \\\"\\\\/\\\"\\n\\r:\\t\\t-0.00E0220\\r,\\\"i?\\\":false \\r}\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_68676add630a16c091f24dc0016caf23) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n\n{ \r\"\"\t:  \r\"\\r\"\t,\"p\"\r\n\r\n:\r\"#\"\t\t\t,\t\"\\b\\b\\fe\\/\"\t\r:false }\t'
	const char* json = "\n\n{ \r\"\"\t:  \r\"\\r\"\t,\"p\"\r\n\r\n:\r\"#\"\t\t\t,\t\"\\b\\b\\fe\\/\"\t\r:false }\t";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{ \\r\\\"\\\"\\t:  \\r\\\"\\\\r\\\"\\t,\\\"p\\\"\\r\\n\\r\\n:\\r\\\"#\\\"\\t\\t\\t,\\t\\\"\\\\b\\\\b\\\\fe\\\\/\\\"\\t\\r:false }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r", cJSON_string(child));
	}
	{
		// 'p' = '#'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "p");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("#", cJSON_string(child));
	}
	{
		// '\b\b\fe/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\b\fe/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1d11b3b51c8a648520ebda7733a9393f) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\"L]}\":\t{\r\r\n\"\":-0.02e008 \n\t}\t}\r'
	const char* json = "{\r\"L]}\":\t{\r\r\n\"\":-0.02e008 \n\t}\t}\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"L]}\\\":\\t{\\r\\r\\n\\\"\\\":-0.02e008 \\n\\t}\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'L]}':'' = '-2000000.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "L]}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-2000000.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e31ea26d9d23d47f82bf3da22824c61f) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' \r{ \t\r\"\"\t\t\r\t:false\n  ,\t \n\"0#9c-\\/\":\n\"]a\\/\"\n\n,\n\t\r\r\"D\" \r\n\r\t\r:[] \n\r,\n\t \n\t\"$\\t\"\r:{\n\t\"\\t\\t\\n9\\/\"\t \r:080.088 }\r\t\t }'
	const char* json = " \r{ \t\r\"\"\t\t\r\t:false\n  ,\t \n\"0#9c-\\/\":\n\"]a\\/\"\n\n,\n\t\r\r\"D\" \r\n\r\t\r:[] \n\r,\n\t \n\t\"$\\t\"\r:{\n\t\"\\t\\t\\n9\\/\"\t \r:080.088 }\r\t\t }";
	std::cerr << "Plain JSON string from model: " << " \\r{ \\t\\r\\\"\\\"\\t\\t\\r\\t:false\\n  ,\\t \\n\\\"0#9c-\\\\/\\\":\\n\\\"]a\\\\/\\\"\\n\\n,\\n\\t\\r\\r\\\"D\\\" \\r\\n\\r\\t\\r:[] \\n\\r,\\n\\t \\n\\t\\\"$\\\\t\\\"\\r:{\\n\\t\\\"\\\\t\\\\t\\\\n9\\\\/\\\"\\t \\r:080.088 }\\r\\t\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_e9a91c4bf7e3b8bd03437a87104b946b) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\"\t\r\n :\"#?\\n-\"\n\n\n\t\n}\n'
	const char* json = "{ \"\"\t\r\n :\"#?\\n-\"\n\n\n\t\n}\n";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\t\\r\\n :\\\"#?\\\\n-\\\"\\n\\n\\n\\t\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '#?\n-'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("#?\n-", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3179e4728de05ea33631e58f3b1dbaed) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\r \r \"\" \t:\n\ntrue\t}'
	const char* json = "{\r\r \r \"\" \t:\n\ntrue\t}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r \\r \\\"\\\" \\t:\\n\\ntrue\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7e99ab74353a2d39b272c14d2e6a31a3) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\t\"\\\\\"\r \r:{\n}\t\n\r}'
	const char* json = "{\r\t\"\\\\\"\r \r:{\n}\t\n\r}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"\\\\\\\\\\\"\\r \\r:{\\n}\\t\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_294717c69ccfb1ff6a3e98b8aea5e339) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\"A,?^\"\t\r\n:[]\t\t\t\n,\n\"H\": -0100\t\n}'
	const char* json = "\r{\"A,?^\"\t\r\n:[]\t\t\t\n,\n\"H\": -0100\t\n}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"A,?^\\\"\\t\\r\\n:[]\\t\\t\\t\\n,\\n\\\"H\\\": -0100\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_dcb879cc8d355e805b56c4cf2261cbc3) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {   \"\\t\"\n\r\n:\n\n false\t\n\n }'
	const char* json = " {   \"\\t\"\n\r\n:\n\n false\t\n\n }";
	std::cerr << "Plain JSON string from model: " << " {   \\\"\\\\t\\\"\\n\\r\\n:\\n\\n false\\t\\n\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a91f8fac85b7ace92ccd17c8e6bd03f7) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\"\"\t\t\r: \r[]\n\r \r}'
	const char* json = "{\r\"\"\t\t\r: \r[]\n\r \r}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\t\\t\\r: \\r[]\\n\\r \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_2db205d1ca802341c950abcdd558ddfa) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\n\r\t\"\\\"\\n\\n\\\"Z\"\t\n\t :\ntrue\t\r}'
	const char* json = "{\n\r\t\"\\\"\\n\\n\\\"Z\"\t\n\t :\ntrue\t\r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\t\\\"\\\\\\\"\\\\n\\\\n\\\\\\\"Z\\\"\\t\\n\\t :\\ntrue\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"\n\n\"Z' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\n\n\"Z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_44ca67ee0c6db27df862e457d5672842) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\t\n\n\"\" :001E-0\r}\r\t '
	const char* json = "\r{\t\n\n\"\" :001E-0\r}\r\t ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\n\\n\\\"\\\" :001E-0\\r}\\r\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_785b0137920be86c35f6843a41decb1a) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{ \"\"\r\t:\t\"p\"\r\n }'
	const char* json = "\n{ \"\"\r\t:\t\"p\"\r\n }";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\\"\\\"\\r\\t:\\t\\\"p\\\"\\r\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'p'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("p", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e538bc52bb157b29e98a5ec9c884d055) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' {\t \n  \"\\b\":\tnull\r}\n'
	const char* json = " {\t \n  \"\\b\":\tnull\r}\n";
	std::cerr << "Plain JSON string from model: " << " {\\t \\n  \\\"\\\\b\\\":\\tnull\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f8b5a2f9d909b26155fe35153d39c336) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\r\t{\"veI\"\t\r :\n\t0004 \t}\n\t'
	const char* json = "\n\r\t{\"veI\"\t\r :\n\t0004 \t}\n\t";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{\\\"veI\\\"\\t\\r :\\n\\t0004 \\t}\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_1e07f3d5b6565874afd2fb39133f9ad9) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\t\"\\rZ\\f5X\":\n\n\"\\bf\"}'
	const char* json = "{\t\n\t\"\\rZ\\f5X\":\n\n\"\\bf\"}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\t\\\"\\\\rZ\\\\f5X\\\":\\n\\n\\\"\\\\bf\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\rZ\f5X' = '\bf'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\rZ\f5X");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\bf", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2e20d924be388390ab8e4adc59baad91) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\r \"\":false\t}\r'
	const char* json = "\t{\r \"\":false\t}\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r \\\"\\\":false\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_90f483a2fa28298f80a113a266aaf5da) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' \t {\r\r\"\":\t\tnull }'
	const char* json = " \t {\r\r\"\":\t\tnull }";
	std::cerr << "Plain JSON string from model: " << " \\t {\\r\\r\\\"\\\":\\t\\tnull }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_beeae068c9401b5173c2d032dfff3139) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\"\"\r:\n{ \t},\n \r\"-6\\\\LJ\" \n: \r true \r,\n \t\"\\b\\\"\\r\\/\" \r\n:false\t}'
	const char* json = "{\t\"\"\r:\n{ \t},\n \r\"-6\\\\LJ\" \n: \r true \r,\n \t\"\\b\\\"\\r\\/\" \r\n:false\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\"\\r:\\n{ \\t},\\n \\r\\\"-6\\\\\\\\LJ\\\" \\n: \\r true \\r,\\n \\t\\\"\\\\b\\\\\\\"\\\\r\\\\/\\\" \\r\\n:false\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\"\r/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\"\r/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '-6\\LJ' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "-6\\LJ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6e9182ec2aa8296703217973317870a2) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\n \"X\":null\n }\t'
	const char* json = "{\n\n \"X\":null\n }\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n \\\"X\\\":null\\n }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'X' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "X");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_53dd3dcec5c8524d40ada0092f78e261) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\"\n\t:\tnull\n\n\t}\n'
	const char* json = "{ \"\"\n\t:\tnull\n\n\t}\n";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\n\\t:\\tnull\\n\\n\\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7c145de74e64e167d8e3d687366c64f1) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{ \r\"\"\n \r:{\r} ,\"\\b\"\r :false\n,\n\"\\f\\t\":false \r\t\t,\"\\f~\\f\\fW\":{}\r }'
	const char* json = "\r{ \r\"\"\n \r:{\r} ,\"\\b\"\r :false\n,\n\"\\f\\t\":false \r\t\t,\"\\f~\\f\\fW\":{}\r }";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\r\\\"\\\"\\n \\r:{\\r} ,\\\"\\\\b\\\"\\r :false\\n,\\n\\\"\\\\f\\\\t\\\":false \\r\\t\\t,\\\"\\\\f~\\\\f\\\\fW\\\":{}\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\f\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c31ef03cc28f3481274e4ecef3077055) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\"\n\t \n:\n\t null \t}\t'
	const char* json = "{\"\"\n\t \n:\n\t null \t}\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\n\\t \\n:\\n\\t null \\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ec3cafc7c40aafce800aa496312c1330) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \"\\\"\"\r\r \t:\rtrue\r\r\t\r \n,\n\"\\tA\"\r:\n\rfalse\r  \t}'
	const char* json = "{ \"\\\"\"\r\r \t:\rtrue\r\r\t\r \n,\n\"\\tA\"\r:\n\rfalse\r  \t}";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\\\\"\\\"\\r\\r \\t:\\rtrue\\r\\r\\t\\r \\n,\\n\\\"\\\\tA\\\"\\r:\\n\\rfalse\\r  \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\tA' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\tA");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\"' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ebb59b58514c55847c05641ff0a91a45) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {  \n\n\"\\\"T(\"\n\r\n:\rnull \t} \n\n'
	const char* json = " {  \n\n\"\\\"T(\"\n\r\n:\rnull \t} \n\n";
	std::cerr << "Plain JSON string from model: " << " {  \\n\\n\\\"\\\\\\\"T(\\\"\\n\\r\\n:\\rnull \\t} \\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"T(' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"T(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3b496cbf107adae40ea82e1aef1e7f48) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\"\":\"(\"\r , \n \r \n\"`\\\"\"\t :null\n}\r'
	const char* json = "{\r\"\":\"(\"\r , \n \r \n\"`\\\"\"\t :null\n}\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\":\\\"(\\\"\\r , \\n \\r \\n\\\"`\\\\\\\"\\\"\\t :null\\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '('
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("(", cJSON_string(child));
	}
	{
		// '`\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "`\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d9e672cf547de41af4414b3c2f56fb04) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t\"\"  \r:\tnull\r }'
	const char* json = "{\t\"\"  \r:\tnull\r }";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\"  \\r:\\tnull\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4c2f7f290c7d9dc9ca1934565c5eccc2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\r\t{\r\n\"i\\\\\"  :\t[\rnull\t\t ,\ttrue]\t\n } \t'
	const char* json = "\n\r\t{\r\n\"i\\\\\"  :\t[\rnull\t\t ,\ttrue]\t\n } \t";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{\\r\\n\\\"i\\\\\\\\\\\"  :\\t[\\rnull\\t\\t ,\\ttrue]\\t\\n } \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'i\\':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "i\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'i\\':1 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "i\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2e57f93724ccb418a1477531f2aaa68b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\"Kvk\"\n:true\n\n}\n\t'
	const char* json = "\r{\"Kvk\"\n:true\n\n}\n\t";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"Kvk\\\"\\n:true\\n\\n}\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Kvk' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Kvk");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2053e4c795a321ba06fb6b968376dd56) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' { \"\"\r:\ntrue\t}\n'
	const char* json = " { \"\"\r:\ntrue\t}\n";
	std::cerr << "Plain JSON string from model: " << " { \\\"\\\"\\r:\\ntrue\\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1e539b39bd48f93aab82061593334ac4) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \"\"\t\t\n:false  ,\t \r\t\"\\\\\\/\\t@\\b\"\t\n:false\r\n\t}\t \t'
	const char* json = "{ \"\"\t\t\n:false  ,\t \r\t\"\\\\\\/\\t@\\b\"\t\n:false\r\n\t}\t \t";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\t\\t\\n:false  ,\\t \\r\\t\\\"\\\\\\\\\\\\/\\\\t@\\\\b\\\"\\t\\n:false\\r\\n\\t}\\t \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\/\t@\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\/\t@\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cca0ffde0b3822f6d6556c0a59f13fc1) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{ \n\"s\"\r\n\n:\"\"\r\t,\t\"\\\"\\t\":null}\n'
	const char* json = "\r{ \n\"s\"\r\n\n:\"\"\r\t,\t\"\\\"\\t\":null}\n";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\n\\\"s\\\"\\r\\n\\n:\\\"\\\"\\r\\t,\\t\\\"\\\\\\\"\\\\t\\\":null}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 's' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "s");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\"\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0483738c8cad3d10bdc899254d52f279) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\r\t\"\" \t:\r\t[\r]\n \t\t\t}'
	const char* json = "\r{\r\t\"\" \t:\r\t[\r]\n \t\t\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\t\\\"\\\" \\t:\\r\\t[\\r]\\n \\t\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_f71b8e7b6d7db32e9ccd06334b23d07f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\"\" :null\r \t }\t'
	const char* json = "\n{\"\" :null\r \t }\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\" :null\\r \\t }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8420d344609bc37975221aa69cc6e3b9) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\n\r\r\n\"\\/=N\"\r\n\n:\r\"[\"\r\r}\t'
	const char* json = "\n{\n\r\r\n\"\\/=N\"\r\n\n:\r\"[\"\r\r}\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\r\\r\\n\\\"\\\\/=N\\\"\\r\\n\\n:\\r\\\"[\\\"\\r\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/=N' = '['
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/=N");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("[", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a25fae651e5fe72a5c1d80a60ba8d373) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{ \r\"})\\\\$\":\rfalse}'
	const char* json = "\t{ \r\"})\\\\$\":\rfalse}";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\r\\\"})\\\\\\\\$\\\":\\rfalse}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '})\\$' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "})\\$");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3cafa67b6c91c5a0419540f27f5e8f86) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\r\"\\\"\"\r\t\t :{\"\\bN\\n\"\t:true \n, \t\"\\t\"  :\n\n null \r \r,\t\r\"\"\n :{}\t\t\t ,\"\\/\"\t\t:[ false ,false]\t\n\t\n}\t }'
	const char* json = "{\t\r\"\\\"\"\r\t\t :{\"\\bN\\n\"\t:true \n, \t\"\\t\"  :\n\n null \r \r,\t\r\"\"\n :{}\t\t\t ,\"\\/\"\t\t:[ false ,false]\t\n\t\n}\t }";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"\\\\\\\"\\\"\\r\\t\\t :{\\\"\\\\bN\\\\n\\\"\\t:true \\n, \\t\\\"\\\\t\\\"  :\\n\\n null \\r \\r,\\t\\r\\\"\\\"\\n :{}\\t\\t\\t ,\\\"\\\\/\\\"\\t\\t:[ false ,false]\\t\\n\\t\\n}\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"':'\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\"':'\bN\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bN\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\"':'/':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\"':'/':1 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7fc49c69ba4b5539e46392296a75365b) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\t \n\t\r\"\"\t:\ntrue\t,\n \n \t \r\t\"@\" :\n\r{\t\n\n\n\t\"c\"\r:\ntrue\r\n\t\r\n }\t\t\t}'
	const char* json = " {\t \n\t\r\"\"\t:\ntrue\t,\n \n \t \r\t\"@\" :\n\r{\t\n\n\n\t\"c\"\r:\ntrue\r\n\t\r\n }\t\t\t}";
	std::cerr << "Plain JSON string from model: " << " {\\t \\n\\t\\r\\\"\\\"\\t:\\ntrue\\t,\\n \\n \\t \\r\\t\\\"@\\\" :\\n\\r{\\t\\n\\n\\n\\t\\\"c\\\"\\r:\\ntrue\\r\\n\\t\\r\\n }\\t\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '@':'c' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "@");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "c");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_84112d5ada954b6e53f93ab7a4dd7023) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\r\t  \r \"e\"\r \r:\r\rfalse, \n\n\t\t\"\\b\\b\\f\"\r:\r\tfalse\t\t\r\n}'
	const char* json = "\n{\r\t  \r \"e\"\r \r:\r\rfalse, \n\n\t\t\"\\b\\b\\f\"\r:\r\tfalse\t\t\r\n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\t  \\r \\\"e\\\"\\r \\r:\\r\\rfalse, \\n\\n\\t\\t\\\"\\\\b\\\\b\\\\f\\\"\\r:\\r\\tfalse\\t\\t\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'e' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "e");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\b\b\f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\b\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_96e41c4413b7d9174c3884bd61297ecb) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\"\t\r:true}\r'
	const char* json = "{\"\"\t\r:true}\r";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\t\\r:true}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c1ffe8acf8791ac88e15c248d1e469bf) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{\n\n \"\\t\\\\m\"  :null\r\n \r\r,\"%\\nw\" : {}\r\n\r\t}'
	const char* json = "\t{\n\n \"\\t\\\\m\"  :null\r\n \r\r,\"%\\nw\" : {}\r\n\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\n \\\"\\\\t\\\\\\\\m\\\"  :null\\r\\n \\r\\r,\\\"%\\\\nw\\\" : {}\\r\\n\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t\\m' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\\m");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_edd8424d6cf05e00758ca7da13a85d0c) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Zero
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Digit
	// Zero
	// Zero
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' {\r\"\\r\\f\"\t:{\n\"\\t\\b9\\/\\t2,\\b\"\n: \n-000704120e+0000510\r\t\n ,\"+\\rP\" \t\t \n: null ,\t\r \"\"\n:\n\t\")\\\"\\bnlC\\tz\\/4\\t\"\r}\r,\"_\"\r:\r\t\r055001 } '
	const char* json = " {\r\"\\r\\f\"\t:{\n\"\\t\\b9\\/\\t2,\\b\"\n: \n-000704120e+0000510\r\t\n ,\"+\\rP\" \t\t \n: null ,\t\r \"\"\n:\n\t\")\\\"\\bnlC\\tz\\/4\\t\"\r}\r,\"_\"\r:\r\t\r055001 } ";
	std::cerr << "Plain JSON string from model: " << " {\\r\\\"\\\\r\\\\f\\\"\\t:{\\n\\\"\\\\t\\\\b9\\\\/\\\\t2,\\\\b\\\"\\n: \\n-000704120e+0000510\\r\\t\\n ,\\\"+\\\\rP\\\" \\t\\t \\n: null ,\\t\\r \\\"\\\"\\n:\\n\\t\\\")\\\\\\\"\\\\bnlC\\\\tz\\\\/4\\\\t\\\"\\r}\\r,\\\"_\\\"\\r:\\r\\t\\r055001 } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_a4167f03d8287b0cecc247255f24de3c) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\t\r\r \"\\br\" \t:\nnull\n\r\n }\t\n'
	const char* json = " {\t\r\r \"\\br\" \t:\nnull\n\r\n }\t\n";
	std::cerr << "Plain JSON string from model: " << " {\\t\\r\\r \\\"\\\\br\\\" \\t:\\nnull\\n\\r\\n }\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\br' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\br");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bab73bd134567f88e50a6a5564d638e6) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\n\t\"\":null,\t\"\\r\\/P\":{\n\"\\\"\\b\\t\" :\nfalse \r\t,\n\n\t\r\"C+\"\r:\t-0840.0e-07090807200365\t\n,\n\n\"\\/\" \t \r:true\r  } \t\t}\t\t'
	const char* json = " {\n\t\"\":null,\t\"\\r\\/P\":{\n\"\\\"\\b\\t\" :\nfalse \r\t,\n\n\t\r\"C+\"\r:\t-0840.0e-07090807200365\t\n,\n\n\"\\/\" \t \r:true\r  } \t\t}\t\t";
	std::cerr << "Plain JSON string from model: " << " {\\n\\t\\\"\\\":null,\\t\\\"\\\\r\\\\/P\\\":{\\n\\\"\\\\\\\"\\\\b\\\\t\\\" :\\nfalse \\r\\t,\\n\\n\\t\\r\\\"C+\\\"\\r:\\t-0840.0e-07090807200365\\t\\n,\\n\\n\\\"\\\\/\\\" \\t \\r:true\\r  } \\t\\t}\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_7aaaada5aabf4953e5dc8f16d436da8c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{   \"n\\\"a\\n[\\\\'\\n\\f0<\"\r\n\r:\t true\n\t\n\r\n}'
	const char* json = "{   \"n\\\"a\\n[\\\\'\\n\\f0<\"\r\n\r:\t true\n\t\n\r\n}";
	std::cerr << "Plain JSON string from model: " << "{   \\\"n\\\\\\\"a\\\\n[\\\\\\\\'\\\\n\\\\f0<\\\"\\r\\n\\r:\\t true\\n\\t\\n\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'n\"a\n[\\'\n\f0<' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "n\"a\n[\\'\n\f0<");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_397960e2b67fe412446fb9a5e51c7684) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\r \r\r\"\"\n:\"i[\"}'
	const char* json = "{\r\r \r\r\"\"\n:\"i[\"}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r \\r\\r\\\"\\\"\\n:\\\"i[\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'i['
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("i[", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_477b7e3d6b19578364fda3a6807fe6a0) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \t \"<\\f\":\t\t\"\" ,\r \n\t\"\\/\"\n:\n\r\n{\t\r\"\\f\" \t :\"u\",\"\\\"j9\\tt\" \t\n:\r false\t \t\r,  \n\"\\tD\": \r\"&YE\\r\\\"\\\"\" \r\t\t\n}\r\n\t\r\n}\t'
	const char* json = "{ \t \"<\\f\":\t\t\"\" ,\r \n\t\"\\/\"\n:\n\r\n{\t\r\"\\f\" \t :\"u\",\"\\\"j9\\tt\" \t\n:\r false\t \t\r,  \n\"\\tD\": \r\"&YE\\r\\\"\\\"\" \r\t\t\n}\r\n\t\r\n}\t";
	std::cerr << "Plain JSON string from model: " << "{ \\t \\\"<\\\\f\\\":\\t\\t\\\"\\\" ,\\r \\n\\t\\\"\\\\/\\\"\\n:\\n\\r\\n{\\t\\r\\\"\\\\f\\\" \\t :\\\"u\\\",\\\"\\\\\\\"j9\\\\tt\\\" \\t\\n:\\r false\\t \\t\\r,  \\n\\\"\\\\tD\\\": \\r\\\"&YE\\\\r\\\\\\\"\\\\\\\"\\\" \\r\\t\\t\\n}\\r\\n\\t\\r\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '<\f' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '/':'\"j9\tt' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"j9\tt");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/':'\f' = 'u'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("u", cJSON_string(child));
	}
	{
		// '/':'\tD' = '&YE\r\"\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\tD");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("&YE\r\"\"", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c7f91d8d6f1e39c9654efb5169ae93b2) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\"H\"\t\r:true \r}'
	const char* json = "{\"H\"\t\r:true \r}";
	std::cerr << "Plain JSON string from model: " << "{\\\"H\\\"\\t\\r:true \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'H' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "H");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_354f0f4f6fdf488e70e8e3151fc1e00f) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\t\t\"\\/\\\"\\\"#X#\\\\\\b\\f\\t\\/\\/\\b\":\r\"V\\f\"\n}   '
	const char* json = "{\n\t\t\"\\/\\\"\\\"#X#\\\\\\b\\f\\t\\/\\/\\b\":\r\"V\\f\"\n}   ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\t\\\"\\\\/\\\\\\\"\\\\\\\"#X#\\\\\\\\\\\\b\\\\f\\\\t\\\\/\\\\/\\\\b\\\":\\r\\\"V\\\\f\\\"\\n}   " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\"\"#X#\\\b\f\t//\b' = 'V\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\"\"#X#\\\b\f\t//\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("V\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_680842d36c79a63222618528fbb6082c) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\r\r\"f\"\n :false\r\t, \n\"\" \n :\r -02\n\n\t, \"\\n\"\t\t\t\n: null\t\n\r, \r\t \t  \"\\\"u\"\r\r:\nfalse\n\r}\t'
	const char* json = "{\t\r\r\"f\"\n :false\r\t, \n\"\" \n :\r -02\n\n\t, \"\\n\"\t\t\t\n: null\t\n\r, \r\t \t  \"\\\"u\"\r\r:\nfalse\n\r}\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\r\\\"f\\\"\\n :false\\r\\t, \\n\\\"\\\" \\n :\\r -02\\n\\n\\t, \\\"\\\\n\\\"\\t\\t\\t\\n: null\\t\\n\\r, \\r\\t \\t  \\\"\\\\\\\"u\\\"\\r\\r:\\nfalse\\n\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_eed4b030d04743d60eb13d1503da9472) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\n \"\\ny\\f\"\t  \n\t:true\t\t\t,\t \r\n\"w\"  :\"=VAV\",\"<R\\/4\"\t:\r\r\r\"I\\/\\/N\\r\\f\\b\"\t \t,\t  \"\":\r\r false\r\r }'
	const char* json = "{\n \"\\ny\\f\"\t  \n\t:true\t\t\t,\t \r\n\"w\"  :\"=VAV\",\"<R\\/4\"\t:\r\r\r\"I\\/\\/N\\r\\f\\b\"\t \t,\t  \"\":\r\r false\r\r }";
	std::cerr << "Plain JSON string from model: " << "{\\n \\\"\\\\ny\\\\f\\\"\\t  \\n\\t:true\\t\\t\\t,\\t \\r\\n\\\"w\\\"  :\\\"=VAV\\\",\\\"<R\\\\/4\\\"\\t:\\r\\r\\r\\\"I\\\\/\\\\/N\\\\r\\\\f\\\\b\\\"\\t \\t,\\t  \\\"\\\":\\r\\r false\\r\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\ny\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\ny\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'w' = '=VAV'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "w");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("=VAV", cJSON_string(child));
	}
	{
		// '<R/4' = 'I//N\r\f\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<R/4");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("I//N\r\f\b", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_182d3439eeee753a77ca5ef3f17ec554) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\n{\r\"\"\r \t:\"\\b\"\n\n\n}'
	const char* json = "\n\n{\r\"\"\r \t:\"\\b\"\n\n\n}";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{\\r\\\"\\\"\\r \\t:\\\"\\\\b\\\"\\n\\n\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\b", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_554be23352d71bf7d3cd3c9fcb4b8595) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\t \t\"\\\"\"\t \r\t\t:null}\r'
	const char* json = "\n{\t \t\"\\\"\"\t \r\t\t:null}\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t \\t\\\"\\\\\\\"\\\"\\t \\r\\t\\t:null}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b3a2e3c44bc400601332ec1ed9281178) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\"\":true \n\t,\r\n\"KX\"\t: \n-0E+05 ,\r\t\n\t\"\\n\"\t\n \r: \r\n{  \t\t \n\r\r\t\"\\f\":{} }\n}'
	const char* json = "{\n\"\":true \n\t,\r\n\"KX\"\t: \n-0E+05 ,\r\t\n\t\"\\n\"\t\n \r: \r\n{  \t\t \n\r\r\t\"\\f\":{} }\n}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\":true \\n\\t,\\r\\n\\\"KX\\\"\\t: \\n-0E+05 ,\\r\\t\\n\\t\\\"\\\\n\\\"\\t\\n \\r: \\r\\n{  \\t\\t \\n\\r\\r\\t\\\"\\\\f\\\":{} }\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'KX' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "KX");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0128896a53c684ac2f09062a399f0c4b) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n \r{ \r\r\";\"\r\r:\n\n\nnull \n}\n\n'
	const char* json = "\n \r{ \r\r\";\"\r\r:\n\n\nnull \n}\n\n";
	std::cerr << "Plain JSON string from model: " << "\\n \\r{ \\r\\r\\\";\\\"\\r\\r:\\n\\n\\nnull \\n}\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ';' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ";");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_823e579bc1f5afbc000d0bd7784bacef) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \n\"L\\/V\\tA\\b\\r\": \nfalse\n,\t\t\"\\\\\\\"\\\\\":\t\n\"\"\n\n\t\r ,\n\n\"\\n\":true}\n'
	const char* json = "{ \n\"L\\/V\\tA\\b\\r\": \nfalse\n,\t\t\"\\\\\\\"\\\\\":\t\n\"\"\n\n\t\r ,\n\n\"\\n\":true}\n";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"L\\\\/V\\\\tA\\\\b\\\\r\\\": \\nfalse\\n,\\t\\t\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\":\\t\\n\\\"\\\"\\n\\n\\t\\r ,\\n\\n\\\"\\\\n\\\":true}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\\\"\\' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\"\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// 'L/V\tA\b\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "L/V\tA\b\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4be0d578f058d3698f9343342181aa4c) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n  \t\"\"\t:\"\\nw\"\n\r}'
	const char* json = "{\t\n  \t\"\"\t:\"\\nw\"\n\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n  \\t\\\"\\\"\\t:\\\"\\\\nw\\\"\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\nw'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\nw", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_354dfd99e6c9de004ca1f86e098de557) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Zero
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Zero
	// Digit
	// Zero
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\t\t\n\"\\b\\\"l6\" :\rtrue \r\t,\r\n \"a\":\n02090.09000788\t\t\r,\r\"P\\\\\\n\"\n:\r00E00100\r}\t'
	const char* json = "\n{\t\t\n\"\\b\\\"l6\" :\rtrue \r\t,\r\n \"a\":\n02090.09000788\t\t\r,\r\"P\\\\\\n\"\n:\r00E00100\r}\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\t\\n\\\"\\\\b\\\\\\\"l6\\\" :\\rtrue \\r\\t,\\r\\n \\\"a\\\":\\n02090.09000788\\t\\t\\r,\\r\\\"P\\\\\\\\\\\\n\\\"\\n:\\r00E00100\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_5a894b81b4d595efaba848fb7b833064) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\t\t\t\r\"\\ta\"\n\t\r:{ \n\n\"~\" \r\r:\t\n-00.003e+08\r\n\r\t}}'
	const char* json = "\r{\t\t\t\r\"\\ta\"\n\t\r:{ \n\n\"~\" \r\r:\t\n-00.003e+08\r\n\r\t}}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\t\\t\\r\\\"\\\\ta\\\"\\n\\t\\r:{ \\n\\n\\\"~\\\" \\r\\r:\\t\\n-00.003e+08\\r\\n\\r\\t}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_70e3d831775181777c4e9544bba14233) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\r{\t\t\"c2\":\nnull \r\n, \t\"\\t\\rt\"\r: \r{\r}\n}'
	const char* json = "\n\r{\t\t\"c2\":\nnull \r\n, \t\"\\t\\rt\"\r: \r{\r}\n}";
	std::cerr << "Plain JSON string from model: " << "\\n\\r{\\t\\t\\\"c2\\\":\\nnull \\r\\n, \\t\\\"\\\\t\\\\rt\\\"\\r: \\r{\\r}\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'c2' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "c2");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1ce1632315408f80dfca5d0213b93526) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\n\"\"\t :\n\r\rfalse\r , \t\n\"\\\\I`\"\n \n: \"\\t0\\\\\\b\" \t\t\t\t} \n\n'
	const char* json = "{\t\n\"\"\t :\n\r\rfalse\r , \t\n\"\\\\I`\"\n \n: \"\\t0\\\\\\b\" \t\t\t\t} \n\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"\\\"\\t :\\n\\r\\rfalse\\r , \\t\\n\\\"\\\\\\\\I`\\\"\\n \\n: \\\"\\\\t0\\\\\\\\\\\\b\\\" \\t\\t\\t\\t} \\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\I`' = '\t0\\\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\I`");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t0\\\b", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3e704c8ba8190d3716465c9e96a9886f) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\r\r \n\"\"\r\n \r\n:\"S\"\r\r\r\n,\n \r\n\n\r\"3\" :\"H\"\r\r\r\r \r}'
	const char* json = "\r{\r\r \n\"\"\r\n \r\n:\"S\"\r\r\r\n,\n \r\n\n\r\"3\" :\"H\"\r\r\r\r \r}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\r \\n\\\"\\\"\\r\\n \\r\\n:\\\"S\\\"\\r\\r\\r\\n,\\n \\r\\n\\n\\r\\\"3\\\" :\\\"H\\\"\\r\\r\\r\\r \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'S'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("S", cJSON_string(child));
	}
	{
		// '3' = 'H'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "3");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("H", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8fdd76daea2cdf3471d14f9d5e6a1a67) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n{\n \n\"\"\r\r:false\t\r}'
	const char* json = "\n{\n \n\"\"\r\r:false\t\r}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n \\n\\\"\\\"\\r\\r:false\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1b229e059e4eb5846e66668393c88e92) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Digit
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\t{\"\\b\\r\\/ \\/\":\t[\n\r [\t{ \"j\\\"\" \t: \t\t \"1\\\\\\rZ\\\"\"\r}\t \t \n]]\n,\"\"\n\t\n:[]\r\r,\t\r\"\\\\\"\t \r :\n-08.07E+02010 ,  \n\r\"\\n]\\\"\\f;\" :\t-0007238E02 \t\n\n \n}\r'
	const char* json = "\t\t{\"\\b\\r\\/ \\/\":\t[\n\r [\t{ \"j\\\"\" \t: \t\t \"1\\\\\\rZ\\\"\"\r}\t \t \n]]\n,\"\"\n\t\n:[]\r\r,\t\r\"\\\\\"\t \r :\n-08.07E+02010 ,  \n\r\"\\n]\\\"\\f;\" :\t-0007238E02 \t\n\n \n}\r";
	std::cerr << "Plain JSON string from model: " << "\\t\\t{\\\"\\\\b\\\\r\\\\/ \\\\/\\\":\\t[\\n\\r [\\t{ \\\"j\\\\\\\"\\\" \\t: \\t\\t \\\"1\\\\\\\\\\\\rZ\\\\\\\"\\\"\\r}\\t \\t \\n]]\\n,\\\"\\\"\\n\\t\\n:[]\\r\\r,\\t\\r\\\"\\\\\\\\\\\"\\t \\r :\\n-08.07E+02010 ,  \\n\\r\\\"\\\\n]\\\\\\\"\\\\f;\\\" :\\t-0007238E02 \\t\\n\\n \\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_cad8031b8f499b016078a76657ee4679) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n \"\\/\"\n\t \n\n:null\r\r\r,\"\\/\\rH\\f\"\n: {\n\r\r\t\"\\\\\"\t\r\n:{\t\"_\" \r\r:\rfalse\n\t}  \r\n}\n\t\r}\n'
	const char* json = "{\n \"\\/\"\n\t \n\n:null\r\r\r,\"\\/\\rH\\f\"\n: {\n\r\r\t\"\\\\\"\t\r\n:{\t\"_\" \r\r:\rfalse\n\t}  \r\n}\n\t\r}\n";
	std::cerr << "Plain JSON string from model: " << "{\\n \\\"\\\\/\\\"\\n\\t \\n\\n:null\\r\\r\\r,\\\"\\\\/\\\\rH\\\\f\\\"\\n: {\\n\\r\\r\\t\\\"\\\\\\\\\\\"\\t\\r\\n:{\\t\\\"_\\\" \\r\\r:\\rfalse\\n\\t}  \\r\\n}\\n\\t\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\rH\f':'\\':'_' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\rH\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "_");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1f9106071342ac90db1910025efa7de5) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\r\r\"\"\t\r\r\n\n:{\t}\n\r,\r\r\n\"\\b\"\n\n\t\r:\"\\t\" \n\t\n} '
	const char* json = "{\r\r\r\"\"\t\r\r\n\n:{\t}\n\r,\r\r\n\"\\b\"\n\n\t\r:\"\\t\" \n\t\n} ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\r\\\"\\\"\\t\\r\\r\\n\\n:{\\t}\\n\\r,\\r\\r\\n\\\"\\\\b\\\"\\n\\n\\t\\r:\\\"\\\\t\\\" \\n\\t\\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = '\t'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4f92b6d2c9d43a846b0fe7ea7b2a0dfa) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t\t{\r \n\"\\\\\\t\" \r:[\r]\t,\r\n\n\n\"\":\"\\b\\\\k\\t4\\r\\t\\/\"\n, \"\\f.Z,\"\t\n :false  \r, \n\t\"<\\tY\": null\n}'
	const char* json = " \t\t{\r \n\"\\\\\\t\" \r:[\r]\t,\r\n\n\n\"\":\"\\b\\\\k\\t4\\r\\t\\/\"\n, \"\\f.Z,\"\t\n :false  \r, \n\t\"<\\tY\": null\n}";
	std::cerr << "Plain JSON string from model: " << " \\t\\t{\\r \\n\\\"\\\\\\\\\\\\t\\\" \\r:[\\r]\\t,\\r\\n\\n\\n\\\"\\\":\\\"\\\\b\\\\\\\\k\\\\t4\\\\r\\\\t\\\\/\\\"\\n, \\\"\\\\f.Z,\\\"\\t\\n :false  \\r, \\n\\t\\\"<\\\\tY\\\": null\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\b\\k\t4\r\t/'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\b\\k\t4\r\t/", cJSON_string(child));
	}
	{
		// '\f.Z,' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f.Z,");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '<\tY' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<\tY");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_38d6bbc3a152aa9b8af12bc8c6804aa6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// Zero
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\"\\/\\/\" \r:\t\n\t{\"\\n\\/Fl\\t\\r\"\t:\"\\/\\rd\\r\"\t\t,\r\n\t\r\n\n\"Lc\"\n\n\n:true\t}  ,\n \"j#\"\t \t\t:true\t \r ,\t\t\"{V>\\r\\\"\"\t:\r  \"\"\t,  \t \"\\b\" \r\n:false\t\t ,\t\t\t\t\r \"2\"\t: false\r\r\n ,\r \"\\\\\":-0800.0\t\r\t\r}'
	const char* json = "{\t\n\"\\/\\/\" \r:\t\n\t{\"\\n\\/Fl\\t\\r\"\t:\"\\/\\rd\\r\"\t\t,\r\n\t\r\n\n\"Lc\"\n\n\n:true\t}  ,\n \"j#\"\t \t\t:true\t \r ,\t\t\"{V>\\r\\\"\"\t:\r  \"\"\t,  \t \"\\b\" \r\n:false\t\t ,\t\t\t\t\r \"2\"\t: false\r\r\n ,\r \"\\\\\":-0800.0\t\r\t\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"\\\\/\\\\/\\\" \\r:\\t\\n\\t{\\\"\\\\n\\\\/Fl\\\\t\\\\r\\\"\\t:\\\"\\\\/\\\\rd\\\\r\\\"\\t\\t,\\r\\n\\t\\r\\n\\n\\\"Lc\\\"\\n\\n\\n:true\\t}  ,\\n \\\"j#\\\"\\t \\t\\t:true\\t \\r ,\\t\\t\\\"{V>\\\\r\\\\\\\"\\\"\\t:\\r  \\\"\\\"\\t,  \\t \\\"\\\\b\\\" \\r\\n:false\\t\\t ,\\t\\t\\t\\t\\r \\\"2\\\"\\t: false\\r\\r\\n ,\\r \\\"\\\\\\\\\\\":-0800.0\\t\\r\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b366500c210831bbb190a17ca9f17ffa) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\n\r{\t \"\":-08.001e03\t\n }'
	const char* json = "\r\n\r{\t \"\":-08.001e03\t\n }";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\r{\\t \\\"\\\":-08.001e03\\t\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_c4732580e3a5e5cf9309fee71164841c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n\n {\n\"\\\"\\fkvaZ\\\"\"\n:\r\r\ttrue\n\t} '
	const char* json = "\n\n {\n\"\\\"\\fkvaZ\\\"\"\n:\r\r\ttrue\n\t} ";
	std::cerr << "Plain JSON string from model: " << "\\n\\n {\\n\\\"\\\\\\\"\\\\fkvaZ\\\\\\\"\\\"\\n:\\r\\r\\ttrue\\n\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"\fkvaZ\"' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\fkvaZ\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_639837dc3c1492d9a471fe86614b913d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\t\r\t \"\"\t:\ntrue,\t\n\n\"\\t\\\"\\/\\b\"  :true}\r'
	const char* json = "\r{\t\r\t \"\"\t:\ntrue,\t\n\n\"\\t\\\"\\/\\b\"  :true}\r";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\r\\t \\\"\\\"\\t:\\ntrue,\\t\\n\\n\\\"\\\\t\\\\\\\"\\\\/\\\\b\\\"  :true}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\t\"/\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\"/\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4425663277c649a0f4fdc9f60e38dfaa) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// Zero
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\n\t{\t\t \"\\t\"\t:[\n\r\n\r[ false\t\t\n],\t00000,\n   null]\n\t, \r\n\"\\/nH\"\t\t:004E0\n\r\n}\n\r'
	const char* json = "\r\n\t{\t\t \"\\t\"\t:[\n\r\n\r[ false\t\t\n],\t00000,\n   null]\n\t, \r\n\"\\/nH\"\t\t:004E0\n\r\n}\n\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\t{\\t\\t \\\"\\\\t\\\"\\t:[\\n\\r\\n\\r[ false\\t\\t\\n],\\t00000,\\n   null]\\n\\t, \\r\\n\\\"\\\\/nH\\\"\\t\\t:004E0\\n\\r\\n}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b4c25aab6fd23ad56d163a1b4d14e95f) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\n\r \"(j4\\r\\b\":\t\rnull\r}'
	const char* json = "\r{\n\r \"(j4\\r\\b\":\t\rnull\r}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\r \\\"(j4\\\\r\\\\b\\\":\\t\\rnull\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '(j4\r\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(j4\r\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9a03d52288898acc451fb8f59eeac7a8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\"\\f\\b[\"\n\n\t:[\n{\r \n\r\"u\"\r\t: true}\n\r\n,\n\"\\f\"\t\r\n,\r-000.010e0\r\n\t]\n\r \t\r\r\n,\t\t\"\" :false\n,\n\n\"H\\fj\\\"\"\n \n\t\r:\tnull,\t\t\"]\\\\\\b\"\r:{}\r\t \t\t}'
	const char* json = "\t{\"\\f\\b[\"\n\n\t:[\n{\r \n\r\"u\"\r\t: true}\n\r\n,\n\"\\f\"\t\r\n,\r-000.010e0\r\n\t]\n\r \t\r\r\n,\t\t\"\" :false\n,\n\n\"H\\fj\\\"\"\n \n\t\r:\tnull,\t\t\"]\\\\\\b\"\r:{}\r\t \t\t}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\\"\\\\f\\\\b[\\\"\\n\\n\\t:[\\n{\\r \\n\\r\\\"u\\\"\\r\\t: true}\\n\\r\\n,\\n\\\"\\\\f\\\"\\t\\r\\n,\\r-000.010e0\\r\\n\\t]\\n\\r \\t\\r\\r\\n,\\t\\t\\\"\\\" :false\\n,\\n\\n\\\"H\\\\fj\\\\\\\"\\\"\\n \\n\\t\\r:\\tnull,\\t\\t\\\"]\\\\\\\\\\\\b\\\"\\r:{}\\r\\t \\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_b2538c6dc097ad5b266fd81b710c2ed8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\r\"\\n\":\n\rnull   }\t\t'
	const char* json = "\r{\r\"\\n\":\n\rnull   }\t\t";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\\"\\\\n\\\":\\n\\rnull   }\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c9b3f09bc3532ee2e4f6f7e529ffdc51) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n \"l\\\\\": 00}'
	const char* json = "{\t\n \"l\\\\\": 00}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n \\\"l\\\\\\\\\\\": 00}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_d7224d90eb458254230815a57e20f60a) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\"\"\n\n:\"\\r\\/\\nz\"\n\r\t}\r'
	const char* json = "{\n\"\"\n\n:\"\\r\\/\\nz\"\n\r\t}\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\"\\n\\n:\\\"\\\\r\\\\/\\\\nz\\\"\\n\\r\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\r/\nz'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r/\nz", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_185cd3aaa5b092c23941c2b962c15187) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\r\n \"b+\":\t\r{},\n\r\"\" \t\n\r\r:[ \r]\r\n  ,\r\"\\t,\\\\\" \r \n:{\t\n\"\\f\\n\\b<\\t\\\\\\t\\\"\":null}\r \t,\"\\f2\":\n\r[\n]\r\n}{\n\"1\\r\"  \n: \r-30.0e-0\n\n,\t\n\"\\n\" \r\r\n:\n[]\t\t\n ,\n\r \"\\\"\"  :\"3\\r\\r\\boQ\\/RN\"\r }\t'
	const char* json = "\n{\r\n \"b+\":\t\r{},\n\r\"\" \t\n\r\r:[ \r]\r\n  ,\r\"\\t,\\\\\" \r \n:{\t\n\"\\f\\n\\b<\\t\\\\\\t\\\"\":null}\r \t,\"\\f2\":\n\r[\n]\r\n}{\n\"1\\r\"  \n: \r-30.0e-0\n\n,\t\n\"\\n\" \r\r\n:\n[]\t\t\n ,\n\r \"\\\"\"  :\"3\\r\\r\\boQ\\/RN\"\r }\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\n \\\"b+\\\":\\t\\r{},\\n\\r\\\"\\\" \\t\\n\\r\\r:[ \\r]\\r\\n  ,\\r\\\"\\\\t,\\\\\\\\\\\" \\r \\n:{\\t\\n\\\"\\\\f\\\\n\\\\b<\\\\t\\\\\\\\\\\\t\\\\\\\"\\\":null}\\r \\t,\\\"\\\\f2\\\":\\n\\r[\\n]\\r\\n}{\\n\\\"1\\\\r\\\"  \\n: \\r-30.0e-0\\n\\n,\\t\\n\\\"\\\\n\\\" \\r\\r\\n:\\n[]\\t\\t\\n ,\\n\\r \\\"\\\\\\\"\\\"  :\\\"3\\\\r\\\\r\\\\boQ\\\\/RN\\\"\\r }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_ed99f162896d7b283008ae088d4e0c9b) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// JSON: '{\t\"|\" :\nnull \t\t,  \t\n\r\r\"\"\r:\r\r \tfalse\n}{\r\t\t\n\r\"\\f[\"\t\r \n:\n {\r\t\n\t\t\t\"Y\"\r\r\n\t :[]\n\t\n}\r\t,\r\n\r\t\r\n\"\\/\"\r\n:false  \r,\"\\b\"\n\n:\"\\f\",\t \"*\" \t\n :\t\t\ntrue\n\t\n,\t\t \r\"\\tl\" \t  :\n\n {}\t}{\n\n\t\t\n\"g\":\t[]\r,\t\r  \"\\t\\/\"   :4}{\r\n\t\"\\f\\b\\nQl'
	const char* json = "{\t\"|\" :\nnull \t\t,  \t\n\r\r\"\"\r:\r\r \tfalse\n}{\r\t\t\n\r\"\\f[\"\t\r \n:\n {\r\t\n\t\t\t\"Y\"\r\r\n\t :[]\n\t\n}\r\t,\r\n\r\t\r\n\"\\/\"\r\n:false  \r,\"\\b\"\n\n:\"\\f\",\t \"*\" \t\n :\t\t\ntrue\n\t\n,\t\t \r\"\\tl\" \t  :\n\n {}\t}{\n\n\t\t\n\"g\":\t[]\r,\t\r  \"\\t\\/\"   :4}{\r\n\t\"\\f\\b\\nQl";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"|\\\" :\\nnull \\t\\t,  \\t\\n\\r\\r\\\"\\\"\\r:\\r\\r \\tfalse\\n}{\\r\\t\\t\\n\\r\\\"\\\\f[\\\"\\t\\r \\n:\\n {\\r\\t\\n\\t\\t\\t\\\"Y\\\"\\r\\r\\n\\t :[]\\n\\t\\n}\\r\\t,\\r\\n\\r\\t\\r\\n\\\"\\\\/\\\"\\r\\n:false  \\r,\\\"\\\\b\\\"\\n\\n:\\\"\\\\f\\\",\\t \\\"*\\\" \\t\\n :\\t\\t\\ntrue\\n\\t\\n,\\t\\t \\r\\\"\\\\tl\\\" \\t  :\\n\\n {}\\t}{\\n\\n\\t\\t\\n\\\"g\\\":\\t[]\\r,\\t\\r  \\\"\\\\t\\\\/\\\"   :4}{\\r\\n\\t\\\"\\\\f\\\\b\\\\nQl" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_f90194661ea4984c485f8aeb5c90f72c) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n\t{\n\"\\r\\fB\"\n\t :-0E0 \r\r \t\n \t }'
	const char* json = "\n\t{\n\"\\r\\fB\"\n\t :-0E0 \r\r \t\n \t }";
	std::cerr << "Plain JSON string from model: " << "\\n\\t{\\n\\\"\\\\r\\\\fB\\\"\\n\\t :-0E0 \\r\\r \\t\\n \\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r\fB' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\fB");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c3f003528ac2bf94c5feacd4875202e0) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{ \n\t \".\":\t\ntrue\t\r}'
	const char* json = "\r{ \n\t \".\":\t\ntrue\t\r}";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\n\\t \\\".\\\":\\t\\ntrue\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '.' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ".");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ce30928604410ead56cb0b3145542f90) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// JSON: '{\r\"\"\r :\r\t{\t\r\"\\n\":\n\r478e+03\t\n\r,\t  \"\\t\\\\1\" :false\t\r},\r \"\\n\\\"\\b\"\t:true \r\r,\r\r\"\\to\":\r-0.0\t \t\n,\"\\t\\r\"\n\r:0e0\n,\n \"P}\\b\\\"\\b,\\th\\t\\t1\"\n\n\r\r:null,\t \t\t\n\t\"\\n\\\"\":\n[ \t{}\t,\"2pH]2f\"\r\t,\n \rfalse\t\r\t\r\r\t]\n\n,\t\"\\\\Z\":\r  true\n\r\r\t\r\n\r,\r\t\"y\\/\":{}\r ,\r\"\\\"^5\\t\\\"h\\\"Y2\\r\\\"fW\\n\"\r:\n\r\ntrue  ,\"B\\\\\":\"r\\\\\"\r,\t\r\t   \r\"jA\\f\":[\t\n[]\r\t]\n\n\r\n\r,\t \r\"\\\"\"\n\t :\tnull \n\r\t \r, \r\"\\f\\/>[\":null\r,\"V\\r\" \n :\rtrue\r\t,  \t\t \r\"46\"\t\t\t:\t-0.09 ,\t\"*2\\\\\":[\r],\r \r\"\\f\\b\\\\\\\\\" \n\t\n:null\n\t\t,\n\r\"\\\\\\t\" \r\t:\t{\"f\" \n\r\t:\nfalse\n\n\n}\r \n,\t\n \t\"\\\"&\\t<\":\r\r\n\rfalse\r\n,\t\n\t\r\r\r\t\"\\f\"\r\t\r:true\t,\t\t\r\"!`\\/Y\"\t: true\n\n\n,\t\t\n \")\\\\\\rz\\\\\"\n \t:   -7 , \"\\\"\\f\":\t\n\t0\r, \r\r\t\t\"\\\"f \"\n\r :\n\r0.053E+0   \t, \r\n\r\t \"Ny\\\"\"\n:true \r\t,\t\t\n\n\r\"`9E4\":{\t\t\n\n\"\\/8\\n7\\\\\"\r:\t\t\"\\\\Z\\/6}\\/+b\\r:\"\r\r\t,\"\\\\\\t\\bx\"\t:\tnull\t\r\t}\t\r\n,\"Z@\"\r :\n{ \t\t\t\"\\\"\\r\"\n\r\n:\t\t0\t}\n ,\n\"\\\\H\\r\\\"\" \r:\"3%\\tG\\f!\", \t\"=\"\r \r\n:\t -0e+07,\"1\"\n:{  \"<`B\":\r{\n\n},\n\n\"\\f5t\\r\" \n\n\r: \tfalse}\n\n ,\n\t\n\"!\"\t\t:\n\"\\\\\\rPN\",\"?\\/\\f\\/\\\"\\\"kw\" :{}\n,\t\"\\r\\t\"   : {\r}\r\r \r, \n\r\n\n\n\"#O6A\"\t\t:\nnull\t,\t \n\"\\/\"\n:[\r],\t \"2\\t\\r\"\n:\"q\\tIE\"\n,\t  \t\r\"\\t\"\r:[\rtrue \t]\n\r\n\t, \r\n\"\\r\" \t  :-3.0\n\t,\n\t\r\n\"\\/o\\b\":null,\r\r \"\\b\\\"&-\": \t \nnull\r\t\n,\n\n\"D\" \r: \"\\fM\\/\" \r\r,\t  \t\n \n\"\\fN\\rmJ\":\rfalse\r \t, \t\n\"T\" :\rfalse\t, \"%\\b\"\r\r\n\n:\n-0\n\n,\n \r\"\\r\\\\dD\"\n\t\t:\t\nnull\n\r \n , \n \"F\\\"\\t\\nu\"\n\n:[]\r ,\n\"R\"\n\n:\nfalse\n\r ,\r\n\r\r\n\"y:P\" \n\n:\r\n\r-9E0 \t ,\r\"\\r\\t'\"\r\r : 9,\t\t\"C\" \r:\ntrue \t\t\r,\n \"X\"\n\t\r\n: false, \n \t\"\\/H\": \r\tfalse\t ,\r\n\t\"\\\"\\b\\r9\"\n:{\t\r}\r\r \n\t\r,\r\n\n\t\"O\\n\"\n:\n\t[\n \t{ }\n\r\n]\r\t\t\n, \n\"s\" \n:0e-079070 ,\t\"J9C*|\":  null\n,  \n\"\\\"UZ\\n\"   \r: [\n\t \r-0E-0\r\r]\r,\n\n\"\\bz\\/\"\t\t\t:  \"\\n \\\\5\"\r\t\t\r\r,\t\t \t\"!\\t\\\"\" \t:\r\t -10.010e-0,\t\t \r\t\n\"\\/\\r\\f\"\n\n :-0.0,\n \"\\nN\\b\\r\"  :\n\nfalse \t \r , \"3\":\r\"\\rr\"\t\t \n,\t\"i\\/\\bt\"\n:\"\\\"\\n\"\r \t ,\"\\tQ\\t\\t\"\r\r: true \t,\n\n \r\"8b\\n0\\b\\/\": -60 \r\r\n,\n\t\t\"P\"\r :  \n[]\n , \r\r\"\\n\\fR\"\n\n\t\n:null   \n , \r\t\r\"M\"\r:\t[\tnull\t\n \r\n],\r\"c\\\\F\\r\"\n:true,\r\r\n\t\n\"g\\t\"\n:\"\\n\\f\\r^\"\r ,\n\t\"\\f'0q-:\"\r\r:null ,\n\n \r\r\t \"G\":{\n \"y\"\t:[\r[ false\r,\tnull ,null ,-52 ]\t,\r\t {\r\t\n \"\\\\-\" :{\r} ,  \t\n\t\n \"A\":\t\r\"8Y_\"}\t\r,true\t\r, false \r\t\n\r]\r\n } \n\t,\n\n \"\\n\\/\"\n\r\r:\n70\r\r,\"]\"\t: \t-41\n\r\n,\n\t\"\\\"|\" :\r\t0\t\t,   \t\n\"\\b\\f\\/%\\\\\\f\"\r\t:\r\t\r{\n\t \n\r\"H\"\t: {}\r\t } ,\"i\\\\\\\"\\/\"\t\r\r:[\n  \tfalse,\rtrue\t\r\r]\t\t,\r\r\n\n\"&\\/\":[]\r, \n\".HJ\"\t\n\n\r:\t \r\"\\n\\b\\b\"\n\r,\r\r\n\t\"\\n~?\\b\\t\" \r: false \r\t\r\t,\r\"q'
	const char* json = "{\r\"\"\r :\r\t{\t\r\"\\n\":\n\r478e+03\t\n\r,\t  \"\\t\\\\1\" :false\t\r},\r \"\\n\\\"\\b\"\t:true \r\r,\r\r\"\\to\":\r-0.0\t \t\n,\"\\t\\r\"\n\r:0e0\n,\n \"P}\\b\\\"\\b,\\th\\t\\t1\"\n\n\r\r:null,\t \t\t\n\t\"\\n\\\"\":\n[ \t{}\t,\"2pH]2f\"\r\t,\n \rfalse\t\r\t\r\r\t]\n\n,\t\"\\\\Z\":\r  true\n\r\r\t\r\n\r,\r\t\"y\\/\":{}\r ,\r\"\\\"^5\\t\\\"h\\\"Y2\\r\\\"fW\\n\"\r:\n\r\ntrue  ,\"B\\\\\":\"r\\\\\"\r,\t\r\t   \r\"jA\\f\":[\t\n[]\r\t]\n\n\r\n\r,\t \r\"\\\"\"\n\t :\tnull \n\r\t \r, \r\"\\f\\/>[\":null\r,\"V\\r\" \n :\rtrue\r\t,  \t\t \r\"46\"\t\t\t:\t-0.09 ,\t\"*2\\\\\":[\r],\r \r\"\\f\\b\\\\\\\\\" \n\t\n:null\n\t\t,\n\r\"\\\\\\t\" \r\t:\t{\"f\" \n\r\t:\nfalse\n\n\n}\r \n,\t\n \t\"\\\"&\\t<\":\r\r\n\rfalse\r\n,\t\n\t\r\r\r\t\"\\f\"\r\t\r:true\t,\t\t\r\"!`\\/Y\"\t: true\n\n\n,\t\t\n \")\\\\\\rz\\\\\"\n \t:   -7 , \"\\\"\\f\":\t\n\t0\r, \r\r\t\t\"\\\"f \"\n\r :\n\r0.053E+0   \t, \r\n\r\t \"Ny\\\"\"\n:true \r\t,\t\t\n\n\r\"`9E4\":{\t\t\n\n\"\\/8\\n7\\\\\"\r:\t\t\"\\\\Z\\/6}\\/+b\\r:\"\r\r\t,\"\\\\\\t\\bx\"\t:\tnull\t\r\t}\t\r\n,\"Z@\"\r :\n{ \t\t\t\"\\\"\\r\"\n\r\n:\t\t0\t}\n ,\n\"\\\\H\\r\\\"\" \r:\"3%\\tG\\f!\", \t\"=\"\r \r\n:\t -0e+07,\"1\"\n:{  \"<`B\":\r{\n\n},\n\n\"\\f5t\\r\" \n\n\r: \tfalse}\n\n ,\n\t\n\"!\"\t\t:\n\"\\\\\\rPN\",\"?\\/\\f\\/\\\"\\\"kw\" :{}\n,\t\"\\r\\t\"   : {\r}\r\r \r, \n\r\n\n\n\"#O6A\"\t\t:\nnull\t,\t \n\"\\/\"\n:[\r],\t \"2\\t\\r\"\n:\"q\\tIE\"\n,\t  \t\r\"\\t\"\r:[\rtrue \t]\n\r\n\t, \r\n\"\\r\" \t  :-3.0\n\t,\n\t\r\n\"\\/o\\b\":null,\r\r \"\\b\\\"&-\": \t \nnull\r\t\n,\n\n\"D\" \r: \"\\fM\\/\" \r\r,\t  \t\n \n\"\\fN\\rmJ\":\rfalse\r \t, \t\n\"T\" :\rfalse\t, \"%\\b\"\r\r\n\n:\n-0\n\n,\n \r\"\\r\\\\dD\"\n\t\t:\t\nnull\n\r \n , \n \"F\\\"\\t\\nu\"\n\n:[]\r ,\n\"R\"\n\n:\nfalse\n\r ,\r\n\r\r\n\"y:P\" \n\n:\r\n\r-9E0 \t ,\r\"\\r\\t'\"\r\r : 9,\t\t\"C\" \r:\ntrue \t\t\r,\n \"X\"\n\t\r\n: false, \n \t\"\\/H\": \r\tfalse\t ,\r\n\t\"\\\"\\b\\r9\"\n:{\t\r}\r\r \n\t\r,\r\n\n\t\"O\\n\"\n:\n\t[\n \t{ }\n\r\n]\r\t\t\n, \n\"s\" \n:0e-079070 ,\t\"J9C*|\":  null\n,  \n\"\\\"UZ\\n\"   \r: [\n\t \r-0E-0\r\r]\r,\n\n\"\\bz\\/\"\t\t\t:  \"\\n \\\\5\"\r\t\t\r\r,\t\t \t\"!\\t\\\"\" \t:\r\t -10.010e-0,\t\t \r\t\n\"\\/\\r\\f\"\n\n :-0.0,\n \"\\nN\\b\\r\"  :\n\nfalse \t \r , \"3\":\r\"\\rr\"\t\t \n,\t\"i\\/\\bt\"\n:\"\\\"\\n\"\r \t ,\"\\tQ\\t\\t\"\r\r: true \t,\n\n \r\"8b\\n0\\b\\/\": -60 \r\r\n,\n\t\t\"P\"\r :  \n[]\n , \r\r\"\\n\\fR\"\n\n\t\n:null   \n , \r\t\r\"M\"\r:\t[\tnull\t\n \r\n],\r\"c\\\\F\\r\"\n:true,\r\r\n\t\n\"g\\t\"\n:\"\\n\\f\\r^\"\r ,\n\t\"\\f'0q-:\"\r\r:null ,\n\n \r\r\t \"G\":{\n \"y\"\t:[\r[ false\r,\tnull ,null ,-52 ]\t,\r\t {\r\t\n \"\\\\-\" :{\r} ,  \t\n\t\n \"A\":\t\r\"8Y_\"}\t\r,true\t\r, false \r\t\n\r]\r\n } \n\t,\n\n \"\\n\\/\"\n\r\r:\n70\r\r,\"]\"\t: \t-41\n\r\n,\n\t\"\\\"|\" :\r\t0\t\t,   \t\n\"\\b\\f\\/%\\\\\\f\"\r\t:\r\t\r{\n\t \n\r\"H\"\t: {}\r\t } ,\"i\\\\\\\"\\/\"\t\r\r:[\n  \tfalse,\rtrue\t\r\r]\t\t,\r\r\n\n\"&\\/\":[]\r, \n\".HJ\"\t\n\n\r:\t \r\"\\n\\b\\b\"\n\r,\r\r\n\t\"\\n~?\\b\\t\" \r: false \r\t\r\t,\r\"q";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\r :\\r\\t{\\t\\r\\\"\\\\n\\\":\\n\\r478e+03\\t\\n\\r,\\t  \\\"\\\\t\\\\\\\\1\\\" :false\\t\\r},\\r \\\"\\\\n\\\\\\\"\\\\b\\\"\\t:true \\r\\r,\\r\\r\\\"\\\\to\\\":\\r-0.0\\t \\t\\n,\\\"\\\\t\\\\r\\\"\\n\\r:0e0\\n,\\n \\\"P}\\\\b\\\\\\\"\\\\b,\\\\th\\\\t\\\\t1\\\"\\n\\n\\r\\r:null,\\t \\t\\t\\n\\t\\\"\\\\n\\\\\\\"\\\":\\n[ \\t{}\\t,\\\"2pH]2f\\\"\\r\\t,\\n \\rfalse\\t\\r\\t\\r\\r\\t]\\n\\n,\\t\\\"\\\\\\\\Z\\\":\\r  true\\n\\r\\r\\t\\r\\n\\r,\\r\\t\\\"y\\\\/\\\":{}\\r ,\\r\\\"\\\\\\\"^5\\\\t\\\\\\\"h\\\\\\\"Y2\\\\r\\\\\\\"fW\\\\n\\\"\\r:\\n\\r\\ntrue  ,\\\"B\\\\\\\\\\\":\\\"r\\\\\\\\\\\"\\r,\\t\\r\\t   \\r\\\"jA\\\\f\\\":[\\t\\n[]\\r\\t]\\n\\n\\r\\n\\r,\\t \\r\\\"\\\\\\\"\\\"\\n\\t :\\tnull \\n\\r\\t \\r, \\r\\\"\\\\f\\\\/>[\\\":null\\r,\\\"V\\\\r\\\" \\n :\\rtrue\\r\\t,  \\t\\t \\r\\\"46\\\"\\t\\t\\t:\\t-0.09 ,\\t\\\"*2\\\\\\\\\\\":[\\r],\\r \\r\\\"\\\\f\\\\b\\\\\\\\\\\\\\\\\\\" \\n\\t\\n:null\\n\\t\\t,\\n\\r\\\"\\\\\\\\\\\\t\\\" \\r\\t:\\t{\\\"f\\\" \\n\\r\\t:\\nfalse\\n\\n\\n}\\r \\n,\\t\\n \\t\\\"\\\\\\\"&\\\\t<\\\":\\r\\r\\n\\rfalse\\r\\n,\\t\\n\\t\\r\\r\\r\\t\\\"\\\\f\\\"\\r\\t\\r:true\\t,\\t\\t\\r\\\"!`\\\\/Y\\\"\\t: true\\n\\n\\n,\\t\\t\\n \\\")\\\\\\\\\\\\rz\\\\\\\\\\\"\\n \\t:   -7 , \\\"\\\\\\\"\\\\f\\\":\\t\\n\\t0\\r, \\r\\r\\t\\t\\\"\\\\\\\"f \\\"\\n\\r :\\n\\r0.053E+0   \\t, \\r\\n\\r\\t \\\"Ny\\\\\\\"\\\"\\n:true \\r\\t,\\t\\t\\n\\n\\r\\\"`9E4\\\":{\\t\\t\\n\\n\\\"\\\\/8\\\\n7\\\\\\\\\\\"\\r:\\t\\t\\\"\\\\\\\\Z\\\\/6}\\\\/+b\\\\r:\\\"\\r\\r\\t,\\\"\\\\\\\\\\\\t\\\\bx\\\"\\t:\\tnull\\t\\r\\t}\\t\\r\\n,\\\"Z@\\\"\\r :\\n{ \\t\\t\\t\\\"\\\\\\\"\\\\r\\\"\\n\\r\\n:\\t\\t0\\t}\\n ,\\n\\\"\\\\\\\\H\\\\r\\\\\\\"\\\" \\r:\\\"3%\\\\tG\\\\f!\\\", \\t\\\"=\\\"\\r \\r\\n:\\t -0e+07,\\\"1\\\"\\n:{  \\\"<`B\\\":\\r{\\n\\n},\\n\\n\\\"\\\\f5t\\\\r\\\" \\n\\n\\r: \\tfalse}\\n\\n ,\\n\\t\\n\\\"!\\\"\\t\\t:\\n\\\"\\\\\\\\\\\\rPN\\\",\\\"?\\\\/\\\\f\\\\/\\\\\\\"\\\\\\\"kw\\\" :{}\\n,\\t\\\"\\\\r\\\\t\\\"   : {\\r}\\r\\r \\r, \\n\\r\\n\\n\\n\\\"#O6A\\\"\\t\\t:\\nnull\\t,\\t \\n\\\"\\\\/\\\"\\n:[\\r],\\t \\\"2\\\\t\\\\r\\\"\\n:\\\"q\\\\tIE\\\"\\n,\\t  \\t\\r\\\"\\\\t\\\"\\r:[\\rtrue \\t]\\n\\r\\n\\t, \\r\\n\\\"\\\\r\\\" \\t  :-3.0\\n\\t,\\n\\t\\r\\n\\\"\\\\/o\\\\b\\\":null,\\r\\r \\\"\\\\b\\\\\\\"&-\\\": \\t \\nnull\\r\\t\\n,\\n\\n\\\"D\\\" \\r: \\\"\\\\fM\\\\/\\\" \\r\\r,\\t  \\t\\n \\n\\\"\\\\fN\\\\rmJ\\\":\\rfalse\\r \\t, \\t\\n\\\"T\\\" :\\rfalse\\t, \\\"%\\\\b\\\"\\r\\r\\n\\n:\\n-0\\n\\n,\\n \\r\\\"\\\\r\\\\\\\\dD\\\"\\n\\t\\t:\\t\\nnull\\n\\r \\n , \\n \\\"F\\\\\\\"\\\\t\\\\nu\\\"\\n\\n:[]\\r ,\\n\\\"R\\\"\\n\\n:\\nfalse\\n\\r ,\\r\\n\\r\\r\\n\\\"y:P\\\" \\n\\n:\\r\\n\\r-9E0 \\t ,\\r\\\"\\\\r\\\\t'\\\"\\r\\r : 9,\\t\\t\\\"C\\\" \\r:\\ntrue \\t\\t\\r,\\n \\\"X\\\"\\n\\t\\r\\n: false, \\n \\t\\\"\\\\/H\\\": \\r\\tfalse\\t ,\\r\\n\\t\\\"\\\\\\\"\\\\b\\\\r9\\\"\\n:{\\t\\r}\\r\\r \\n\\t\\r,\\r\\n\\n\\t\\\"O\\\\n\\\"\\n:\\n\\t[\\n \\t{ }\\n\\r\\n]\\r\\t\\t\\n, \\n\\\"s\\\" \\n:0e-079070 ,\\t\\\"J9C*|\\\":  null\\n,  \\n\\\"\\\\\\\"UZ\\\\n\\\"   \\r: [\\n\\t \\r-0E-0\\r\\r]\\r,\\n\\n\\\"\\\\bz\\\\/\\\"\\t\\t\\t:  \\\"\\\\n \\\\\\\\5\\\"\\r\\t\\t\\r\\r,\\t\\t \\t\\\"!\\\\t\\\\\\\"\\\" \\t:\\r\\t -10.010e-0,\\t\\t \\r\\t\\n\\\"\\\\/\\\\r\\\\f\\\"\\n\\n :-0.0,\\n \\\"\\\\nN\\\\b\\\\r\\\"  :\\n\\nfalse \\t \\r , \\\"3\\\":\\r\\\"\\\\rr\\\"\\t\\t \\n,\\t\\\"i\\\\/\\\\bt\\\"\\n:\\\"\\\\\\\"\\\\n\\\"\\r \\t ,\\\"\\\\tQ\\\\t\\\\t\\\"\\r\\r: true \\t,\\n\\n \\r\\\"8b\\\\n0\\\\b\\\\/\\\": -60 \\r\\r\\n,\\n\\t\\t\\\"P\\\"\\r :  \\n[]\\n , \\r\\r\\\"\\\\n\\\\fR\\\"\\n\\n\\t\\n:null   \\n , \\r\\t\\r\\\"M\\\"\\r:\\t[\\tnull\\t\\n \\r\\n],\\r\\\"c\\\\\\\\F\\\\r\\\"\\n:true,\\r\\r\\n\\t\\n\\\"g\\\\t\\\"\\n:\\\"\\\\n\\\\f\\\\r^\\\"\\r ,\\n\\t\\\"\\\\f'0q-:\\\"\\r\\r:null ,\\n\\n \\r\\r\\t \\\"G\\\":{\\n \\\"y\\\"\\t:[\\r[ false\\r,\\tnull ,null ,-52 ]\\t,\\r\\t {\\r\\t\\n \\\"\\\\\\\\-\\\" :{\\r} ,  \\t\\n\\t\\n \\\"A\\\":\\t\\r\\\"8Y_\\\"}\\t\\r,true\\t\\r, false \\r\\t\\n\\r]\\r\\n } \\n\\t,\\n\\n \\\"\\\\n\\\\/\\\"\\n\\r\\r:\\n70\\r\\r,\\\"]\\\"\\t: \\t-41\\n\\r\\n,\\n\\t\\\"\\\\\\\"|\\\" :\\r\\t0\\t\\t,   \\t\\n\\\"\\\\b\\\\f\\\\/%\\\\\\\\\\\\f\\\"\\r\\t:\\r\\t\\r{\\n\\t \\n\\r\\\"H\\\"\\t: {}\\r\\t } ,\\\"i\\\\\\\\\\\\\\\"\\\\/\\\"\\t\\r\\r:[\\n  \\tfalse,\\rtrue\\t\\r\\r]\\t\\t,\\r\\r\\n\\n\\\"&\\\\/\\\":[]\\r, \\n\\\".HJ\\\"\\t\\n\\n\\r:\\t \\r\\\"\\\\n\\\\b\\\\b\\\"\\n\\r,\\r\\r\\n\\t\\\"\\\\n~?\\\\b\\\\t\\\" \\r: false \\r\\t\\r\\t,\\r\\\"q" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_EQ(NULL, object);
}

TEST(cJSON, subject_be07c2c79913d2f752b6568c806ed07f) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r \r{\n\t\r\n \t\"<\"\t:\rnull\t,\t\r\"\"\n :false\t\n\t}\r'
	const char* json = "\r \r{\n\t\r\n \t\"<\"\t:\rnull\t,\t\r\"\"\n :false\t\n\t}\r";
	std::cerr << "Plain JSON string from model: " << "\\r \\r{\\n\\t\\r\\n \\t\\\"<\\\"\\t:\\rnull\\t,\\t\\r\\\"\\\"\\n :false\\t\\n\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '<' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_33bd43540223c21cfb3598d9a7a2b657) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\" \t\r\r :\t -80.0 \r  , \n\"X\\/g'\\\"\\r\"\n \r\t:true\t\r}\n'
	const char* json = "{ \"\" \t\r\r :\t -80.0 \r  , \n\"X\\/g'\\\"\\r\"\n \r\t:true\t\r}\n";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\" \\t\\r\\r :\\t -80.0 \\r  , \\n\\\"X\\\\/g'\\\\\\\"\\\\r\\\"\\n \\r\\t:true\\t\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-80.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-80.0, cJSON_double(child));
	}
	{
		// 'X/g'\"\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "X/g'\"\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d198295c42a253422fd2e65f5a4b7bd8) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r \r  \"-\\f\\/S9\\b\\f\"\t:0\r,\r\n  \"\"\r:null} '
	const char* json = "{\r \r  \"-\\f\\/S9\\b\\f\"\t:0\r,\r\n  \"\"\r:null} ";
	std::cerr << "Plain JSON string from model: " << "{\\r \\r  \\\"-\\\\f\\\\/S9\\\\b\\\\f\\\"\\t:0\\r,\\r\\n  \\\"\\\"\\r:null} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '-\f/S9\b\f' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "-\f/S9\b\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_da0b804d0978bfef3c59f349204e9ef3) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \n\t{\t\r\n\r\n \">\"\r: false\r ,\t\r\t\"\"\r:\t\t [\t\tnull\t,false]}'
	const char* json = " \n\t{\t\r\n\r\n \">\"\r: false\r ,\t\r\t\"\"\r:\t\t [\t\tnull\t,false]}";
	std::cerr << "Plain JSON string from model: " << " \\n\\t{\\t\\r\\n\\r\\n \\\">\\\"\\r: false\\r ,\\t\\r\\t\\\"\\\"\\r:\\t\\t [\\t\\tnull\\t,false]}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':1 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '>' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ">");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f207044ec494bb2e6f743f14f5c3e553) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\n\n{\"_t\\t~\" : \ntrue\t\n}\r\n\t'
	const char* json = "\r\n\n{\"_t\\t~\" : \ntrue\t\n}\r\n\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\n{\\\"_t\\\\t~\\\" : \\ntrue\\t\\n}\\r\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '_t\t~' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "_t\t~");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4eccfef57f11dc4f36a38e66f24249c3) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\"\"\n:\r{\t} \n\t\t}\r'
	const char* json = "{\n\"\"\n:\r{\t} \n\t\t}\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\"\\n:\\r{\\t} \\n\\t\\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_6751ad08cef6418b2a94c31f6fc4ed0e) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\\b\"\n :\t\tfalse\t \r, \"\"  :\nnull\r\n\r,\n\r\r\t\".\\t+A\\\"\"\t\r: \t\n{}\r} '
	const char* json = "{\"\\b\"\n :\t\tfalse\t \r, \"\"  :\nnull\r\n\r,\n\r\r\t\".\\t+A\\\"\"\t\r: \t\n{}\r} ";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\b\\\"\\n :\\t\\tfalse\\t \\r, \\\"\\\"  :\\nnull\\r\\n\\r,\\n\\r\\r\\t\\\".\\\\t+A\\\\\\\"\\\"\\t\\r: \\t\\n{}\\r} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_663cf0f5c0ea7e5c36ffa96187ecc513) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\r\"((\"\t\t:\t\n\t {\r\r\"\\/y\\/\\/9\\b\\/\"  \r:  [\r \"]7sF\"\r,70e0\n,[],true\r] },\r\"\":\n[\t\t \"3\\t:;\\/\\\\.+HD\" ]\r }\r'
	const char* json = "{\r\r\"((\"\t\t:\t\n\t {\r\r\"\\/y\\/\\/9\\b\\/\"  \r:  [\r \"]7sF\"\r,70e0\n,[],true\r] },\r\"\":\n[\t\t \"3\\t:;\\/\\\\.+HD\" ]\r }\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\\"((\\\"\\t\\t:\\t\\n\\t {\\r\\r\\\"\\\\/y\\\\/\\\\/9\\\\b\\\\/\\\"  \\r:  [\\r \\\"]7sF\\\"\\r,70e0\\n,[],true\\r] },\\r\\\"\\\":\\n[\\t\\t \\\"3\\\\t:;\\\\/\\\\\\\\.+HD\\\" ]\\r }\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = '3\t:;/\\.+HD'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("3\t:;/\\.+HD", cJSON_string(child));
	}
	{
		// '((':'/y//9\b/':0 = ']7sF'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "((");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/y//9\b/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("]7sF", cJSON_string(child));
	}
	{
		// '((':'/y//9\b/':1 = '70.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "((");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/y//9\b/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(70.0, cJSON_double(child));
	}
	{
		// '((':'/y//9\b/':3 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "((");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/y//9\b/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 3);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3d48da7f4f8e06207eca8da9ae65a2e5) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"K\\r\\/9\":\tfalse\t\r}\t'
	const char* json = "{\"K\\r\\/9\":\tfalse\t\r}\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"K\\\\r\\\\/9\\\":\\tfalse\\t\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'K\r/9' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "K\r/9");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d71df578dc465c4063c62cd385337bae) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\t\n{\r\t \n\"O\\r\\t\"\t:[]\t}  '
	const char* json = "\n\t\n{\r\t \n\"O\\r\\t\"\t:[]\t}  ";
	std::cerr << "Plain JSON string from model: " << "\\n\\t\\n{\\r\\t \\n\\\"O\\\\r\\\\t\\\"\\t:[]\\t}  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_cebddad590f31dade1f5655b04b6e532) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r \r\r\"\\t\"\n\t:\"\\\\\"\t\n ,\t\r\r\t\r \t\"\\bm\"\t:false, \r\"\\\\G\"\t:\tfalse\r\r\n}'
	const char* json = "{\r \r\r\"\\t\"\n\t:\"\\\\\"\t\n ,\t\r\r\t\r \t\"\\bm\"\t:false, \r\"\\\\G\"\t:\tfalse\r\r\n}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\r\\r\\\"\\\\t\\\"\\n\\t:\\\"\\\\\\\\\\\"\\t\\n ,\\t\\r\\r\\t\\r \\t\\\"\\\\bm\\\"\\t:false, \\r\\\"\\\\\\\\G\\\"\\t:\\tfalse\\r\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	{
		// '\\G' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\G");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\bm' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bm");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a0bef9e9e19fbcc0df2c8db553a6ac2c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\"\":\rfalse}\n\t'
	const char* json = "\r{\"\":\rfalse}\n\t";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\":\\rfalse}\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_93ba4bd91504db7beca8122252d64279) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\r\"\\b\\\\\":\t\r-67e+082022088\t\t }\t\n'
	const char* json = "{\n\r\"\\b\\\\\":\t\r-67e+082022088\t\t }\t\n";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\\"\\\\b\\\\\\\\\\\":\\t\\r-67e+082022088\\t\\t }\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\\' = '-inf'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		// Testing for NaN or Infinity is not implemented
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_588a5502cb49752cbbee64ed8ee8f7bc) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\n \t\"\"\n\r:-0\r\n\t,\n \"z\\r0\\n\" \r:\t\r\rfalse,\n \n\"M\\n\"   :0.020e-0\r\n \t,\t\"\\r(\":  \"\\t\",\n\r\"V\":\n {}\t\t}\r\n'
	const char* json = "{\t\n \t\"\"\n\r:-0\r\n\t,\n \"z\\r0\\n\" \r:\t\r\rfalse,\n \n\"M\\n\"   :0.020e-0\r\n \t,\t\"\\r(\":  \"\\t\",\n\r\"V\":\n {}\t\t}\r\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n \\t\\\"\\\"\\n\\r:-0\\r\\n\\t,\\n \\\"z\\\\r0\\\\n\\\" \\r:\\t\\r\\rfalse,\\n \\n\\\"M\\\\n\\\"   :0.020e-0\\r\\n \\t,\\t\\\"\\\\r(\\\":  \\\"\\\\t\\\",\\n\\r\\\"V\\\":\\n {}\\t\\t}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\r(' = '\t'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t", cJSON_string(child));
	}
	{
		// 'z\r0\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "z\r0\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'M\n' = '0.02'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "M\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.02, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_97bea2180ff38faf4dcdf18ad69f6904) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\n{\r\t\"\\fD\"\t:{\t}  }\t\n\r'
	const char* json = "\r\n{\r\t\"\\fD\"\t:{\t}  }\t\n\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\r\\t\\\"\\\\fD\\\"\\t:{\\t}  }\\t\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_efa485590dda0c24832f975b591e45f0) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t \n\"\\f@\\/\"\r:\r\n true\r\n\r  }'
	const char* json = "{\t \n\"\\f@\\/\"\r:\r\n true\r\n\r  }";
	std::cerr << "Plain JSON string from model: " << "{\\t \\n\\\"\\\\f@\\\\/\\\"\\r:\\r\\n true\\r\\n\\r  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f@/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f@/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5dfec40dc9f99bad596a6a902d7d289c) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t\t{\"f\" \t : \t {\t\r\"\" \n\t:\t\n\t{\"\\\\\"\n:\ntrue} \r\n},\"\\\",\"\t:{\n\t\n\"\\n\\/[\" \t:\t{}\r\n\r,\t\t\r \"\\t\\r\\f\\rFW\":\nnull \r\n\r}, \r\"4\\\\\\\"\"\n\r\t:[\t\r[] \r,\t \rnull \t,null\n\n\r\t\r]\n}'
	const char* json = "\t\t{\"f\" \t : \t {\t\r\"\" \n\t:\t\n\t{\"\\\\\"\n:\ntrue} \r\n},\"\\\",\"\t:{\n\t\n\"\\n\\/[\" \t:\t{}\r\n\r,\t\t\r \"\\t\\r\\f\\rFW\":\nnull \r\n\r}, \r\"4\\\\\\\"\"\n\r\t:[\t\r[] \r,\t \rnull \t,null\n\n\r\t\r]\n}";
	std::cerr << "Plain JSON string from model: " << "\\t\\t{\\\"f\\\" \\t : \\t {\\t\\r\\\"\\\" \\n\\t:\\t\\n\\t{\\\"\\\\\\\\\\\"\\n:\\ntrue} \\r\\n},\\\"\\\\\\\",\\\"\\t:{\\n\\t\\n\\\"\\\\n\\\\/[\\\" \\t:\\t{}\\r\\n\\r,\\t\\t\\r \\\"\\\\t\\\\r\\\\f\\\\rFW\\\":\\nnull \\r\\n\\r}, \\r\\\"4\\\\\\\\\\\\\\\"\\\"\\n\\r\\t:[\\t\\r[] \\r,\\t \\rnull \\t,null\\n\\n\\r\\t\\r]\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\",':'\t\r\f\rFW' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\",");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\r\f\rFW");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '4\\\"':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "4\\\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '4\\\"':2 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "4\\\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'f':'':'\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0d143b08f2ca8ff6faf376266842f927) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\n \r\n\t\"\\t*\\\"<\\\\\\r{\":\"\\f\"}\r\n'
	const char* json = "\r{\n \r\n\t\"\\t*\\\"<\\\\\\r{\":\"\\f\"}\r\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n \\r\\n\\t\\\"\\\\t*\\\\\\\"<\\\\\\\\\\\\r{\\\":\\\"\\\\f\\\"}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t*\"<\\\r{' = '\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t*\"<\\\r{");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fcbb67f3071ab7ceaf76e8c9fd3b503f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' {\t\"\":{},\r\n\t\"&\"\r:\n\rnull, \r\r\"1A\"\r:\r\tnull\t\t,\r\r\n\t\r\"Y\\n\\\"^\"\r\t\t:\n\"\\f\" \r\t ,\t\"\\b\":2.0\n\n , \",\\/\"\n \n:\t \n\"\\t\"\t\r\r\t\t\r\t}\t'
	const char* json = " {\t\"\":{},\r\n\t\"&\"\r:\n\rnull, \r\r\"1A\"\r:\r\tnull\t\t,\r\r\n\t\r\"Y\\n\\\"^\"\r\t\t:\n\"\\f\" \r\t ,\t\"\\b\":2.0\n\n , \",\\/\"\n \n:\t \n\"\\t\"\t\r\r\t\t\r\t}\t";
	std::cerr << "Plain JSON string from model: " << " {\\t\\\"\\\":{},\\r\\n\\t\\\"&\\\"\\r:\\n\\rnull, \\r\\r\\\"1A\\\"\\r:\\r\\tnull\\t\\t,\\r\\r\\n\\t\\r\\\"Y\\\\n\\\\\\\"^\\\"\\r\\t\\t:\\n\\\"\\\\f\\\" \\r\\t ,\\t\\\"\\\\b\\\":2.0\\n\\n , \\\",\\\\/\\\"\\n \\n:\\t \\n\\\"\\\\t\\\"\\t\\r\\r\\t\\t\\r\\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '&' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "&");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// ',/' = '\t'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ",/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t", cJSON_string(child));
	}
	{
		// '1A' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1A");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\b' = '2.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(2.0, cJSON_double(child));
	}
	{
		// 'Y\n\"^' = '\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Y\n\"^");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1e4490a717fa9edeeda139d01ba8cabf) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \n \n\n\"Dd\\f\\n\":{}\n\n\t,\n\r\"\\r:@\"\r:\t \"\"\n\r\r\r,\r\n\"\\t\"\t : \n\tnull \n \t ,\r \"x\"\n:true, \t\n\r\"-Z\\b\\nr\"\t:false\t\n\t,\t\"\\n\\b\\n$\": \"OR\"\n\t,\t\n\r\r\"p\":\t\n null}'
	const char* json = "{ \n \n\n\"Dd\\f\\n\":{}\n\n\t,\n\r\"\\r:@\"\r:\t \"\"\n\r\r\r,\r\n\"\\t\"\t : \n\tnull \n \t ,\r \"x\"\n:true, \t\n\r\"-Z\\b\\nr\"\t:false\t\n\t,\t\"\\n\\b\\n$\": \"OR\"\n\t,\t\n\r\r\"p\":\t\n null}";
	std::cerr << "Plain JSON string from model: " << "{ \\n \\n\\n\\\"Dd\\\\f\\\\n\\\":{}\\n\\n\\t,\\n\\r\\\"\\\\r:@\\\"\\r:\\t \\\"\\\"\\n\\r\\r\\r,\\r\\n\\\"\\\\t\\\"\\t : \\n\\tnull \\n \\t ,\\r \\\"x\\\"\\n:true, \\t\\n\\r\\\"-Z\\\\b\\\\nr\\\"\\t:false\\t\\n\\t,\\t\\\"\\\\n\\\\b\\\\n$\\\": \\\"OR\\\"\\n\\t,\\t\\n\\r\\r\\\"p\\\":\\t\\n null}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '-Z\b\nr' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "-Z\b\nr");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'p' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "p");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\r:@' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r:@");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\n\b\n$' = 'OR'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\b\n$");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("OR", cJSON_string(child));
	}
	{
		// 'x' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "x");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2c7499eb02ab5d6665807244ced48851) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\"\"\n\r:\"2\"\t\t}'
	const char* json = "{\"\"\n\r:\"2\"\t\t}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\n\\r:\\\"2\\\"\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '2'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("2", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b3950b77287204a78ba221d915951f26) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n{ \"\\b_w\"\n\n\t\n:\r{ }\r\n}'
	const char* json = "\n{ \"\\b_w\"\n\n\t\n:\r{ }\r\n}";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\\"\\\\b_w\\\"\\n\\n\\t\\n:\\r{ }\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_f4e1e9d6ae4cad357eae98e224ab312d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' {\"i\"\r \n:true\n\t\t\n,\"wo'\\b\"\t\n:\n\t\r{\t\n\"m\\\\1n\"  :\r{\n\n\r\t\"\":false\t\n}\r }\n\t   \t}'
	const char* json = " {\"i\"\r \n:true\n\t\t\n,\"wo'\\b\"\t\n:\n\t\r{\t\n\"m\\\\1n\"  :\r{\n\n\r\t\"\":false\t\n}\r }\n\t   \t}";
	std::cerr << "Plain JSON string from model: " << " {\\\"i\\\"\\r \\n:true\\n\\t\\t\\n,\\\"wo'\\\\b\\\"\\t\\n:\\n\\t\\r{\\t\\n\\\"m\\\\\\\\1n\\\"  :\\r{\\n\\n\\r\\t\\\"\\\":false\\t\\n}\\r }\\n\\t   \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'i' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'wo'\b':'m\\1n':'' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "wo'\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "m\\1n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_13846032178936c6c986090a8576d53e) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{\r\r\"~\\b\"\r\t: true\t\r}'
	const char* json = "\t{\r\r\"~\\b\"\r\t: true\t\r}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r\\\"~\\\\b\\\"\\r\\t: true\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '~\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "~\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7a55bfb0ed615d406a8accf748f6cfac) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\"H\"\t :true,\"\\b\"\r\r\t:\n \rfalse\r \r\t}\n\n'
	const char* json = "{\r\"H\"\t :true,\"\\b\"\r\r\t:\n \rfalse\r \r\t}\n\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"H\\\"\\t :true,\\\"\\\\b\\\"\\r\\r\\t:\\n \\rfalse\\r \\r\\t}\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'H' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "H");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3c43dbbce43643828a3e4eac8863f381) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\r\t{\n\r \r\"\\\"\" \r:\n\tnull \t\n,\r\t  \r\"\":  \tfalse\n \t, \r\n\"@\\\\\\t&'1dbN\"\n :\t\n\r\"_R\\b\\\"\\\\B\\\"\"\t\n,\t\t \r\"\\n!\\\\\\\"\\\\\\/\":[-0.0\t ], \n\t\"\\f\" \n:\n\t\r\rnull\t,\t   \"\\/7I\\n\\\"\"\n\t :-0\n\t}'
	const char* json = "\r\r\t{\n\r \r\"\\\"\" \r:\n\tnull \t\n,\r\t  \r\"\":  \tfalse\n \t, \r\n\"@\\\\\\t&'1dbN\"\n :\t\n\r\"_R\\b\\\"\\\\B\\\"\"\t\n,\t\t \r\"\\n!\\\\\\\"\\\\\\/\":[-0.0\t ], \n\t\"\\f\" \n:\n\t\r\rnull\t,\t   \"\\/7I\\n\\\"\"\n\t :-0\n\t}";
	std::cerr << "Plain JSON string from model: " << "\\r\\r\\t{\\n\\r \\r\\\"\\\\\\\"\\\" \\r:\\n\\tnull \\t\\n,\\r\\t  \\r\\\"\\\":  \\tfalse\\n \\t, \\r\\n\\\"@\\\\\\\\\\\\t&'1dbN\\\"\\n :\\t\\n\\r\\\"_R\\\\b\\\\\\\"\\\\\\\\B\\\\\\\"\\\"\\t\\n,\\t\\t \\r\\\"\\\\n!\\\\\\\\\\\\\\\"\\\\\\\\\\\\/\\\":[-0.0\\t ], \\n\\t\\\"\\\\f\\\" \\n:\\n\\t\\r\\rnull\\t,\\t   \\\"\\\\/7I\\\\n\\\\\\\"\\\"\\n\\t :-0\\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '@\\\t&'1dbN' = '_R\b\"\\B\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "@\\\t&'1dbN");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("_R\b\"\\B\"", cJSON_string(child));
	}
	{
		// '\f' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\n!\\\"\\/':0 = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n!\\\"\\/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// '/7I\n\"' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/7I\n\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a9f052a3a130581b7c05ec6b9d8841e5) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\n{\r\r\n \"\"\n\t\r:\t{}\t\n,\n\n  \n\t\"o\\\\\"\t\r:\r{\t\n\"\\/\\b\"\t \t\t: [\r\r \"\\\\x\"  ]   ,\t\"\\t\\r\"\n \t :\tfalse\t },  \r\"t({\":\t[]\t\t\r}'
	const char* json = "\r\n{\r\r\n \"\"\n\t\r:\t{}\t\n,\n\n  \n\t\"o\\\\\"\t\r:\r{\t\n\"\\/\\b\"\t \t\t: [\r\r \"\\\\x\"  ]   ,\t\"\\t\\r\"\n \t :\tfalse\t },  \r\"t({\":\t[]\t\t\r}";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\r\\r\\n \\\"\\\"\\n\\t\\r:\\t{}\\t\\n,\\n\\n  \\n\\t\\\"o\\\\\\\\\\\"\\t\\r:\\r{\\t\\n\\\"\\\\/\\\\b\\\"\\t \\t\\t: [\\r\\r \\\"\\\\\\\\x\\\"  ]   ,\\t\\\"\\\\t\\\\r\\\"\\n \\t :\\tfalse\\t },  \\r\\\"t({\\\":\\t[]\\t\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'o\\':'\t\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "o\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'o\\':'/\b':0 = '\\x'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "o\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\x", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_838228e1549c15aa250f1c724baaf390) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\r{\r\n\"=\"\t\t\n:\r-0  \n} '
	const char* json = "\r\r{\r\n\"=\"\t\t\n:\r-0  \n} ";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\r\\n\\\"=\\\"\\t\\t\\n:\\r-0  \\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '=' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_efabbd08fa869fef1bbfc6a7f4a0fd14) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\"\\b\\n\"\n: \r \n\t\"un\\r\\\"H\\n3\"\r\r}\r'
	const char* json = "{\t\"\\b\\n\"\n: \r \n\t\"un\\r\\\"H\\n3\"\r\r}\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\b\\\\n\\\"\\n: \\r \\n\\t\\\"un\\\\r\\\\\\\"H\\\\n3\\\"\\r\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\n' = 'un\r\"H\n3'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("un\r\"H\n3", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6c14c51b4ff57300a0fa7438b61d9e8c) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\"\"\r\n\n:\n \nnull\r\t\t}'
	const char* json = "{\t\"\"\r\n\n:\n \nnull\r\t\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\"\\r\\n\\n:\\n \\nnull\\r\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1d0f34a3779b1b4b640d35dba09498e7) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r \"\"\n \t:\n\r\nnull\t\n\n\r\t,\"5z]&F\"\r\n\r:true\t }\n'
	const char* json = "{\r \"\"\n \t:\n\r\nnull\t\n\n\r\t,\"5z]&F\"\r\n\r:true\t }\n";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"\\\"\\n \\t:\\n\\r\\nnull\\t\\n\\n\\r\\t,\\\"5z]&F\\\"\\r\\n\\r:true\\t }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '5z]&F' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "5z]&F");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_34bbb35d9bb3e20376e5140ee2c91e7b) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\t\t\n\t\"\\/\\n\"\n:\r\tfalse\t\n\t \n\r}'
	const char* json = "\r{\t\t\n\t\"\\/\\n\"\n:\r\tfalse\t\n\t \n\r}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\t\\n\\t\\\"\\\\/\\\\n\\\"\\n:\\r\\tfalse\\t\\n\\t \\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c17e55819f1dfe008d8c9bfc2546e01f) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\"\" :[ { \r\r\"\\/\\f_R\"\r:false\r  } ,\"VfB\"\n\n,\rtrue,\n true\r\t\r \n]\n\t\t,\t\r\r\"h\":\t{ \"\\r\\/\"\r: -4\t,\t\r\r\n\t\n\"\\\"\" \t\r:null }\t \n,\t\n\"\\\"\\r\\n\\\\\\/{\"\n:\t\r\ttrue,\r\t \t\"Q\"\n\n  \r:\n \n[]\r\t\n,\"\\nNO3\" \r: \r []\n }  \n'
	const char* json = "{\r\"\" :[ { \r\r\"\\/\\f_R\"\r:false\r  } ,\"VfB\"\n\n,\rtrue,\n true\r\t\r \n]\n\t\t,\t\r\r\"h\":\t{ \"\\r\\/\"\r: -4\t,\t\r\r\n\t\n\"\\\"\" \t\r:null }\t \n,\t\n\"\\\"\\r\\n\\\\\\/{\"\n:\t\r\ttrue,\r\t \t\"Q\"\n\n  \r:\n \n[]\r\t\n,\"\\nNO3\" \r: \r []\n }  \n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\" :[ { \\r\\r\\\"\\\\/\\\\f_R\\\"\\r:false\\r  } ,\\\"VfB\\\"\\n\\n,\\rtrue,\\n true\\r\\t\\r \\n]\\n\\t\\t,\\t\\r\\r\\\"h\\\":\\t{ \\\"\\\\r\\\\/\\\"\\r: -4\\t,\\t\\r\\r\\n\\t\\n\\\"\\\\\\\"\\\" \\t\\r:null }\\t \\n,\\t\\n\\\"\\\\\\\"\\\\r\\\\n\\\\\\\\\\\\/{\\\"\\n:\\t\\r\\ttrue,\\r\\t \\t\\\"Q\\\"\\n\\n  \\r:\\n \\n[]\\r\\t\\n,\\\"\\\\nNO3\\\" \\r: \\r []\\n }  \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0:'/\f_R' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\f_R");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':1 = 'VfB'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("VfB", cJSON_string(child));
	}
	{
		// '':2 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':3 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 3);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'h':'\r/' = '-4'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "h");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-4, cJSON_double(child));
	}
	{
		// 'h':'\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "h");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\"\r\n\\/{' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\r\n\\/{");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_429836112066cbf81c479264eb76c6b2) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{ \n\r\n\n \"\":{   }\t\n}\t'
	const char* json = "\r{ \n\r\n\n \"\":{   }\t\n}\t";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\n\\r\\n\\n \\\"\\\":{   }\\t\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_7f144044d4fbe2e35a5a0751e462c8d5) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\r{\r\"\\t\"\t:\r[]\r}'
	const char* json = "\r\r{\r\"\\t\"\t:\r[]\r}";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\r\\\"\\\\t\\\"\\t:\\r[]\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_a3e1f52ac1096921071f2eeb71f8ee1a) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\n{\r \"{\":\r {}\t\n,\n\n\"\\tp\":true\n\r,\t\r\n\"\\f\\\\(9T\\t8\":\r\"\\tu\"\r }\r\t\n'
	const char* json = "\t\n{\r \"{\":\r {}\t\n,\n\n\"\\tp\":true\n\r,\t\r\n\"\\f\\\\(9T\\t8\":\r\"\\tu\"\r }\r\t\n";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{\\r \\\"{\\\":\\r {}\\t\\n,\\n\\n\\\"\\\\tp\\\":true\\n\\r,\\t\\r\\n\\\"\\\\f\\\\\\\\(9T\\\\t8\\\":\\r\\\"\\\\tu\\\"\\r }\\r\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\tp' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\tp");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\f\\(9T\t8' = '\tu'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\\(9T\t8");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\tu", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d031c27569dfc8785efed7258448bf53) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \n\"\":  \r[\n],\r\r\n\"\\fT]\" :\t\n\n0.08 \n\n,   \r\"]\" \t:\t\"OM\\\"\\n\"\r\n, \"\\f\\\"\\t\\n~\\fF\":\r\r0E-07\r \r}\r'
	const char* json = "{ \n\"\":  \r[\n],\r\r\n\"\\fT]\" :\t\n\n0.08 \n\n,   \r\"]\" \t:\t\"OM\\\"\\n\"\r\n, \"\\f\\\"\\t\\n~\\fF\":\r\r0E-07\r \r}\r";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\":  \\r[\\n],\\r\\r\\n\\\"\\\\fT]\\\" :\\t\\n\\n0.08 \\n\\n,   \\r\\\"]\\\" \\t:\\t\\\"OM\\\\\\\"\\\\n\\\"\\r\\n, \\\"\\\\f\\\\\\\"\\\\t\\\\n~\\\\fF\\\":\\r\\r0E-07\\r \\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f\"\t\n~\fF' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\"\t\n~\fF");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// ']' = 'OM\"\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("OM\"\n", cJSON_string(child));
	}
	{
		// '\fT]' = '0.08'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fT]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.08, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_212a0ad78d4aea4674464cf4c86f73cb) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\r{\n\t\"\"\t\t:\"e\" \t \t\n, \n\n\t\n\r\"\\t\":\rtrue\r \r\n\r\t,\r \n \t\"\\r\\rGQ\":\ntrue\r\r\n}\r \t'
	const char* json = "\n\r{\n\t\"\"\t\t:\"e\" \t \t\n, \n\n\t\n\r\"\\t\":\rtrue\r \r\n\r\t,\r \n \t\"\\r\\rGQ\":\ntrue\r\r\n}\r \t";
	std::cerr << "Plain JSON string from model: " << "\\n\\r{\\n\\t\\\"\\\"\\t\\t:\\\"e\\\" \\t \\t\\n, \\n\\n\\t\\n\\r\\\"\\\\t\\\":\\rtrue\\r \\r\\n\\r\\t,\\r \\n \\t\\\"\\\\r\\\\rGQ\\\":\\ntrue\\r\\r\\n}\\r \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'e'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("e", cJSON_string(child));
	}
	{
		// '\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\r\rGQ' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\rGQ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a471209b28ac7d38443ed2f90c1a6d02) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' \r\n{\n \"\" \r :\t\t \"\\\"F<\\t\"}\r\t\t'
	const char* json = " \r\n{\n \"\" \r :\t\t \"\\\"F<\\t\"}\r\t\t";
	std::cerr << "Plain JSON string from model: " << " \\r\\n{\\n \\\"\\\" \\r :\\t\\t \\\"\\\\\\\"F<\\\\t\\\"}\\r\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\"F<\t'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"F<\t", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e1f118853532a59cff26da731ac2ee93) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\r\r\n\"\" \n:50.076023E+0}'
	const char* json = " {\r\r\n\"\" \n:50.076023E+0}";
	std::cerr << "Plain JSON string from model: " << " {\\r\\r\\n\\\"\\\" \\n:50.076023E+0}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '50.076023'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(50.076023, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5ec515764766d0362530e325c47a4c28) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t\n\t{\n\n  \"\\nP\"\n\r\n:\tnull ,\"\\f*\":\n\r true\n\t\n\r}'
	const char* json = "\t\n\t{\n\n  \"\\nP\"\n\r\n:\tnull ,\"\\f*\":\n\r true\n\t\n\r}";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\t{\\n\\n  \\\"\\\\nP\\\"\\n\\r\\n:\\tnull ,\\\"\\\\f*\\\":\\n\\r true\\n\\t\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f*' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f*");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\nP' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nP");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_424e606190746793acac20e5546d9f1c) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\"\"\t\r\r:\n\r { }\t\n\t}'
	const char* json = "{\n\"\"\t\r\r:\n\r { }\t\n\t}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\"\\t\\r\\r:\\n\\r { }\\t\\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_269b938c31d25c4586f448fa5b2709a2) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\r{\"\"\n:\r{}\t\t\t}  \r'
	const char* json = "\r\r{\"\"\n:\r{}\t\t\t}  \r";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\\"\\\"\\n:\\r{}\\t\\t\\t}  \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_61e2335ecd01bd626b5e49cf76e350b5) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{ \n\r\n\"l\\\\Q\\\\5\" \n:false\r, \"\\/\" \n\t:\ntrue\r\r\t\n\t,\t \"\\t\" \n:null\t  \n,\n\n\n \"0k\":0E+0266\t\n\t}'
	const char* json = "\r{ \n\r\n\"l\\\\Q\\\\5\" \n:false\r, \"\\/\" \n\t:\ntrue\r\r\t\n\t,\t \"\\t\" \n:null\t  \n,\n\n\n \"0k\":0E+0266\t\n\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\n\\r\\n\\\"l\\\\\\\\Q\\\\\\\\5\\\" \\n:false\\r, \\\"\\\\/\\\" \\n\\t:\\ntrue\\r\\r\\t\\n\\t,\\t \\\"\\\\t\\\" \\n:null\\t  \\n,\\n\\n\\n \\\"0k\\\":0E+0266\\t\\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '0k' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "0k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// 'l\\Q\\5' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "l\\Q\\5");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0b26a08ec257a9c6fbb9f13a0e44d1f5) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{\t\r\"0E\\/\\b\\b\\\"\"\r\r:{}\n\n\n,\r\t\n \"\":\"\\/\"\n\t ,\r\r\t\"\\r)\\t\"\n\r\t :\t{}\r\t}'
	const char* json = "\t{\t\r\"0E\\/\\b\\b\\\"\"\r\r:{}\n\n\n,\r\t\n \"\":\"\\/\"\n\t ,\r\r\t\"\\r)\\t\"\n\r\t :\t{}\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\r\\\"0E\\\\/\\\\b\\\\b\\\\\\\"\\\"\\r\\r:{}\\n\\n\\n,\\r\\t\\n \\\"\\\":\\\"\\\\/\\\"\\n\\t ,\\r\\r\\t\\\"\\\\r)\\\\t\\\"\\n\\r\\t :\\t{}\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '/'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("/", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4abb660bf066d78b9f2bb7c440310335) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{  \t\"=\"\t\n\n:\t-0\r\r, \r\"\"\t:null\r\t\n}'
	const char* json = "{  \t\"=\"\t\n\n:\t-0\r\r, \r\"\"\t:null\r\t\n}";
	std::cerr << "Plain JSON string from model: " << "{  \\t\\\"=\\\"\\t\\n\\n:\\t-0\\r\\r, \\r\\\"\\\"\\t:null\\r\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '=' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4699fcf0924c2d5e29687091197048c6) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\t\t \r \r\"&?1g|S\" : \t\r\"\\n\"\n}'
	const char* json = "\r{\t\t \r \r\"&?1g|S\" : \t\r\"\\n\"\n}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\t \\r \\r\\\"&?1g|S\\\" : \\t\\r\\\"\\\\n\\\"\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '&?1g|S' = '\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "&?1g|S");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_708214fb3f83a781418259a63517a8ab) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"f\"\r:   -149.0\n} '
	const char* json = "{\"f\"\r:   -149.0\n} ";
	std::cerr << "Plain JSON string from model: " << "{\\\"f\\\"\\r:   -149.0\\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'f' = '-149.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-149.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b1d5a675ded8f5f9d37af5716317d292) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \"\\rj\"\r\t:null\r\r\t }\t\r'
	const char* json = "{ \"\\rj\"\r\t:null\r\r\t }\t\r";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\rj\\\"\\r\\t:null\\r\\r\\t }\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\rj' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\rj");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a6c892738b75a3fb016fd40d9f76a020) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r \t\t\"\" \n:\t[ \t\r\n\r\nnull\n]\t\t\n,\"\\/:\"\n:\n null\t\t\r,\"\\\"F\\\"7\\b\":\r\r\r\"|\"\n }'
	const char* json = "{\r \t\t\"\" \n:\t[ \t\r\n\r\nnull\n]\t\t\n,\"\\/:\"\n:\n null\t\t\r,\"\\\"F\\\"7\\b\":\r\r\r\"|\"\n }";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t\\t\\\"\\\" \\n:\\t[ \\t\\r\\n\\r\\nnull\\n]\\t\\t\\n,\\\"\\\\/:\\\"\\n:\\n null\\t\\t\\r,\\\"\\\\\\\"F\\\\\\\"7\\\\b\\\":\\r\\r\\r\\\"|\\\"\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '/:' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/:");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\"F\"7\b' = '|'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"F\"7\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("|", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bac419bafa4717cebf97a7e5e6158912) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n  \t\"T\\t\"\n\n:{\t\n\n\"\\r\\\"\\/E'\"\r\n:false,\t\r \"\\/}\"   \n:\r \ttrue}\t,\"\"  \n:\n[[ null\n\r\r,\t false ,null\r  ]\t\r\n] \n}\t'
	const char* json = "{\n  \t\"T\\t\"\n\n:{\t\n\n\"\\r\\\"\\/E'\"\r\n:false,\t\r \"\\/}\"   \n:\r \ttrue}\t,\"\"  \n:\n[[ null\n\r\r,\t false ,null\r  ]\t\r\n] \n}\t";
	std::cerr << "Plain JSON string from model: " << "{\\n  \\t\\\"T\\\\t\\\"\\n\\n:{\\t\\n\\n\\\"\\\\r\\\\\\\"\\\\/E'\\\"\\r\\n:false,\\t\\r \\\"\\\\/}\\\"   \\n:\\r \\ttrue}\\t,\\\"\\\"  \\n:\\n[[ null\\n\\r\\r,\\t false ,null\\r  ]\\t\\r\\n] \\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0:0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':0:1 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':0:2 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'T\t':'/}' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "T\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'T\t':'\r\"/E'' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "T\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\"/E'");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ebc00e0fff00bd4a2b896f2fbf7abe13) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{ \t \"\\\\\"\t\n:\t\n[ true\t,  \"\"\r, [] ,\r\r true\n\n], \r\n \r\"\\\\?\\b\": \r\t\n{} \n\n}'
	const char* json = "\t{ \t \"\\\\\"\t\n:\t\n[ true\t,  \"\"\r, [] ,\r\r true\n\n], \r\n \r\"\\\\?\\b\": \r\t\n{} \n\n}";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\t \\\"\\\\\\\\\\\"\\t\\n:\\t\\n[ true\\t,  \\\"\\\"\\r, [] ,\\r\\r true\\n\\n], \\r\\n \\r\\\"\\\\\\\\?\\\\b\\\": \\r\\t\\n{} \\n\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\':0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\\':1 = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\\':3 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 3);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e453d7dddd3f16074da60496ad5bbdd3) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\r\n\n  \"y\\r\\\"\\b\"  :\n\t\ntrue\r\n\r,\" \"\n :false \t\r} \r\n'
	const char* json = "{\r\r\n\n  \"y\\r\\\"\\b\"  :\n\t\ntrue\r\n\r,\" \"\n :false \t\r} \r\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\n\\n  \\\"y\\\\r\\\\\\\"\\\\b\\\"  :\\n\\t\\ntrue\\r\\n\\r,\\\" \\\"\\n :false \\t\\r} \\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ' ' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'y\r\"\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "y\r\"\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_55f48d2caa14f401af713c28bd5f16fd) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' \t {\t\t\r\n \"\\t\\\"\":false\n, \r\r\n\t\n\r\"\"\t:{\n\n\t\n\"s3\":\rnull }\t\n \r}\n'
	const char* json = " \t {\t\t\r\n \"\\t\\\"\":false\n, \r\r\n\t\n\r\"\"\t:{\n\n\t\n\"s3\":\rnull }\t\n \r}\n";
	std::cerr << "Plain JSON string from model: " << " \\t {\\t\\t\\r\\n \\\"\\\\t\\\\\\\"\\\":false\\n, \\r\\r\\n\\t\\n\\r\\\"\\\"\\t:{\\n\\n\\t\\n\\\"s3\\\":\\rnull }\\t\\n \\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'s3' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "s3");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\t\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ffd5d437f23d3c530bfa04d15dfd767b) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' \n{\t\"b\\tM\\r\\/\\b\\/\":\"tA[n\"\n}\r'
	const char* json = " \n{\t\"b\\tM\\r\\/\\b\\/\":\"tA[n\"\n}\r";
	std::cerr << "Plain JSON string from model: " << " \\n{\\t\\\"b\\\\tM\\\\r\\\\/\\\\b\\\\/\\\":\\\"tA[n\\\"\\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'b\tM\r/\b/' = 'tA[n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "b\tM\r/\b/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("tA[n", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e7b087ba543134db6f821d306d78b0df) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t  {\r \n\r\"\"\t \n\n\t:\r{ \r\t\n\"\\t\\t\" \n\n:\"\\\\&L\"   ,\t\n\r\n\"}\\/i\"\t:1\n\n}\r\n} '
	const char* json = "\t  {\r \n\r\"\"\t \n\n\t:\r{ \r\t\n\"\\t\\t\" \n\n:\"\\\\&L\"   ,\t\n\r\n\"}\\/i\"\t:1\n\n}\r\n} ";
	std::cerr << "Plain JSON string from model: " << "\\t  {\\r \\n\\r\\\"\\\"\\t \\n\\n\\t:\\r{ \\r\\t\\n\\\"\\\\t\\\\t\\\" \\n\\n:\\\"\\\\\\\\&L\\\"   ,\\t\\n\\r\\n\\\"}\\\\/i\\\"\\t:1\\n\\n}\\r\\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\t\t' = '\\&L'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\&L", cJSON_string(child));
	}
	{
		// '':'}/i' = '1'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}/i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(1, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5acbc25081c2a83ffc46696ff40aae41) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n\r\t\"aH\"\t:\nnull}'
	const char* json = "{\n\n\r\t\"aH\"\t:\nnull}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\r\\t\\\"aH\\\"\\t:\\nnull}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'aH' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "aH");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a65ea942d00aff10f765f415ac0061f4) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\n\r\r\"#\" \n  \n :\n\r{\"\"\t:null\n\t}\n}\n\n\t'
	const char* json = "{\t\n\r\r\"#\" \n  \n :\n\r{\"\"\t:null\n\t}\n}\n\n\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\r\\r\\\"#\\\" \\n  \\n :\\n\\r{\\\"\\\"\\t:null\\n\\t}\\n}\\n\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '#':'' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f9056a4771122219deeb140e1a5231cf) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\n\r\r\t\n\"Z\\t\":{\" \\n\":\"\"\n\r}\t\t\n\n\n } '
	const char* json = "{\r\n\r\r\t\n\"Z\\t\":{\" \\n\":\"\"\n\r}\t\t\n\n\n } ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\r\\r\\t\\n\\\"Z\\\\t\\\":{\\\" \\\\n\\\":\\\"\\\"\\n\\r}\\t\\t\\n\\n\\n } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Z\t':' \n' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Z\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " \n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1b639b19564b62e4cc2cb0cca6c7d567) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r \"\"\r:\n\rtrue}'
	const char* json = "{\r \"\"\r:\n\rtrue}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"\\\"\\r:\\n\\rtrue}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_68a9bff1889f04915753b9bc0965a909) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\n \"\\t\\b|\\b4\\b;8b\":null} \t'
	const char* json = "{\n\n \"\\t\\b|\\b4\\b;8b\":null} \t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n \\\"\\\\t\\\\b|\\\\b4\\\\b;8b\\\":null} \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t\b|\b4\b;8b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\b|\b4\b;8b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5bf35ce26ba27ea08f47692ac96bfa3e) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \n\"\"\r:\t\"U\\f\"\r \t}'
	const char* json = "{ \n\"\"\r:\t\"U\\f\"\r \t}";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\"\\r:\\t\\\"U\\\\f\\\"\\r \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'U\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("U\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_95c5a7b2d3f1a6c330155aad6f5e0aed) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\n\r \"\\/\\n\\bZ\\/\"\r:true\r}'
	const char* json = "{\n\r \"\\/\\n\\bZ\\/\"\r:true\r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r \\\"\\\\/\\\\n\\\\bZ\\\\/\\\"\\r:true\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\n\bZ/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\n\bZ/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a1273e20ea6ec974eca5730c553cdac9) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\t\r\t\n\t\t\r\r\"\\\"\\\"\\/\":30\n \r\t,\t \r\"\"\n:\n\r{\t}\r}\r'
	const char* json = "{\t\t\r\t\n\t\t\r\r\"\\\"\\\"\\/\":30\n \r\t,\t \r\"\"\n:\n\r{\t}\r}\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\r\\t\\n\\t\\t\\r\\r\\\"\\\\\\\"\\\\\\\"\\\\/\\\":30\\n \\r\\t,\\t \\r\\\"\\\"\\n:\\n\\r{\\t}\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"\"/' = '30'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\"/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(30, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_db5458d602676c3cda64fd019a6d2549) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\r{\t\t\t\"W\\\"\" \t\r:null  \n\r\t\n}'
	const char* json = "\n\r{\t\t\t\"W\\\"\" \t\r:null  \n\r\t\n}";
	std::cerr << "Plain JSON string from model: " << "\\n\\r{\\t\\t\\t\\\"W\\\\\\\"\\\" \\t\\r:null  \\n\\r\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'W\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "W\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_229cab7aebe03e464ac747b66a0d44e9) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n  \n\"r\\n\"\t\n: \n -2E+0\t \n\r}'
	const char* json = "{\n\n  \n\"r\\n\"\t\n: \n -2E+0\t \n\r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n  \\n\\\"r\\\\n\\\"\\t\\n: \\n -2E+0\\t \\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'r\n' = '-2.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "r\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-2.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_96f7cd02cc2106a8d1fd99135b97681f) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\t\"\"\r\t\n\t :false  }'
	const char* json = " {\t\"\"\r\t\n\t :false  }";
	std::cerr << "Plain JSON string from model: " << " {\\t\\\"\\\"\\r\\t\\n\\t :false  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fd5fc13bcae5b58caab62e80e952a96e) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{ \"\\f5\\/\"\r:\rnull\t,\t\"\"\n\t\r\r\n:false\t\t\n}\t '
	const char* json = "\t{ \"\\f5\\/\"\r:\rnull\t,\t\"\"\n\t\r\r\n:false\t\t\n}\t ";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\\"\\\\f5\\\\/\\\"\\r:\\rnull\\t,\\t\\\"\\\"\\n\\t\\r\\r\\n:false\\t\\t\\n}\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\f5/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f5/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_81c74bd51d8e93e9e0694257f6d71458) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\r\t{\t\n \n\r\"\\n\"\r:null\n \n\r\n,   \t\"\\\"\"\r\t:false \n\r}'
	const char* json = "\n\r\t{\t\n \n\r\"\\n\"\r:null\n \n\r\n,   \t\"\\\"\"\r\t:false \n\r}";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{\\t\\n \\n\\r\\\"\\\\n\\\"\\r:null\\n \\n\\r\\n,   \\t\\\"\\\\\\\"\\\"\\r\\t:false \\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1f9b7ddd696cbf248c518b7adb921c54) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\\n\"\n\t:{\r\"\\\\k\"\r\r\n:[\r0.0 \t,\t[\n-53E0 ],\t\r\"\",[]\r\n,null,true\r \t\n,\ntrue, []\n\t\t\n,\t\t\t\tnull\t\t, [\t[\n\r[\t]]\t]\t\n,[\n -45780,[] ,null,{ \"\\fP\"\t :\n\n{\n\n\"\\/\\r<\"\n\n: \r\"K8\"\n\r\r}\n\t}]  ]\t\n  ,\r\"I\\f\\\"\"\t\t: \r-0 \t}  }\t'
	const char* json = "{ \"\\n\"\n\t:{\r\"\\\\k\"\r\r\n:[\r0.0 \t,\t[\n-53E0 ],\t\r\"\",[]\r\n,null,true\r \t\n,\ntrue, []\n\t\t\n,\t\t\t\tnull\t\t, [\t[\n\r[\t]]\t]\t\n,[\n -45780,[] ,null,{ \"\\fP\"\t :\n\n{\n\n\"\\/\\r<\"\n\n: \r\"K8\"\n\r\r}\n\t}]  ]\t\n  ,\r\"I\\f\\\"\"\t\t: \r-0 \t}  }\t";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\n\\\"\\n\\t:{\\r\\\"\\\\\\\\k\\\"\\r\\r\\n:[\\r0.0 \\t,\\t[\\n-53E0 ],\\t\\r\\\"\\\",[]\\r\\n,null,true\\r \\t\\n,\\ntrue, []\\n\\t\\t\\n,\\t\\t\\t\\tnull\\t\\t, [\\t[\\n\\r[\\t]]\\t]\\t\\n,[\\n -45780,[] ,null,{ \\\"\\\\fP\\\"\\t :\\n\\n{\\n\\n\\\"\\\\/\\\\r<\\\"\\n\\n: \\r\\\"K8\\\"\\n\\r\\r}\\n\\t}]  ]\\t\\n  ,\\r\\\"I\\\\f\\\\\\\"\\\"\\t\\t: \\r-0 \\t}  }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n':'I\f\"' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "I\f\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\n':'\\k':0 = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '\n':'\\k':1:0 = '-53.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-53.0, cJSON_double(child));
	}
	{
		// '\n':'\\k':2 = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\n':'\\k':4 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 4);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\n':'\\k':5 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 5);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\n':'\\k':6 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 6);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\n':'\\k':8 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 8);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\n':'\\k':10:0 = '-45780'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 10);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-45780, cJSON_double(child));
	}
	{
		// '\n':'\\k':10:2 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 10);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\n':'\\k':10:3:'\fP':'/\r<' = 'K8'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 10);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 3);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fP");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\r<");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("K8", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1d675d9f6a78e6e8ebbdc320f26017e0) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\t\r\t\".l$\":\n\"\\r\" \t\r\n,\r\r\n\"\":\t\n \"\\n5\"\t}\t'
	const char* json = "\n{\t\r\t\".l$\":\n\"\\r\" \t\r\n,\r\r\n\"\":\t\n \"\\n5\"\t}\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\r\\t\\\".l$\\\":\\n\\\"\\\\r\\\" \\t\\r\\n,\\r\\r\\n\\\"\\\":\\t\\n \\\"\\\\n5\\\"\\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\n5'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n5", cJSON_string(child));
	}
	{
		// '.l$' = '\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ".l$");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d806e719e7aa362b213e7b352be45d7f) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\r\n{ \n \n\"h\"\t :\rtrue} \n'
	const char* json = "\t\r\n{ \n \n\"h\"\t :\rtrue} \n";
	std::cerr << "Plain JSON string from model: " << "\\t\\r\\n{ \\n \\n\\\"h\\\"\\t :\\rtrue} \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'h' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "h");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_84a2dc1024e4ceeaa314a38e6e0d233a) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\r\"\" : \t\"\\\")DG\\\"g\\\\\" \r,\r\n\"\\f\"\r:\rnull\t}\r \r'
	const char* json = "{\t\r\"\" : \t\"\\\")DG\\\"g\\\\\" \r,\r\n\"\\f\"\r:\rnull\t}\r \r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"\\\" : \\t\\\"\\\\\\\")DG\\\\\\\"g\\\\\\\\\\\" \\r,\\r\\n\\\"\\\\f\\\"\\r:\\rnull\\t}\\r \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\")DG\"g\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\")DG\"g\\", cJSON_string(child));
	}
	{
		// '\f' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7b45898d76879666e7d4737b2ce20b34) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n \t\"U\"\t\r:[  ]\n, \t\"\\/\\f[\"\n:\nfalse}\t'
	const char* json = "{\n \t\"U\"\t\r:[  ]\n, \t\"\\/\\f[\"\n:\nfalse}\t";
	std::cerr << "Plain JSON string from model: " << "{\\n \\t\\\"U\\\"\\t\\r:[  ]\\n, \\t\\\"\\\\/\\\\f[\\\"\\n:\\nfalse}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\f[' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\f[");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7af02124441f2deb4ca2918376140cbd) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\t\n \t\"\" \t\n\n\n:false\n \n\n }'
	const char* json = "\r{\t\n \t\"\" \t\n\n\n:false\n \n\n }";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\n \\t\\\"\\\" \\t\\n\\n\\n:false\\n \\n\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_515238c59e9bd1a1d9bbb797c69b77da) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\n\t\n\"\\b\"\r:\t\t\r[] , \n\t \t\"&\\fe\"  \n:{ }\r,\r \"\"\r\t\r\r :false}'
	const char* json = "\n{\n\t\n\"\\b\"\r:\t\t\r[] , \n\t \t\"&\\fe\"  \n:{ }\r,\r \"\"\r\t\r\r :false}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\t\\n\\\"\\\\b\\\"\\r:\\t\\t\\r[] , \\n\\t \\t\\\"&\\\\fe\\\"  \\n:{ }\\r,\\r \\\"\\\"\\r\\t\\r\\r :false}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3cc07c04b9b2fb1f2fdf81ef2708bc3c) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"\\/\":\rnull \r}'
	const char* json = "{\"\\/\":\rnull \r}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\/\\\":\\rnull \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e6dff2419ff9966f11d3da22b72714b7) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t  {\r\n \t\n\t\"\"\r\t:\t-0\t\r\r,\t\r\t \n\n\n\"MJ\"\r\n:\n\"\\t\\t\\/\"\r,\r \r\"ra%\"\r:\t\"d\\r\\\"\\b\\b\"\r,\n\"\\nd\":\"o+\"\n\r\n\t  ,\r\t \"6i\" \r\r :\r -0.0e0503066}\r'
	const char* json = "\t  {\r\n \t\n\t\"\"\r\t:\t-0\t\r\r,\t\r\t \n\n\n\"MJ\"\r\n:\n\"\\t\\t\\/\"\r,\r \r\"ra%\"\r:\t\"d\\r\\\"\\b\\b\"\r,\n\"\\nd\":\"o+\"\n\r\n\t  ,\r\t \"6i\" \r\r :\r -0.0e0503066}\r";
	std::cerr << "Plain JSON string from model: " << "\\t  {\\r\\n \\t\\n\\t\\\"\\\"\\r\\t:\\t-0\\t\\r\\r,\\t\\r\\t \\n\\n\\n\\\"MJ\\\"\\r\\n:\\n\\\"\\\\t\\\\t\\\\/\\\"\\r,\\r \\r\\\"ra%\\\"\\r:\\t\\\"d\\\\r\\\\\\\"\\\\b\\\\b\\\"\\r,\\n\\\"\\\\nd\\\":\\\"o+\\\"\\n\\r\\n\\t  ,\\r\\t \\\"6i\\\" \\r\\r :\\r -0.0e0503066}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\nd' = 'o+'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nd");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("o+", cJSON_string(child));
	}
	{
		// 'ra%' = 'd\r\"\b\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ra%");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("d\r\"\b\b", cJSON_string(child));
	}
	{
		// '6i' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "6i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// 'MJ' = '\t\t/'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "MJ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t\t/", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5921e759a79238ef584d387cf8b15f10) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\t\n\"\\\\\\\"\\t\"\r: \n\t{\r\t \r\"w\\f\\/\\t\"\t\t\n:true\t\t\t\n\t }, \n\t\t \"\"\n:false\t\t,\n\n\n \"\\fN\":\"?\", \r\t\"o\"\t\n\t:\nfalse\r\n\r\t \n} \n\t'
	const char* json = " {\t\n\"\\\\\\\"\\t\"\r: \n\t{\r\t \r\"w\\f\\/\\t\"\t\t\n:true\t\t\t\n\t }, \n\t\t \"\"\n:false\t\t,\n\n\n \"\\fN\":\"?\", \r\t\"o\"\t\n\t:\nfalse\r\n\r\t \n} \n\t";
	std::cerr << "Plain JSON string from model: " << " {\\t\\n\\\"\\\\\\\\\\\\\\\"\\\\t\\\"\\r: \\n\\t{\\r\\t \\r\\\"w\\\\f\\\\/\\\\t\\\"\\t\\t\\n:true\\t\\t\\t\\n\\t }, \\n\\t\\t \\\"\\\"\\n:false\\t\\t,\\n\\n\\n \\\"\\\\fN\\\":\\\"?\\\", \\r\\t\\\"o\\\"\\t\\n\\t:\\nfalse\\r\\n\\r\\t \\n} \\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\"\t':'w\f/\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\"\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "w\f/\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\fN' = '?'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fN");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("?", cJSON_string(child));
	}
	{
		// 'o' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "o");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_99abc1ad155f26aa3355e955b1510788) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\r\t\n\t\"I\\\\\"\t\t\n : \n8.0\n\r\n}'
	const char* json = "\n{\r\t\n\t\"I\\\\\"\t\t\n : \n8.0\n\r\n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\t\\n\\t\\\"I\\\\\\\\\\\"\\t\\t\\n : \\n8.0\\n\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'I\\' = '8.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "I\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(8.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7074de9c638360c0a018d0c63620194b) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' { \t\t\n\n\"\":\t[\r] \n\r\n,\r\r\n\r\"\\n\"\t\t : null\t}'
	const char* json = " { \t\t\n\n\"\":\t[\r] \n\r\n,\r\r\n\r\"\\n\"\t\t : null\t}";
	std::cerr << "Plain JSON string from model: " << " { \\t\\t\\n\\n\\\"\\\":\\t[\\r] \\n\\r\\n,\\r\\r\\n\\r\\\"\\\\n\\\"\\t\\t : null\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cbc4711be42edbf85add22bb1d9087b5) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\n\n\n\n\"R\"\t :0.0,\n\r\t\"k\"\t  :\"\\fs\\\"\\t\\n}T*\\\"\" ,\"\"\r:\t\ntrue\n\r, \n\n\t\n\n\r\"`\"\r\r\r:null ,\t\t  \"\\/\\/RB\"\n \n: \r{\r\n\"\\r\":\r\t -0, \"!\\r\" \r:\n\nnull\t}\r\r} \n\t'
	const char* json = "\r{\n\n\n\n\"R\"\t :0.0,\n\r\t\"k\"\t  :\"\\fs\\\"\\t\\n}T*\\\"\" ,\"\"\r:\t\ntrue\n\r, \n\n\t\n\n\r\"`\"\r\r\r:null ,\t\t  \"\\/\\/RB\"\n \n: \r{\r\n\"\\r\":\r\t -0, \"!\\r\" \r:\n\nnull\t}\r\r} \n\t";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\n\\n\\n\\\"R\\\"\\t :0.0,\\n\\r\\t\\\"k\\\"\\t  :\\\"\\\\fs\\\\\\\"\\\\t\\\\n}T*\\\\\\\"\\\" ,\\\"\\\"\\r:\\t\\ntrue\\n\\r, \\n\\n\\t\\n\\n\\r\\\"`\\\"\\r\\r\\r:null ,\\t\\t  \\\"\\\\/\\\\/RB\\\"\\n \\n: \\r{\\r\\n\\\"\\\\r\\\":\\r\\t -0, \\\"!\\\\r\\\" \\r:\\n\\nnull\\t}\\r\\r} \\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '`' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "`");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'k' = '\fs\"\t\n}T*\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "k");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\fs\"\t\n}T*\"", cJSON_string(child));
	}
	{
		// 'R' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "R");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '//RB':'!\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "//RB");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "!\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '//RB':'\r' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "//RB");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_03bb0e282b7839ef0f98e81861ee6c32) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t \n{\t \r\n\"\"\n:-0E+0\r}'
	const char* json = "\t \n{\t \r\n\"\"\n:-0E+0\r}";
	std::cerr << "Plain JSON string from model: " << "\\t \\n{\\t \\r\\n\\\"\\\"\\n:-0E+0\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a1441588d9e61bd515f3dfdd0316a675) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' \t{\n\t\n\r\"\"\n\t\n:\n\n\n\n[{\n }\t \t]\r\r\n} \r'
	const char* json = " \t{\n\t\n\r\"\"\n\t\n:\n\n\n\n[{\n }\t \t]\r\r\n} \r";
	std::cerr << "Plain JSON string from model: " << " \\t{\\n\\t\\n\\r\\\"\\\"\\n\\t\\n:\\n\\n\\n\\n[{\\n }\\t \\t]\\r\\r\\n} \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_a296f9f2d3b940a80219a5546c571ccb) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r \n\"\\\\\"   \n: null\n\t\r\n\r}'
	const char* json = "{\r \n\"\\\\\"   \n: null\n\t\r\n\r}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\n\\\"\\\\\\\\\\\"   \\n: null\\n\\t\\r\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_eff595bdb84bea63c7ba5cbbabfdfaef) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r \r\"VA\\tf4\\r\"\n:null\n\t} '
	const char* json = "{\r \r\"VA\\tf4\\r\"\n:null\n\t} ";
	std::cerr << "Plain JSON string from model: " << "{\\r \\r\\\"VA\\\\tf4\\\\r\\\"\\n:null\\n\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'VA\tf4\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "VA\tf4\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f54a9e86b11e4451446bf27c4c02a701) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\\n\\f\":\rnull\n\r} '
	const char* json = "{\"\\n\\f\":\rnull\n\r} ";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\n\\\\f\\\":\\rnull\\n\\r} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n\f' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_095bc7ebdc90d7df99e02da4c43921a8) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t\t \n\"\\b\\r=\\\\\\r\\f+)\\n\":\n\t \n\ntrue\r \n\t\t\n}'
	const char* json = "{\t\t \n\"\\b\\r=\\\\\\r\\f+)\\n\":\n\t \n\ntrue\r \n\t\t\n}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t \\n\\\"\\\\b\\\\r=\\\\\\\\\\\\r\\\\f+)\\\\n\\\":\\n\\t \\n\\ntrue\\r \\n\\t\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\r=\\\r\f+)\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\r=\\\r\f+)\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bb1ddf0ca285363216c2c00b50a5e4e4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t \r{\n \"\"  \t:{\t   \t\"O\" \r\n: \t false\r\t  , \t\r\r\n\"\\\"\":0.0660E0\n\r\n}\r \r,\t\"k\\t\\\"E\\rr\\/:6~\"\t\r:\t-491E+0 }'
	const char* json = "\t \r{\n \"\"  \t:{\t   \t\"O\" \r\n: \t false\r\t  , \t\r\r\n\"\\\"\":0.0660E0\n\r\n}\r \r,\t\"k\\t\\\"E\\rr\\/:6~\"\t\r:\t-491E+0 }";
	std::cerr << "Plain JSON string from model: " << "\\t \\r{\\n \\\"\\\"  \\t:{\\t   \\t\\\"O\\\" \\r\\n: \\t false\\r\\t  , \\t\\r\\r\\n\\\"\\\\\\\"\\\":0.0660E0\\n\\r\\n}\\r \\r,\\t\\\"k\\\\t\\\\\\\"E\\\\rr\\\\/:6~\\\"\\t\\r:\\t-491E+0 }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\"' = '0.066'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.066, cJSON_double(child));
	}
	{
		// '':'O' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "O");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'k\t\"E\rr/:6~' = '-491.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "k\t\"E\rr/:6~");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-491.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ae6587c06283813e30ee44ab9df55162) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\r\"\":\t\t \"\\n\\f\"  \n\t}\t'
	const char* json = "{\n\r\"\":\t\t \"\\n\\f\"  \n\t}\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\\"\\\":\\t\\t \\\"\\\\n\\\\f\\\"  \\n\\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\n\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_93cf730adaf65977e5602e0b252c4053) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\n\n{\t\"Gw\\rv\"\t:0.0e+090\n,\n \t\r\"\\/qFKzw\\\"\\r\\t\\\\\"\t\n\t:\n\r{} ,\r\r\"j\"\n:\n\n\rfalse\n\n\t}\t'
	const char* json = "\t\n\n{\t\"Gw\\rv\"\t:0.0e+090\n,\n \t\r\"\\/qFKzw\\\"\\r\\t\\\\\"\t\n\t:\n\r{} ,\r\r\"j\"\n:\n\n\rfalse\n\n\t}\t";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\n{\\t\\\"Gw\\\\rv\\\"\\t:0.0e+090\\n,\\n \\t\\r\\\"\\\\/qFKzw\\\\\\\"\\\\r\\\\t\\\\\\\\\\\"\\t\\n\\t:\\n\\r{} ,\\r\\r\\\"j\\\"\\n:\\n\\n\\rfalse\\n\\n\\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Gw\rv' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Gw\rv");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// 'j' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "j");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2240b28cfb0026ed25cc1ad1e673d4ee) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n\n{ \"\"\n  :{}, \t\r\"]\"\t\n:[\t]\t\n} '
	const char* json = "\n\n{ \"\"\n  :{}, \t\r\"]\"\t\n:[\t]\t\n} ";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{ \\\"\\\"\\n  :{}, \\t\\r\\\"]\\\"\\t\\n:[\\t]\\t\\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_b8475d693259282066712ecae02b465d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\t \t \n \"\"\r :\n\n{\t\r\r\t\"\\r?\\\\!f\\\"#\"\r:false\r\n}\t }'
	const char* json = "\n{\t \t \n \"\"\r :\n\n{\t\r\r\t\"\\r?\\\\!f\\\"#\"\r:false\r\n}\t }";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t \\t \\n \\\"\\\"\\r :\\n\\n{\\t\\r\\r\\t\\\"\\\\r?\\\\\\\\!f\\\\\\\"#\\\"\\r:false\\r\\n}\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\r?\\!f\"#' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r?\\!f\"#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e8e078a87a8353eb0e87646c225cfde5) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\r\r\"\" \n:null\t}\n\n '
	const char* json = "{\n\r\r\"\" \n:null\t}\n\n ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\r\\\"\\\" \\n:null\\t}\\n\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6c57839d427319f6bec645a35811d6ef) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \r\n\n\"x\"\n\t\n: \n\tfalse\r\n, \r\r\n\"\":false\n, \n\"\\\\\" \t:false \t}\n'
	const char* json = "{ \r\n\n\"x\"\n\t\n: \n\tfalse\r\n, \r\r\n\"\":false\n, \n\"\\\\\" \t:false \t}\n";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\n\\n\\\"x\\\"\\n\\t\\n: \\n\\tfalse\\r\\n, \\r\\r\\n\\\"\\\":false\\n, \\n\\\"\\\\\\\\\\\" \\t:false \\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'x' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "x");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_61a7cdf5e790cb744620cd8d06d00c2d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {  \"'\" \r\t:\t\r{\r\t\"\"\t:\r[null  \t] , \t\"7  T8B\"  \r\n:\n\n null \r\n }\t\t\t,\t\t\"?zgcm\"\t\t:\n \"\\\\\\\"y\", \r\t\"`y\"\r:true}'
	const char* json = " {  \"'\" \r\t:\t\r{\r\t\"\"\t:\r[null  \t] , \t\"7  T8B\"  \r\n:\n\n null \r\n }\t\t\t,\t\t\"?zgcm\"\t\t:\n \"\\\\\\\"y\", \r\t\"`y\"\r:true}";
	std::cerr << "Plain JSON string from model: " << " {  \\\"'\\\" \\r\\t:\\t\\r{\\r\\t\\\"\\\"\\t:\\r[null  \\t] , \\t\\\"7  T8B\\\"  \\r\\n:\\n\\n null \\r\\n }\\t\\t\\t,\\t\\t\\\"?zgcm\\\"\\t\\t:\\n \\\"\\\\\\\\\\\\\\\"y\\\", \\r\\t\\\"`y\\\"\\r:true}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '`y' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "`y");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// ''':'':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "'");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// ''':'7  T8B' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "'");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "7  T8B");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '?zgcm' = '\\\"y'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "?zgcm");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\\"y", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4e557c5e1135d8ccf8c065448fef373d) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\"\\t\":\t{\r\n}\t\r,\r\r\r\"\\r\\r\\t\"\r:\r\r\tnull\r\r}'
	const char* json = "{\t\"\\t\":\t{\r\n}\t\r,\r\r\r\"\\r\\r\\t\"\r:\r\r\tnull\r\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\t\\\":\\t{\\r\\n}\\t\\r,\\r\\r\\r\\\"\\\\r\\\\r\\\\t\\\"\\r:\\r\\r\\tnull\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r\r\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\r\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_aa17f62a389f35e22e29f795cbc5958f) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r\r{\r\t\r\"Z\"\r\n\r:  true \r \r,\r\r\t\r\"u\"\r\n :\n\"I.\\\\1\"\r\t \n\r,\n\n\r\n\r\r\"\\bw\"\n  :\"$k\" }'
	const char* json = "\r\r{\r\t\r\"Z\"\r\n\r:  true \r \r,\r\r\t\r\"u\"\r\n :\n\"I.\\\\1\"\r\t \n\r,\n\n\r\n\r\r\"\\bw\"\n  :\"$k\" }";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\r\\t\\r\\\"Z\\\"\\r\\n\\r:  true \\r \\r,\\r\\r\\t\\r\\\"u\\\"\\r\\n :\\n\\\"I.\\\\\\\\1\\\"\\r\\t \\n\\r,\\n\\n\\r\\n\\r\\r\\\"\\\\bw\\\"\\n  :\\\"$k\\\" }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Z' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'u' = 'I.\\1'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "u");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("I.\\1", cJSON_string(child));
	}
	{
		// '\bw' = '$k'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bw");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("$k", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_71c783f7212f3aadce89666f9026a5e1) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\t \"\"\n\r:null } \r\r'
	const char* json = " {\t \"\"\n\r:null } \r\r";
	std::cerr << "Plain JSON string from model: " << " {\\t \\\"\\\"\\n\\r:null } \\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5f1cc6d36bffc544318aaa18e7a97bac) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{\t\n \"\\b\" \r\r:\t true}\r\n\n'
	const char* json = "\t{\t\n \"\\b\" \r\r:\t true}\r\n\n";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\n \\\"\\\\b\\\" \\r\\r:\\t true}\\r\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5650cb06eb9ecb14ab136e1224f6bcd7) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"\\f\\tT\"\t\n :\rnull\t }\r\n\t'
	const char* json = "{\"\\f\\tT\"\t\n :\rnull\t }\r\n\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\f\\\\tT\\\"\\t\\n :\\rnull\\t }\\r\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f\tT' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\tT");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_642c1b30ac5ad63b634fb8deefa11a6c) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\n\r\"\\\"K\\\\\\/\"\r\t:false}\r'
	const char* json = "\r{\n\r\"\\\"K\\\\\\/\"\r\t:false}\r";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\r\\\"\\\\\\\"K\\\\\\\\\\\\/\\\"\\r\\t:false}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"K\\/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"K\\/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0c67770d869ba5501e222bbe25b7362d) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \n\t\n\n \"@\"\n\t \r:\n\t\n null} '
	const char* json = "{ \n\t\n\n \"@\"\n\t \r:\n\t\n null} ";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\t\\n\\n \\\"@\\\"\\n\\t \\r:\\n\\t\\n null} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '@' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "@");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_97725eb973c1712e0011c6784c63a631) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \r\t\":\\t\"\n\r\n:-0.0\n}'
	const char* json = "{ \r\t\":\\t\"\n\r\n:-0.0\n}";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\t\\\":\\\\t\\\"\\n\\r\\n:-0.0\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ':\t' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ":\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d6e1e9bc4367f434af93b5ec34396df4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' \t\t{ \r\n\"1\\\\\\/;?\"\t\r\n: \r -0\r\r\t  , \t \t\"\" :4\n,\n \"pT\"\r: \rfalse\t  ,\t\r\n\t\"\\tY\"\n\n:-0\n\t,\r\"\\b\"\r\n:\"A\\\\@-2J\"\n\n}\r\r'
	const char* json = " \t\t{ \r\n\"1\\\\\\/;?\"\t\r\n: \r -0\r\r\t  , \t \t\"\" :4\n,\n \"pT\"\r: \rfalse\t  ,\t\r\n\t\"\\tY\"\n\n:-0\n\t,\r\"\\b\"\r\n:\"A\\\\@-2J\"\n\n}\r\r";
	std::cerr << "Plain JSON string from model: " << " \\t\\t{ \\r\\n\\\"1\\\\\\\\\\\\/;?\\\"\\t\\r\\n: \\r -0\\r\\r\\t  , \\t \\t\\\"\\\" :4\\n,\\n \\\"pT\\\"\\r: \\rfalse\\t  ,\\t\\r\\n\\t\\\"\\\\tY\\\"\\n\\n:-0\\n\\t,\\r\\\"\\\\b\\\"\\r\\n:\\\"A\\\\\\\\@-2J\\\"\\n\\n}\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '4'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(4, cJSON_double(child));
	}
	{
		// '\tY' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\tY");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '1\\/;?' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1\\/;?");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// 'pT' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "pT");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\b' = 'A\\@-2J'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("A\\@-2J", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_10be91fbec5f458f40c50251d30811d3) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\r\t\t\n\"\"\r:  -3E-096330 } '
	const char* json = "\r{\r\t\t\n\"\"\r:  -3E-096330 } ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\t\\t\\n\\\"\\\"\\r:  -3E-096330 } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3e26c918d38bbd42c79e01c52ded2f3e) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\t\r\t  \"\"\r \t\r :{ }\t\n,\t\t\r\r\n\"6\\\"\\f\\/\":\n{}\t\n,\r   \n\"?\\\\[ |[\"  :null}'
	const char* json = "{\r\t\r\t  \"\"\r \t\r :{ }\t\n,\t\t\r\r\n\"6\\\"\\f\\/\":\n{}\t\n,\r   \n\"?\\\\[ |[\"  :null}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\r\\t  \\\"\\\"\\r \\t\\r :{ }\\t\\n,\\t\\t\\r\\r\\n\\\"6\\\\\\\"\\\\f\\\\/\\\":\\n{}\\t\\n,\\r   \\n\\\"?\\\\\\\\[ |[\\\"  :null}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '?\\[ |[' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "?\\[ |[");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2a3a8c411c0ba0e2c15871b31bf06e3c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\"\\bn\"\t\t\t \n :null\r\r\r\r\r \t,\t\"\"\n:true,\n\t\r \"\\b*\\\\\"\t\n\r :false \r ,\"\\n\"\r\r:[] \t,\t \"\\/\\/?\":\t\r\n-8e+0\t , \"\\t\" :\rfalse}\n'
	const char* json = "\r{\"\\bn\"\t\t\t \n :null\r\r\r\r\r \t,\t\"\"\n:true,\n\t\r \"\\b*\\\\\"\t\n\r :false \r ,\"\\n\"\r\r:[] \t,\t \"\\/\\/?\":\t\r\n-8e+0\t , \"\\t\" :\rfalse}\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\\bn\\\"\\t\\t\\t \\n :null\\r\\r\\r\\r\\r \\t,\\t\\\"\\\"\\n:true,\\n\\t\\r \\\"\\\\b*\\\\\\\\\\\"\\t\\n\\r :false \\r ,\\\"\\\\n\\\"\\r\\r:[] \\t,\\t \\\"\\\\/\\\\/?\\\":\\t\\r\\n-8e+0\\t , \\\"\\\\t\\\" :\\rfalse}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\b*\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b*\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\bn' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bn");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '//?' = '-8.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "//?");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-8.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_61528c710eb812e339726bb5be36a971) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\n\"\"\t\n:\n\"e\\r|z-\" }\r'
	const char* json = "\t{\n\"\"\t\n:\n\"e\\r|z-\" }\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\\"\\\"\\t\\n:\\n\\\"e\\\\r|z-\\\" }\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'e\r|z-'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("e\r|z-", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5622fb18155fb87443b5892870cf2a89) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r  {\r\"\"\r: \nnull \r\n}\n'
	const char* json = "\r  {\r\"\"\r: \nnull \r\n}\n";
	std::cerr << "Plain JSON string from model: " << "\\r  {\\r\\\"\\\"\\r: \\nnull \\r\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3390209a32c5eb87b02037d0b8425738) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t \r\t\"Vb\\t\":\n[ ]\t\n\n ,\"\":[]\r }'
	const char* json = "{\t \r\t\"Vb\\t\":\n[ ]\t\n\n ,\"\":[]\r }";
	std::cerr << "Plain JSON string from model: " << "{\\t \\r\\t\\\"Vb\\\\t\\\":\\n[ ]\\t\\n\\n ,\\\"\\\":[]\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_6ba19498bf331868b425f56aed5d0dfb) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \r\n\t\t\n\"\\t\" :\t\"F\\/\" \t } '
	const char* json = "{ \r\n\t\t\n\"\\t\" :\t\"F\\/\" \t } ";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\n\\t\\t\\n\\\"\\\\t\\\" :\\t\\\"F\\\\/\\\" \\t } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'F/'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("F/", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b5a588d76799e46a7545305288f509d5) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' { \"\"\n\n\t:null\r}'
	const char* json = " { \"\"\n\n\t:null\r}";
	std::cerr << "Plain JSON string from model: " << " { \\\"\\\"\\n\\n\\t:null\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b389ab08e783a2d9e3637affb92da663) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n\"\\f\\f\" \n\t :{ \r\r \"\"\n\n\t :[\n \nfalse\t]  \r ,\n\t\r\t\n\"p\"\n:\r\nfalse\n\n\n,\n\n\" \\t\\\"\\f}\"\n  :null\t\n, \n\r \t\n\r\"\\n9n\"\t:\t \r \t\rfalse,\"k*\"\t\n :-9224e0}\r\r\t \t,\r \"\\\"\\f\\t\"\t \t:\n{\r\n \"\\/\\rTV\":null\r\r\n\r\r\t\r}\t}'
	const char* json = "{\n\n\"\\f\\f\" \n\t :{ \r\r \"\"\n\n\t :[\n \nfalse\t]  \r ,\n\t\r\t\n\"p\"\n:\r\nfalse\n\n\n,\n\n\" \\t\\\"\\f}\"\n  :null\t\n, \n\r \t\n\r\"\\n9n\"\t:\t \r \t\rfalse,\"k*\"\t\n :-9224e0}\r\r\t \t,\r \"\\\"\\f\\t\"\t \t:\n{\r\n \"\\/\\rTV\":null\r\r\n\r\r\t\r}\t}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\\"\\\\f\\\\f\\\" \\n\\t :{ \\r\\r \\\"\\\"\\n\\n\\t :[\\n \\nfalse\\t]  \\r ,\\n\\t\\r\\t\\n\\\"p\\\"\\n:\\r\\nfalse\\n\\n\\n,\\n\\n\\\" \\\\t\\\\\\\"\\\\f}\\\"\\n  :null\\t\\n, \\n\\r \\t\\n\\r\\\"\\\\n9n\\\"\\t:\\t \\r \\t\\rfalse,\\\"k*\\\"\\t\\n :-9224e0}\\r\\r\\t \\t,\\r \\\"\\\\\\\"\\\\f\\\\t\\\"\\t \\t:\\n{\\r\\n \\\"\\\\/\\\\rTV\\\":null\\r\\r\\n\\r\\r\\t\\r}\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f\f':'':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\f\f':'p' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "p");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\f\f':'\n9n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n9n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\f\f':' \t\"\f}' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " \t\"\f}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\f\f':'k*' = '-9224.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "k*");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-9224.0, cJSON_double(child));
	}
	{
		// '\"\f\t':'/\rTV' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\f\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\rTV");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d45041920c72934a031dff12b9a3f8c2) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\"f\"\r  \n :[]\t,\r\"M\\t\\t-\\t\"\r\t:\nnull\t\r\r} '
	const char* json = "{\t\"f\"\r  \n :[]\t,\r\"M\\t\\t-\\t\"\r\t:\nnull\t\r\r} ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"f\\\"\\r  \\n :[]\\t,\\r\\\"M\\\\t\\\\t-\\\\t\\\"\\r\\t:\\nnull\\t\\r\\r} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'M\t\t-\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "M\t\t-\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_69659f75b1b3223b89299945c3369108) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{  \"{n\\/\" \t:false\n}\t'
	const char* json = "\r{  \"{n\\/\" \t:false\n}\t";
	std::cerr << "Plain JSON string from model: " << "\\r{  \\\"{n\\\\/\\\" \\t:false\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '{n/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "{n/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cf128cefed295d4d6fe178ee29590bd6) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t \"\"  :[[\ttrue,\r-770E+0\t] ,null \r,\"A\\n\"   ,\nfalse\r \t \t \r]\t}'
	const char* json = "{\t \"\"  :[[\ttrue,\r-770E+0\t] ,null \r,\"A\\n\"   ,\nfalse\r \t \t \r]\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t \\\"\\\"  :[[\\ttrue,\\r-770E+0\\t] ,null \\r,\\\"A\\\\n\\\"   ,\\nfalse\\r \\t \\t \\r]\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0:0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':0:1 = '-770.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-770.0, cJSON_double(child));
	}
	{
		// '':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':2 = 'A\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("A\n", cJSON_string(child));
	}
	{
		// '':3 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 3);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4f437fb0f7f5acc35a2b4013a02fb220) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t \t\"h`\"\n\t\t\r \n:false,\t\r\"~\\n\"\r:  {\t\r \"\"\n\r\t: \r\rnull\n\r}, \r\r\t\r \"\\t\"\t:\ttrue\n}\t'
	const char* json = "{\t \t\"h`\"\n\t\t\r \n:false,\t\r\"~\\n\"\r:  {\t\r \"\"\n\r\t: \r\rnull\n\r}, \r\r\t\r \"\\t\"\t:\ttrue\n}\t";
	std::cerr << "Plain JSON string from model: " << "{\\t \\t\\\"h`\\\"\\n\\t\\t\\r \\n:false,\\t\\r\\\"~\\\\n\\\"\\r:  {\\t\\r \\\"\\\"\\n\\r\\t: \\r\\rnull\\n\\r}, \\r\\r\\t\\r \\\"\\\\t\\\"\\t:\\ttrue\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'h`' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "h`");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '~\n':'' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "~\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_98aa00556716b729a681e3289149406c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\t\r\r\t\"\\f\\t\\f\"\r\r\t :\"\"\r}\r'
	const char* json = "\t{\t\r\r\t\"\\f\\t\\f\"\r\r\t :\"\"\r}\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\r\\r\\t\\\"\\\\f\\\\t\\\\f\\\"\\r\\r\\t :\\\"\\\"\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f\t\f' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\t\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_490f57f566ae5188011108a7df458e72) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n  { \t\"+n]\":null\r}\t\n\n'
	const char* json = "\n  { \t\"+n]\":null\r}\t\n\n";
	std::cerr << "Plain JSON string from model: " << "\\n  { \\t\\\"+n]\\\":null\\r}\\t\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '+n]' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "+n]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a79873971dcfa827b2b5f3de126dd10c) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '  {\n\"\\\\\\nNh:\\r\"\n\n:[null\t\n\n\n\t,\n[\t\r \"\\b\\f\"\n \t, -0E0\n\r]\r\r \r]\n\n}\n'
	const char* json = "  {\n\"\\\\\\nNh:\\r\"\n\n:[null\t\n\n\n\t,\n[\t\r \"\\b\\f\"\n \t, -0E0\n\r]\r\r \r]\n\n}\n";
	std::cerr << "Plain JSON string from model: " << "  {\\n\\\"\\\\\\\\\\\\nNh:\\\\r\\\"\\n\\n:[null\\t\\n\\n\\n\\t,\\n[\\t\\r \\\"\\\\b\\\\f\\\"\\n \\t, -0E0\\n\\r]\\r\\r \\r]\\n\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\nNh:\r':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\nNh:\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\\\nNh:\r':1:0 = '\b\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\nNh:\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\b\f", cJSON_string(child));
	}
	{
		// '\\\nNh:\r':1:1 = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\nNh:\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4a2bc88f5378ebdf0a1be6796c741ec3) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \r \"\"\n\r:\r6250.0\n\t\t}\t\r'
	const char* json = "{ \r \"\"\n\r:\r6250.0\n\t\t}\t\r";
	std::cerr << "Plain JSON string from model: " << "{ \\r \\\"\\\"\\n\\r:\\r6250.0\\n\\t\\t}\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '6250.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(6250.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_01a70e917e278eb6ecba2430f719c92d) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\r{\r\t\n\n\n\t\"\\\\\\f\\t\" : 7e0}'
	const char* json = "\r\r{\r\t\n\n\n\t\"\\\\\\f\\t\" : 7e0}";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\r\\t\\n\\n\\n\\t\\\"\\\\\\\\\\\\f\\\\t\\\" : 7e0}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\f\t' = '7.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\f\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(7.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_93c90fcb530f43e3da799450c218a80d) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\n {\"\"\t\n:\"^\"\t\r  ,\n \t\"\\b\"\n \t:\ttrue\r\n} \r'
	const char* json = "\t\n {\"\"\t\n:\"^\"\t\r  ,\n \t\"\\b\"\n \t:\ttrue\r\n} \r";
	std::cerr << "Plain JSON string from model: " << "\\t\\n {\\\"\\\"\\t\\n:\\\"^\\\"\\t\\r  ,\\n \\t\\\"\\\\b\\\"\\n \\t:\\ttrue\\r\\n} \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '^'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("^", cJSON_string(child));
	}
	{
		// '\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d13dabb132fbb300f2b2c6c869256cb4) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"@\"\n\t\r:\t\"K\"\n\r \r\t\r\t}\n\r'
	const char* json = "{\"@\"\n\t\r:\t\"K\"\n\r \r\t\r\t}\n\r";
	std::cerr << "Plain JSON string from model: " << "{\\\"@\\\"\\n\\t\\r:\\t\\\"K\\\"\\n\\r \\r\\t\\r\\t}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '@' = 'K'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "@");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("K", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_31b9fd992204d104fc82c0d778760327) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t{\t\"\\r\"\n\t :\ntrue\t,\r\"\\\\\"\n\n\n:\r {\n \"1^\"\t\r\r:true\t\n\n,\n \t\"\"\r:[]  \n,\"?^\\\\\"\r :\t\nnull\n\n\t,\n\"v\\f\"\t\n\t:\t6E0\r}\r\t\n}'
	const char* json = " \t{\t\"\\r\"\n\t :\ntrue\t,\r\"\\\\\"\n\n\n:\r {\n \"1^\"\t\r\r:true\t\n\n,\n \t\"\"\r:[]  \n,\"?^\\\\\"\r :\t\nnull\n\n\t,\n\"v\\f\"\t\n\t:\t6E0\r}\r\t\n}";
	std::cerr << "Plain JSON string from model: " << " \\t{\\t\\\"\\\\r\\\"\\n\\t :\\ntrue\\t,\\r\\\"\\\\\\\\\\\"\\n\\n\\n:\\r {\\n \\\"1^\\\"\\t\\r\\r:true\\t\\n\\n,\\n \\t\\\"\\\"\\r:[]  \\n,\\\"?^\\\\\\\\\\\"\\r :\\t\\nnull\\n\\n\\t,\\n\\\"v\\\\f\\\"\\t\\n\\t:\\t6E0\\r}\\r\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\\':'v\f' = '6.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "v\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(6.0, cJSON_double(child));
	}
	{
		// '\\':'?^\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "?^\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\\':'1^' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1^");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b64dac448231a554e288bcdd91d7c1de) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\n\"\\f\"\n:[]\r\r,\r\n\n\"~\":null\n  }'
	const char* json = "{\r\n\"\\f\"\n:[]\r\r,\r\n\n\"~\":null\n  }";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"\\\\f\\\"\\n:[]\\r\\r,\\r\\n\\n\\\"~\\\":null\\n  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '~' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "~");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_010a27a048f473ff68590b6894f20b18) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\t\"\\\"V\\r\":null\r}\r\n'
	const char* json = "{\n\t\"\\\"V\\r\":null\r}\r\n";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\\"\\\\\\\"V\\\\r\\\":null\\r}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"V\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"V\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4eb5e7bd168c919da3b61af9c88837d4) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{  \t\t\r \"(\"\n \t:[]\r}\t'
	const char* json = "{  \t\t\r \"(\"\n \t:[]\r}\t";
	std::cerr << "Plain JSON string from model: " << "{  \\t\\t\\r \\\"(\\\"\\n \\t:[]\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_b6d3225891e8bd1d8f0beb728e214c59) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\"\":true\r\r \r\t}\n '
	const char* json = "{\n\"\":true\r\r \r\t}\n ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\":true\\r\\r \\r\\t}\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_672bd4cf313e28e9f1b0e16600f2b1c1) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{ \r\t\"ze\\b\\\"n'\\\\\"\n:false }'
	const char* json = "\r{ \r\t\"ze\\b\\\"n'\\\\\"\n:false }";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\r\\t\\\"ze\\\\b\\\\\\\"n'\\\\\\\\\\\"\\n:false }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'ze\b\"n'\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ze\b\"n'\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ba8726dfa35851de59a220a7b8522bc9) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\r\" \\/\":false\r\t\n}'
	const char* json = "{\r\r\" \\/\":false\r\t\n}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\\" \\\\/\\\":false\\r\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ' /' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " /");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_756300cb61b1cf42336f0021aa5f6089) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t \n\"E\\r\":\n {\"\\rf\" \r\n:false }\r}'
	const char* json = "{\t \n\"E\\r\":\n {\"\\rf\" \r\n:false }\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t \\n\\\"E\\\\r\\\":\\n {\\\"\\\\rf\\\" \\r\\n:false }\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'E\r':'\rf' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "E\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\rf");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_048a5f0e7d8d1e7fd7e4ac6b1c998e3c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\"\\/W\"\r\n  \r:-186790e-090\t \n,\n \r\"X\\n\\rS\\\\\\t\\/\"\r\t\t :[]\t,\r \n\r\"e\\/=C\"\n :\t\t\n\n-60\t\r}\r\t'
	const char* json = "\n{\"\\/W\"\r\n  \r:-186790e-090\t \n,\n \r\"X\\n\\rS\\\\\\t\\/\"\r\t\t :[]\t,\r \n\r\"e\\/=C\"\n :\t\t\n\n-60\t\r}\r\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\\/W\\\"\\r\\n  \\r:-186790e-090\\t \\n,\\n \\r\\\"X\\\\n\\\\rS\\\\\\\\\\\\t\\\\/\\\"\\r\\t\\t :[]\\t,\\r \\n\\r\\\"e\\\\/=C\\\"\\n :\\t\\t\\n\\n-60\\t\\r}\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/W' = '-1.8679e-85'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/W");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-1.8679e-85, cJSON_double(child));
	}
	{
		// 'e/=C' = '-60'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "e/=C");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-60, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f463246987d5ce3a1d48957449233d4c) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\r{\r\"\\/\\/\"\r\r\r:  { \r}}\t\n\t'
	const char* json = "\n\r{\r\"\\/\\/\"\r\r\r:  { \r}}\t\n\t";
	std::cerr << "Plain JSON string from model: " << "\\n\\r{\\r\\\"\\\\/\\\\/\\\"\\r\\r\\r:  { \\r}}\\t\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_9a01aa76a45033c467b7f84bc9410bfb) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{\t\n\r\t\"\\f\\f\\n\"\t:{\"\\f\"\n:\rfalse\r\t } }\n\t'
	const char* json = "\t{\t\n\r\t\"\\f\\f\\n\"\t:{\"\\f\"\n:\rfalse\r\t } }\n\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\n\\r\\t\\\"\\\\f\\\\f\\\\n\\\"\\t:{\\\"\\\\f\\\"\\n:\\rfalse\\r\\t } }\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f\f\n':'\f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\f\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c4ccb2761f330a665983bb976fcf5039) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \n\"\\t\\n\"\n:[ -1.095050E0,\n\n[\n\r\"\\\"\",true\t] \n\t,false]\r\n\r}'
	const char* json = "{ \n\"\\t\\n\"\n:[ -1.095050E0,\n\n[\n\r\"\\\"\",true\t] \n\t,false]\r\n\r}";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\\t\\\\n\\\"\\n:[ -1.095050E0,\\n\\n[\\n\\r\\\"\\\\\\\"\\\",true\\t] \\n\\t,false]\\r\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t\n':0 = '-1.09505'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-1.09505, cJSON_double(child));
	}
	{
		// '\t\n':1:0 = '\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"", cJSON_string(child));
	}
	{
		// '\t\n':1:1 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\t\n':2 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ab1b719f19857405b85cb4f6d6ab0f5c) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\r{\r\t\"\\n\"\r\r\r\t\n: \n null\r\r}\r'
	const char* json = "\t\r{\r\t\"\\n\"\r\r\r\t\n: \n null\r\r}\r";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{\\r\\t\\\"\\\\n\\\"\\r\\r\\r\\t\\n: \\n null\\r\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ac3035f9b90863c937378ec8ddee4925) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\n\"1o?\"\t\n\r : \r\tnull\n}'
	const char* json = "{\r\n\"1o?\"\t\n\r : \r\tnull\n}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"1o?\\\"\\t\\n\\r : \\r\\tnull\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '1o?' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1o?");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_665790283f12790174a1af2a16705c8c) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\"\"\n\r:\"\\/\"\t\n\t}\t  '
	const char* json = "{\n\"\"\n\r:\"\\/\"\t\n\t}\t  ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"\\\"\\n\\r:\\\"\\\\/\\\"\\t\\n\\t}\\t  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '/'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("/", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7580622a9b20c3ef5a149ab2d9655adc) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\r\t\t\t\"\\r\"\t\n\t:[-20\r \r]\n\t, \"\\r\\tk\"\t:\t\"{\\n\\r\"\t\r }'
	const char* json = "{\t\r\t\t\t\"\\r\"\t\n\t:[-20\r \r]\n\t, \"\\r\\tk\"\t:\t\"{\\n\\r\"\t\r }";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\t\\t\\t\\\"\\\\r\\\"\\t\\n\\t:[-20\\r \\r]\\n\\t, \\\"\\\\r\\\\tk\\\"\\t:\\t\\\"{\\\\n\\\\r\\\"\\t\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r\tk' = '{\n\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\tk");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("{\n\r", cJSON_string(child));
	}
	{
		// '\r':0 = '-20'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-20, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2b5f8d42339df628e615b8d5ed084f59) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{  \"\\r\\n@{D\\f\\r\"  :  \r[ \t\rnull \n\t]\r\r\r}\n '
	const char* json = "{  \"\\r\\n@{D\\f\\r\"  :  \r[ \t\rnull \n\t]\r\r\r}\n ";
	std::cerr << "Plain JSON string from model: " << "{  \\\"\\\\r\\\\n@{D\\\\f\\\\r\\\"  :  \\r[ \\t\\rnull \\n\\t]\\r\\r\\r}\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r\n@{D\f\r':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\n@{D\f\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6eab60ce914787961ec843ac90c8af8c) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \r{\r\n\"=M\\/D\"\r\r:[\r \nnull\t,\n[\t]\t\n]\t\t\r}'
	const char* json = " \r{\r\n\"=M\\/D\"\r\r:[\r \nnull\t,\n[\t]\t\n]\t\t\r}";
	std::cerr << "Plain JSON string from model: " << " \\r{\\r\\n\\\"=M\\\\/D\\\"\\r\\r:[\\r \\nnull\\t,\\n[\\t]\\t\\n]\\t\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '=M/D':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=M/D");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d1934a0a1a46ce927282c985b0899d3e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\n\t\t\"\":\t-7.0\r\n \t}'
	const char* json = "\r{\n\t\t\"\":\t-7.0\r\n \t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\t\\t\\\"\\\":\\t-7.0\\r\\n \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-7.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-7.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1eef8a0e9e3287976f6a31b0a02e2976) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' {\n\r\t\"\"\n\t :\rfalse\n \t,\t\t\"\\/\" \t\n\n:[\t  \r\"*\"\t\n \r] \r\r\r, \n\t\"\\/\\t?M\" \t\r\t:true\t\r\r\t}'
	const char* json = " {\n\r\t\"\"\n\t :\rfalse\n \t,\t\t\"\\/\" \t\n\n:[\t  \r\"*\"\t\n \r] \r\r\r, \n\t\"\\/\\t?M\" \t\r\t:true\t\r\r\t}";
	std::cerr << "Plain JSON string from model: " << " {\\n\\r\\t\\\"\\\"\\n\\t :\\rfalse\\n \\t,\\t\\t\\\"\\\\/\\\" \\t\\n\\n:[\\t  \\r\\\"*\\\"\\t\\n \\r] \\r\\r\\r, \\n\\t\\\"\\\\/\\\\t?M\\\" \\t\\r\\t:true\\t\\r\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/\t?M' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\t?M");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '/':0 = '*'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("*", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_dbeb1c17d684453dee620719e887986e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\t\t\r\"8\\f\\f;\"\r\n\r:\r \t92E-0\n\t,\r\t \"`>\\\"\\r\\b\"\t\n\n\r:\"$\"\t\t,\t\t\r  \n\"\"\r \n\t\n:\r-9}'
	const char* json = " {\t\t\r\"8\\f\\f;\"\r\n\r:\r \t92E-0\n\t,\r\t \"`>\\\"\\r\\b\"\t\n\n\r:\"$\"\t\t,\t\t\r  \n\"\"\r \n\t\n:\r-9}";
	std::cerr << "Plain JSON string from model: " << " {\\t\\t\\r\\\"8\\\\f\\\\f;\\\"\\r\\n\\r:\\r \\t92E-0\\n\\t,\\r\\t \\\"`>\\\\\\\"\\\\r\\\\b\\\"\\t\\n\\n\\r:\\\"$\\\"\\t\\t,\\t\\t\\r  \\n\\\"\\\"\\r \\n\\t\\n:\\r-9}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-9'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-9, cJSON_double(child));
	}
	{
		// '`>\"\r\b' = '$'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "`>\"\r\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("$", cJSON_string(child));
	}
	{
		// '8\f\f;' = '92.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "8\f\f;");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(92.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1941111164e06a276a7059f300c9a78d) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\t\"\\f\\rc\\/;\"\r:\"\\r\\t`\\/\\fW\\\\u\"  \r \n,\t \r\"\\b\\\"7\"\t\t:\nfalse}'
	const char* json = "{\t\t\"\\f\\rc\\/;\"\r:\"\\r\\t`\\/\\fW\\\\u\"  \r \n,\t \r\"\\b\\\"7\"\t\t:\nfalse}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"\\\\f\\\\rc\\\\/;\\\"\\r:\\\"\\\\r\\\\t`\\\\/\\\\fW\\\\\\\\u\\\"  \\r \\n,\\t \\r\\\"\\\\b\\\\\\\"7\\\"\\t\\t:\\nfalse}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\"7' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\"7");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\f\rc/;' = '\r\t`/\fW\\u'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\rc/;");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r\t`/\fW\\u", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f49fc9cb58d10a66fe2a6b0ce8f714a4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\r\n{   \r\n\n\"\":[null,\ntrue\r\n\n\n]\n }'
	const char* json = "\n\r\n{   \r\n\n\"\":[null,\ntrue\r\n\n\n]\n }";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\n{   \\r\\n\\n\\\"\\\":[null,\\ntrue\\r\\n\\n\\n]\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':1 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_41e594313ae9267c02265b67a9cc9d91) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\"k\\b\\n\"\n :false \r}\t \n'
	const char* json = "{\r\"k\\b\\n\"\n :false \r}\t \n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"k\\\\b\\\\n\\\"\\n :false \\r}\\t \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'k\b\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "k\b\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_86168201d685912962a9ea09fd369229) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\t { \"J\":true\n\r\t}\n\r'
	const char* json = "\t\t { \"J\":true\n\r\t}\n\r";
	std::cerr << "Plain JSON string from model: " << "\\t\\t { \\\"J\\\":true\\n\\r\\t}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'J' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "J");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3e45e7295b809694f1a1951dbf0884a8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\"\"\n:true \r}\t'
	const char* json = "\n{\"\"\n:true \r}\t";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\"\\n:true \\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_dbfc082cb9c9ece554a9bfda5bfad0f2) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r \t\"\":\n\"?\\\"<\" }'
	const char* json = "{\r \t\"\":\n\"?\\\"<\" }";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t\\\"\\\":\\n\\\"?\\\\\\\"<\\\" }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '?\"<'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("?\"<", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e43e6d75589876b2a6839d6532e75f1b) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n \t{\r\t\t\n\"\" \n:\nfalse\t\t\t\t ,  \n\r\"\\/\"\t \r:-0.0E+080\t \n\n,\n\n \"^D\\/E\\b\"\t\r\t:null\t\r ,\r\r \t \t\"\\t\":true\t\n ,\n\"t\\f\\n\"\t:null \t }'
	const char* json = "\n \t{\r\t\t\n\"\" \n:\nfalse\t\t\t\t ,  \n\r\"\\/\"\t \r:-0.0E+080\t \n\n,\n\n \"^D\\/E\\b\"\t\r\t:null\t\r ,\r\r \t \t\"\\t\":true\t\n ,\n\"t\\f\\n\"\t:null \t }";
	std::cerr << "Plain JSON string from model: " << "\\n \\t{\\r\\t\\t\\n\\\"\\\" \\n:\\nfalse\\t\\t\\t\\t ,  \\n\\r\\\"\\\\/\\\"\\t \\r:-0.0E+080\\t \\n\\n,\\n\\n \\\"^D\\\\/E\\\\b\\\"\\t\\r\\t:null\\t\\r ,\\r\\r \\t \\t\\\"\\\\t\\\":true\\t\\n ,\\n\\\"t\\\\f\\\\n\\\"\\t:null \\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '^D/E\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "^D/E\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '/' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// 't\f\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "t\f\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3b6914342d60acf32a501614e22d844e) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\t{\r\r\t\"\"\n:[  ]\r,\r\n \t\"A\"\n:\n\n\"\\r~\\ba\\/h\",\"\\/\" \r :true\t \t, \r\r\"\\/\\fpF!;zS\"\r :\rtrue \r}\r'
	const char* json = "\t\t{\r\r\t\"\"\n:[  ]\r,\r\n \t\"A\"\n:\n\n\"\\r~\\ba\\/h\",\"\\/\" \r :true\t \t, \r\r\"\\/\\fpF!;zS\"\r :\rtrue \r}\r";
	std::cerr << "Plain JSON string from model: " << "\\t\\t{\\r\\r\\t\\\"\\\"\\n:[  ]\\r,\\r\\n \\t\\\"A\\\"\\n:\\n\\n\\\"\\\\r~\\\\ba\\\\/h\\\",\\\"\\\\/\\\" \\r :true\\t \\t, \\r\\r\\\"\\\\/\\\\fpF!;zS\\\"\\r :\\rtrue \\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'A' = '\r~\ba/h'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "A");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r~\ba/h", cJSON_string(child));
	}
	{
		// '/\fpF!;zS' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\fpF!;zS");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0b5301c2998ab7a023d6cbb793a16def) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\"\\r\"\r :\r\n0e-06, \r\n\n\"\\/[\\t\":\"\"\t}\n '
	const char* json = "{\t\"\\r\"\r :\r\n0e-06, \r\n\n\"\\/[\\t\":\"\"\t}\n ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\r\\\"\\r :\\r\\n0e-06, \\r\\n\\n\\\"\\\\/[\\\\t\\\":\\\"\\\"\\t}\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/[\t' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/[\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\r' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_37e39aac441ad928eda7710cca1600b6) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\t\t\r \r\n \"\" \t:\r\t-0e030\t\n ,\r\r\n\r\"\\\"\" \n: \n\"\\/Q\\f{(\\nc\\t\"}'
	const char* json = "\n{\t\t\r \r\n \"\" \t:\r\t-0e030\t\n ,\r\r\n\r\"\\\"\" \n: \n\"\\/Q\\f{(\\nc\\t\"}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\t\\r \\r\\n \\\"\\\" \\t:\\r\\t-0e030\\t\\n ,\\r\\r\\n\\r\\\"\\\\\\\"\\\" \\n: \\n\\\"\\\\/Q\\\\f{(\\\\nc\\\\t\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// '\"' = '/Q\f{(\nc\t'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("/Q\f{(\nc\t", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0be326948ffa167a35c16913e78305a9) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\n{\n\t\"Z\"\t\n:-0.0231e-0}'
	const char* json = "\n\n{\n\t\"Z\"\t\n:-0.0231e-0}";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{\\n\\t\\\"Z\\\"\\t\\n:-0.0231e-0}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Z' = '-0.0231'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0231, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_48f13e0ea6dd1d5dcd6f13c9587651c0) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r \n\t\"}'\"\t\n\n:-70.0780e-0 }\r\n'
	const char* json = "{\r \n\t\"}'\"\t\n\n:-70.0780e-0 }\r\n";
	std::cerr << "Plain JSON string from model: " << "{\\r \\n\\t\\\"}'\\\"\\t\\n\\n:-70.0780e-0 }\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '}'' = '-70.078'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}'");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-70.078, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3359824a91295f3fb95c1d66b1c9c36f) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\n\n\n \t\r\"\"\r\r: \t\t0E+01   , \"#\\\\\"\n  \n:  \n\"j\"\n\t,\"3\"\r\n:\n\r\rfalse\r\r}'
	const char* json = "{\n\n\n \t\r\"\"\r\r: \t\t0E+01   , \"#\\\\\"\n  \n:  \n\"j\"\n\t,\"3\"\r\n:\n\r\rfalse\r\r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\n \\t\\r\\\"\\\"\\r\\r: \\t\\t0E+01   , \\\"#\\\\\\\\\\\"\\n  \\n:  \\n\\\"j\\\"\\n\\t,\\\"3\\\"\\r\\n:\\n\\r\\rfalse\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '3' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "3");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '#\\' = 'j'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "#\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("j", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cdb1bb5bf9150c8e9c79a9ce56d2668d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"\":\t\"o\"}'
	const char* json = "{\"\":\t\"o\"}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\":\\t\\\"o\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'o'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("o", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c72a7a52f5803b287eb32f18a3f8b87e) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '  {\"^\"\r\t:\t\r\"\"\r,\t\"&\\f)\\\"+\\/\\f\\b\\\\\" \t \r:false\r,\t\n \t\"J;\":\t[null\n,\t\n{\r}]\t,\r\n\"\\n\":\r\n \"\\t\\\"\"\n\n \t,\n\r\n\t\r\t\"\\\\\"\t\n\t: true\r \n\r}'
	const char* json = "  {\"^\"\r\t:\t\r\"\"\r,\t\"&\\f)\\\"+\\/\\f\\b\\\\\" \t \r:false\r,\t\n \t\"J;\":\t[null\n,\t\n{\r}]\t,\r\n\"\\n\":\r\n \"\\t\\\"\"\n\n \t,\n\r\n\t\r\t\"\\\\\"\t\n\t: true\r \n\r}";
	std::cerr << "Plain JSON string from model: " << "  {\\\"^\\\"\\r\\t:\\t\\r\\\"\\\"\\r,\\t\\\"&\\\\f)\\\\\\\"+\\\\/\\\\f\\\\b\\\\\\\\\\\" \\t \\r:false\\r,\\t\\n \\t\\\"J;\\\":\\t[null\\n,\\t\\n{\\r}]\\t,\\r\\n\\\"\\\\n\\\":\\r\\n \\\"\\\\t\\\\\\\"\\\"\\n\\n \\t,\\n\\r\\n\\t\\r\\t\\\"\\\\\\\\\\\"\\t\\n\\t: true\\r \\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = '\t\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t\"", cJSON_string(child));
	}
	{
		// '&\f)\"+/\f\b\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "&\f)\"+/\f\b\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'J;':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "J;");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '^' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "^");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ac4671acbd554af4e7a3a8aa04a38e51) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n \t{\n\n\"\"\n \n\n:[ \n\tfalse\t,\r\t\tfalse ,\r 0E-0\n\r]\r}'
	const char* json = "\n \t{\n\n\"\"\n \n\n:[ \n\tfalse\t,\r\t\tfalse ,\r 0E-0\n\r]\r}";
	std::cerr << "Plain JSON string from model: " << "\\n \\t{\\n\\n\\\"\\\"\\n \\n\\n:[ \\n\\tfalse\\t,\\r\\t\\tfalse ,\\r 0E-0\\n\\r]\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':1 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':2 = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_891be2cae29ac52f03f27a1d1f90e0b8) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\"}v!\\t\"  \t:false}'
	const char* json = "{\t\"}v!\\t\"  \t:false}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"}v!\\\\t\\\"  \\t:false}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '}v!\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}v!\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a641e09a1207944c1eaae3023d6315a0) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\r\n\t\"\\b\"\n\r:\"\"\n\t\r,\t \r\"p\":\t\r\rnull, \t\n \r\"\\/\\r\"\t\n\t\n\t:\t\rfalse \n\n\t \r,\t\r\"Qm}\"\r\n:\ntrue\r\t\n\n \r,\n\t\"\\b\\n5\":\t\"h-H{\"\n\r ,\r\t\n \"U|\\f\":0E-0 \t \t}'
	const char* json = "\t{\r\n\t\"\\b\"\n\r:\"\"\n\t\r,\t \r\"p\":\t\r\rnull, \t\n \r\"\\/\\r\"\t\n\t\n\t:\t\rfalse \n\n\t \r,\t\r\"Qm}\"\r\n:\ntrue\r\t\n\n \r,\n\t\"\\b\\n5\":\t\"h-H{\"\n\r ,\r\t\n \"U|\\f\":0E-0 \t \t}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\n\\t\\\"\\\\b\\\"\\n\\r:\\\"\\\"\\n\\t\\r,\\t \\r\\\"p\\\":\\t\\r\\rnull, \\t\\n \\r\\\"\\\\/\\\\r\\\"\\t\\n\\t\\n\\t:\\t\\rfalse \\n\\n\\t \\r,\\t\\r\\\"Qm}\\\"\\r\\n:\\ntrue\\r\\t\\n\\n \\r,\\n\\t\\\"\\\\b\\\\n5\\\":\\t\\\"h-H{\\\"\\n\\r ,\\r\\t\\n \\\"U|\\\\f\\\":0E-0 \\t \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\n5' = 'h-H{'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\n5");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("h-H{", cJSON_string(child));
	}
	{
		// '/\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'Qm}' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Qm}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'U|\f' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "U|\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '\b' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// 'p' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "p");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8991e4b38864cc0a9285363fd7042484) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{\r\r \"\" \r  \t:9390\t}\n\r'
	const char* json = "\t{\r\r \"\" \r  \t:9390\t}\n\r";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r \\\"\\\" \\r  \\t:9390\\t}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '9390'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(9390, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_99c6ba0abe0c7fcf12499f540ddfcdfa) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{  \r\"\\t&\"\r:\r\n\n[\r]\t,\t\"\\\\\\t\":\t\t\nfalse \n}'
	const char* json = "\t{  \r\"\\t&\"\r:\r\n\n[\r]\t,\t\"\\\\\\t\":\t\t\nfalse \n}";
	std::cerr << "Plain JSON string from model: " << "\\t{  \\r\\\"\\\\t&\\\"\\r:\\r\\n\\n[\\r]\\t,\\t\\\"\\\\\\\\\\\\t\\\":\\t\\t\\nfalse \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_dcc80536d54a9346c9397bb1c8d1becb) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t\n{ \n\n\n\"\"\r:null}'
	const char* json = "\t\n{ \n\n\n\"\"\r:null}";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{ \\n\\n\\n\\\"\\\"\\r:null}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fc6a1aa7aac66f90e29a31c94a2978d6) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\"\"\t:1.07e+0,\r \n\"\\fK\\bQ\"   \r\t:true\r,\t  \r\"a\" \n\t:\r[\r\r {\t \"\\n\":[\t] \r\t\t\r}\n\r,\n{},[ true \r,null]\t\r,true\t]\r\n\r\t}'
	const char* json = "\r{\"\"\t:1.07e+0,\r \n\"\\fK\\bQ\"   \r\t:true\r,\t  \r\"a\" \n\t:\r[\r\r {\t \"\\n\":[\t] \r\t\t\r}\n\r,\n{},[ true \r,null]\t\r,true\t]\r\n\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\"\\t:1.07e+0,\\r \\n\\\"\\\\fK\\\\bQ\\\"   \\r\\t:true\\r,\\t  \\r\\\"a\\\" \\n\\t:\\r[\\r\\r {\\t \\\"\\\\n\\\":[\\t] \\r\\t\\t\\r}\\n\\r,\\n{},[ true \\r,null]\\t\\r,true\\t]\\r\\n\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '1.07'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(1.07, cJSON_double(child));
	}
	{
		// 'a':2:0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "a");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'a':2:1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "a");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'a':3 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "a");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 3);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\fK\bQ' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fK\bQ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c41df9917e4c46ced92474df575651a1) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \r\r{\r\n\"\"\n:\r \tnull  \n}'
	const char* json = " \r\r{\r\n\"\"\n:\r \tnull  \n}";
	std::cerr << "Plain JSON string from model: " << " \\r\\r{\\r\\n\\\"\\\"\\n:\\r \\tnull  \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a3e9f1b27d19c7a308370d34884a8945) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \n\"\":\t[]\r\r\n\n, \n\r\r\r\"r\\\"\":[]\t\t,\"*;L\\b\"\r\t:null\t,\" \"  : \r \"1:\"\r\r}\r\n '
	const char* json = "{ \n\"\":\t[]\r\r\n\n, \n\r\r\r\"r\\\"\":[]\t\t,\"*;L\\b\"\r\t:null\t,\" \"  : \r \"1:\"\r\r}\r\n ";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\\"\\\":\\t[]\\r\\r\\n\\n, \\n\\r\\r\\r\\\"r\\\\\\\"\\\":[]\\t\\t,\\\"*;L\\\\b\\\"\\r\\t:null\\t,\\\" \\\"  : \\r \\\"1:\\\"\\r\\r}\\r\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ' ' = '1:'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("1:", cJSON_string(child));
	}
	{
		// '*;L\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "*;L\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c97402a82ab6574c86bf36568e152997) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\r\t{\r \"\\/\\f\\bQ\":\n485,\"[gW%*\\t\"\t :\rtrue\t ,\r \"+rT\"\t:\r  { }\t }'
	const char* json = "\n\r\t{\r \"\\/\\f\\bQ\":\n485,\"[gW%*\\t\"\t :\rtrue\t ,\r \"+rT\"\t:\r  { }\t }";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{\\r \\\"\\\\/\\\\f\\\\bQ\\\":\\n485,\\\"[gW%*\\\\t\\\"\\t :\\rtrue\\t ,\\r \\\"+rT\\\"\\t:\\r  { }\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '[gW%*\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "[gW%*\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '/\f\bQ' = '485'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\f\bQ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(485, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_44706419aee605e76b79ecd6159cd4f2) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"Z?j\\fwZklk\"\n\t:\ntrue\r \r,\t\t\n\"\"\r\r\r\r:\n\n{  \n\"Q\\\\\":true }\r,\n \t \r\n\"g\"  \r\r:null\n\r\t\r\r}\n'
	const char* json = "{\"Z?j\\fwZklk\"\n\t:\ntrue\r \r,\t\t\n\"\"\r\r\r\r:\n\n{  \n\"Q\\\\\":true }\r,\n \t \r\n\"g\"  \r\r:null\n\r\t\r\r}\n";
	std::cerr << "Plain JSON string from model: " << "{\\\"Z?j\\\\fwZklk\\\"\\n\\t:\\ntrue\\r \\r,\\t\\t\\n\\\"\\\"\\r\\r\\r\\r:\\n\\n{  \\n\\\"Q\\\\\\\\\\\":true }\\r,\\n \\t \\r\\n\\\"g\\\"  \\r\\r:null\\n\\r\\t\\r\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'Q\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Q\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'Z?j\fwZklk' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Z?j\fwZklk");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'g' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "g");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_eb9e3f72ca98692eddf38a178c1612a1) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\"\\f\"\r:\t{\")\\b\"\t:\t []\t\r\r}\r\n\t }'
	const char* json = "{\"\\f\"\r:\t{\")\\b\"\t:\t []\t\r\r}\r\n\t }";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\f\\\"\\r:\\t{\\\")\\\\b\\\"\\t:\\t []\\t\\r\\r}\\r\\n\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_40c5bc67aff53b63e540e545f7ada947) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\t\"\\f|\\b\":-0 ,\t\t\n\t\"\\t\"\r \n\n :\n\n\n{}\t}'
	const char* json = "{\t\n\t\"\\f|\\b\":-0 ,\t\t\n\t\"\\t\"\r \n\n :\n\n\n{}\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\t\\\"\\\\f|\\\\b\\\":-0 ,\\t\\t\\n\\t\\\"\\\\t\\\"\\r \\n\\n :\\n\\n\\n{}\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f|\b' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f|\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1788222c12fdb0e407ce96620a439e50) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \r{\n \"(\\/\\r\\\"6\"\t:\n -377.08\r\n\t\t\r}'
	const char* json = " \r{\n \"(\\/\\r\\\"6\"\t:\n -377.08\r\n\t\t\r}";
	std::cerr << "Plain JSON string from model: " << " \\r{\\n \\\"(\\\\/\\\\r\\\\\\\"6\\\"\\t:\\n -377.08\\r\\n\\t\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '(/\r\"6' = '-377.08'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(/\r\"6");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-377.08, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6b0519d0bb75a7a13bc4b4477130346b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\r \"c\"\t:{\"\\\"\" \t: \t60\t,\n\t\"\\n\\r\\/c\"\t  :\n\n\ttrue\n \n}\n,\t\"e9\"\n\r\n\n:\t \tfalse\t}'
	const char* json = "\t{\r \"c\"\t:{\"\\\"\" \t: \t60\t,\n\t\"\\n\\r\\/c\"\t  :\n\n\ttrue\n \n}\n,\t\"e9\"\n\r\n\n:\t \tfalse\t}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r \\\"c\\\"\\t:{\\\"\\\\\\\"\\\" \\t: \\t60\\t,\\n\\t\\\"\\\\n\\\\r\\\\/c\\\"\\t  :\\n\\n\\ttrue\\n \\n}\\n,\\t\\\"e9\\\"\\n\\r\\n\\n:\\t \\tfalse\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'c':'\"' = '60'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "c");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(60, cJSON_double(child));
	}
	{
		// 'c':'\n\r/c' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "c");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\r/c");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'e9' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "e9");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fe3540e1212d9a25d85f18e824e3c34f) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"M\":[]\n\r}\t'
	const char* json = "{\"M\":[]\n\r}\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"M\\\":[]\\n\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_4977dc9eaf34b32ba8cbf5e56623b773) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\r\r{ \r \t\"w\\n\":false\t \n}'
	const char* json = "\r\r\r{ \r \t\"w\\n\":false\t \n}";
	std::cerr << "Plain JSON string from model: " << "\\r\\r\\r{ \\r \\t\\\"w\\\\n\\\":false\\t \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'w\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "w\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_95b7684c87730e138761504ab7e64fbc) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\"\\b\\fz\"\n: \n\ttrue}'
	const char* json = "{\t\n\"\\b\\fz\"\n: \n\ttrue}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"\\\\b\\\\fz\\\"\\n: \\n\\ttrue}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\fz' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\fz");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_60c8817ec73559fc42965809c6d32076) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\";\" \r: {}\t ,\r\r\r\t \t\t\r\"\"  :null\r  \n ,\t\n\"\\/+c\"\t \n:\r{}\t\t, \t\t\r\"\\t\" :\r\"c\" \t}\t'
	const char* json = "{\";\" \r: {}\t ,\r\r\r\t \t\t\r\"\"  :null\r  \n ,\t\n\"\\/+c\"\t \n:\r{}\t\t, \t\t\r\"\\t\" :\r\"c\" \t}\t";
	std::cerr << "Plain JSON string from model: " << "{\\\";\\\" \\r: {}\\t ,\\r\\r\\r\\t \\t\\t\\r\\\"\\\"  :null\\r  \\n ,\\t\\n\\\"\\\\/+c\\\"\\t \\n:\\r{}\\t\\t, \\t\\t\\r\\\"\\\\t\\\" :\\r\\\"c\\\" \\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\t' = 'c'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("c", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_834ef25a23021f3a747d1126aa8d8e3f) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\n\t{ \n\n\"\"\t\r:false\n\r}\r\n\t'
	const char* json = "\r\n\t{ \n\n\"\"\t\r:false\n\r}\r\n\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\t{ \\n\\n\\\"\\\"\\t\\r:false\\n\\r}\\r\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e39fb8b44d39d8589c5ad49a0624d806) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \r  \"\"\r\r\r:{}}\r'
	const char* json = "{ \r  \"\"\r\r\r:{}}\r";
	std::cerr << "Plain JSON string from model: " << "{ \\r  \\\"\\\"\\r\\r\\r:{}}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_243e9406a713b21cdee9067f2d0bf74f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\"\" :\t{ \"iUE\":\n  false\n,\r\"Opr\"\t\t :\t \n\"<@\\\"UN*\\\\!o\\r\\bhnv\\b\" \n\r  ,\t\n\n\r\n\"\\r\": true\t\r}\n\t,\r\r\n\"%.\\/\"\r:false,\n\t\"%\\n\":\rfalse}'
	const char* json = "\r{\"\" :\t{ \"iUE\":\n  false\n,\r\"Opr\"\t\t :\t \n\"<@\\\"UN*\\\\!o\\r\\bhnv\\b\" \n\r  ,\t\n\n\r\n\"\\r\": true\t\r}\n\t,\r\r\n\"%.\\/\"\r:false,\n\t\"%\\n\":\rfalse}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\" :\\t{ \\\"iUE\\\":\\n  false\\n,\\r\\\"Opr\\\"\\t\\t :\\t \\n\\\"<@\\\\\\\"UN*\\\\\\\\!o\\\\r\\\\bhnv\\\\b\\\" \\n\\r  ,\\t\\n\\n\\r\\n\\\"\\\\r\\\": true\\t\\r}\\n\\t,\\r\\r\\n\\\"%.\\\\/\\\"\\r:false,\\n\\t\\\"%\\\\n\\\":\\rfalse}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':'iUE' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "iUE");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':'Opr' = '<@\"UN*\\!o\r\bhnv\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Opr");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("<@\"UN*\\!o\r\bhnv\b", cJSON_string(child));
	}
	{
		// '%\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "%\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '%./' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "%./");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8fc4dbab6aba47edfc92480c444114c8) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r \")\"\r\r\t:\n\r\n1.0\n}\r'
	const char* json = "{\r \")\"\r\r\t:\n\r\n1.0\n}\r";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\")\\\"\\r\\r\\t:\\n\\r\\n1.0\\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ')' = '1.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ")");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(1.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d6a1f03cca540fb2688fdfbe7e41bb50) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{ \"\":\tfalse\t  ,\n\n\"\\n:\\t\"\r \t:\nnull\n\n\r,\n\t\n\"U\\r\"\r\n\n:[\t],\t\n\"(\":{} , \r\"@\"\t\n:\r\t\n\"=\" \t \n, \"b;\" \t :true\r\r\r,\n   \"E\":null\r\r\r  }'
	const char* json = "\t{ \"\":\tfalse\t  ,\n\n\"\\n:\\t\"\r \t:\nnull\n\n\r,\n\t\n\"U\\r\"\r\n\n:[\t],\t\n\"(\":{} , \r\"@\"\t\n:\r\t\n\"=\" \t \n, \"b;\" \t :true\r\r\r,\n   \"E\":null\r\r\r  }";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\\"\\\":\\tfalse\\t  ,\\n\\n\\\"\\\\n:\\\\t\\\"\\r \\t:\\nnull\\n\\n\\r,\\n\\t\\n\\\"U\\\\r\\\"\\r\\n\\n:[\\t],\\t\\n\\\"(\\\":{} , \\r\\\"@\\\"\\t\\n:\\r\\t\\n\\\"=\\\" \\t \\n, \\\"b;\\\" \\t :true\\r\\r\\r,\\n   \\\"E\\\":null\\r\\r\\r  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '@' = '='
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "@");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("=", cJSON_string(child));
	}
	{
		// 'E' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "E");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\n:\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n:\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'b;' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "b;");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6db4689a7f4c9d222ca0bc78aeda2ad6) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\r\"sh$n\\\"\\f\\\"\"\t:-0\n}'
	const char* json = "{\t\r\"sh$n\\\"\\f\\\"\"\t:-0\n}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"sh$n\\\\\\\"\\\\f\\\\\\\"\\\"\\t:-0\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'sh$n\"\f\"' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "sh$n\"\f\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c04255fb6317e7c506ced2ce68bc5694) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\t{\r\r\t\t\"\\n'\"\r \r\r:[true]\r\n\t}\r\n'
	const char* json = "\n\t{\r\r\t\t\"\\n'\"\r \r\r:[true]\r\n\t}\r\n";
	std::cerr << "Plain JSON string from model: " << "\\n\\t{\\r\\r\\t\\t\\\"\\\\n'\\\"\\r \\r\\r:[true]\\r\\n\\t}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n'':0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n'");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cf1e313baf97e64fa1d29fe67a468855) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\r\r\"\": true,\t\"\\f\\b:5J\\f4\"\t:\t8E0\n}\n'
	const char* json = "{\t\r\r\"\": true,\t\"\\f\\b:5J\\f4\"\t:\t8E0\n}\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\r\\\"\\\": true,\\t\\\"\\\\f\\\\b:5J\\\\f4\\\"\\t:\\t8E0\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\f\b:5J\f4' = '8.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\b:5J\f4");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(8.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_58c636649781ff2e79571a6b7f42b9be) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n\r\r{ \t\t \r\r\"j?.\\fW\" :0e-0 \r\r}'
	const char* json = "\n\r\r{ \t\t \r\r\"j?.\\fW\" :0e-0 \r\r}";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\r{ \\t\\t \\r\\r\\\"j?.\\\\fW\\\" :0e-0 \\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'j?.\fW' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "j?.\fW");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6541f42207cb2a971e3786704486b7a1) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\t\t\"x\":{\"\\/;\":false }\r\n}\t\r'
	const char* json = "{\n\t\t\"x\":{\"\\/;\":false }\r\n}\t\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\t\\\"x\\\":{\\\"\\\\/;\\\":false }\\r\\n}\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'x':'/;' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "x");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/;");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_491794b9934f82fcd7fc9b6c8898f27f) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\r \"\" :false}'
	const char* json = "{\r\r \"\" :false}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r \\\"\\\" :false}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_391399c603bc7e084750e2071668630d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"\"\n\t\n:\n\"k\"\t, \n\")iG\\b\\/<\":true\n,\t\t\n\n\"\\t\"\n: \tnull,\t\r\t\t\"\\\"^\\rwE\":\t[\r\t\n\tnull\n]\n, \t\r\r\"#\":\"Y\"   \n \t,\"e'\"\r\n \r:true\n\n\r\r,\n\"(\\r2\\nK)\"\r :-40\n\r }'
	const char* json = "{\"\"\n\t\n:\n\"k\"\t, \n\")iG\\b\\/<\":true\n,\t\t\n\n\"\\t\"\n: \tnull,\t\r\t\t\"\\\"^\\rwE\":\t[\r\t\n\tnull\n]\n, \t\r\r\"#\":\"Y\"   \n \t,\"e'\"\r\n \r:true\n\n\r\r,\n\"(\\r2\\nK)\"\r :-40\n\r }";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\n\\t\\n:\\n\\\"k\\\"\\t, \\n\\\")iG\\\\b\\\\/<\\\":true\\n,\\t\\t\\n\\n\\\"\\\\t\\\"\\n: \\tnull,\\t\\r\\t\\t\\\"\\\\\\\"^\\\\rwE\\\":\\t[\\r\\t\\n\\tnull\\n]\\n, \\t\\r\\r\\\"#\\\":\\\"Y\\\"   \\n \\t,\\\"e'\\\"\\r\\n \\r:true\\n\\n\\r\\r,\\n\\\"(\\\\r2\\\\nK)\\\"\\r :-40\\n\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'k'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("k", cJSON_string(child));
	}
	{
		// ')iG\b/<' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ")iG\b/<");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '#' = 'Y'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("Y", cJSON_string(child));
	}
	{
		// '\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'e'' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "e'");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '(\r2\nK)' = '-40'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(\r2\nK)");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-40, cJSON_double(child));
	}
	{
		// '\"^\rwE':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"^\rwE");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_651c54a622fafa28f778c29f67bfe7aa) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\"\n\r :true,\r\t \r\"\\b\\/\":\t{}\t\r }\t'
	const char* json = "{ \"\"\n\r :true,\r\t \r\"\\b\\/\":\t{}\t\r }\t";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\n\\r :true,\\r\\t \\r\\\"\\\\b\\\\/\\\":\\t{}\\t\\r }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1963ef5b71fc2ddead1cb33ac983afd1) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"\"\t\r:\nnull}'
	const char* json = "{\r\"\"\t\r:\nnull}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\t\\r:\\nnull}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1f0d69c9cf5bf59cafaed2e5a36b1005) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\"\\b\"\t\r :\n\t\rnull\t}\n'
	const char* json = "\r{\"\\b\"\t\r :\n\t\rnull\t}\n";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\\b\\\"\\t\\r :\\n\\t\\rnull\\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2da8769e9c217995b765827d37384c3d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\t\"\\t\"\t\n\r:true\r\r}'
	const char* json = "\r{\t\"\\t\"\t\n\r:true\r\r}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\\"\\\\t\\\"\\t\\n\\r:true\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f2773754f526982a127a59c3c769fe9b) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\r  \t\n\r\"\\t\":\n\n-50E06  \t}\n\t '
	const char* json = "\n{\r  \t\n\r\"\\t\":\n\n-50E06  \t}\n\t ";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r  \\t\\n\\r\\\"\\\\t\\\":\\n\\n-50E06  \\t}\\n\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = '-50000000.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-50000000.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2b26078140583f20353f80bae986da0d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{ \n\r\t\"\"\r:\"-dkc\\\"\\n\\/G\\\\\"\t\n,\t\"\\t%\\\"\"\r\t\n:\tnull\t \n\r}  '
	const char* json = "\n{ \n\r\t\"\"\r:\"-dkc\\\"\\n\\/G\\\\\"\t\n,\t\"\\t%\\\"\"\r\t\n:\tnull\t \n\r}  ";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\n\\r\\t\\\"\\\"\\r:\\\"-dkc\\\\\\\"\\\\n\\\\/G\\\\\\\\\\\"\\t\\n,\\t\\\"\\\\t%\\\\\\\"\\\"\\r\\t\\n:\\tnull\\t \\n\\r}  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-dkc\"\n/G\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("-dkc\"\n/G\\", cJSON_string(child));
	}
	{
		// '\t%\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t%\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6a16475dbaa6482a093e57383e1b1b3f) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t \n\t \"\\/!\":[ \n]\t\r\n\n\n,\r \r \t\"1\\\"\"\t\t: \"\\f\"\r  ,\"\"\t:\r[],\n\"\\rO\" \r:{\"(\"\t:\nfalse\t\n},\t \"\\n\"\r:\t\nnull\n \r}  \n'
	const char* json = "{\t \n\t \"\\/!\":[ \n]\t\r\n\n\n,\r \r \t\"1\\\"\"\t\t: \"\\f\"\r  ,\"\"\t:\r[],\n\"\\rO\" \r:{\"(\"\t:\nfalse\t\n},\t \"\\n\"\r:\t\nnull\n \r}  \n";
	std::cerr << "Plain JSON string from model: " << "{\\t \\n\\t \\\"\\\\/!\\\":[ \\n]\\t\\r\\n\\n\\n,\\r \\r \\t\\\"1\\\\\\\"\\\"\\t\\t: \\\"\\\\f\\\"\\r  ,\\\"\\\"\\t:\\r[],\\n\\\"\\\\rO\\\" \\r:{\\\"(\\\"\\t:\\nfalse\\t\\n},\\t \\\"\\\\n\\\"\\r:\\t\\nnull\\n \\r}  \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\rO':'(' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\rO");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '1\"' = '\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\f", cJSON_string(child));
	}
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cfe8aac1c90054b51df1772776ac2691) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\"\\/$0\"\r\r:false\r\r,\"\":  \r false } \n'
	const char* json = " {\"\\/$0\"\r\r:false\r\r,\"\":  \r false } \n";
	std::cerr << "Plain JSON string from model: " << " {\\\"\\\\/$0\\\"\\r\\r:false\\r\\r,\\\"\\\":  \\r false } \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/$0' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/$0");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cee83509ee7c72a149dbdb8d10e89fdd) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\"5\\/\\twQ\\/\":\t\r \"\" \t\t}\r\t'
	const char* json = "{\n\"5\\/\\twQ\\/\":\t\r \"\" \t\t}\r\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"5\\\\/\\\\twQ\\\\/\\\":\\t\\r \\\"\\\" \\t\\t}\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '5/\twQ/' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "5/\twQ/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b9e6666e52c1bd47c0f10962b9123c2c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\n\r{\t\"\\f\":true \n\n}'
	const char* json = "\r\n\r{\t\"\\f\":true \n\n}";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\r{\\t\\\"\\\\f\\\":true \\n\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5ca221a8b52fe3d09548683f498a4666) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\r \"\":null \r\t}  \r'
	const char* json = "\n{\r \"\":null \r\t}  \r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r \\\"\\\":null \\r\\t}  \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_12df0cf77b4fc57e0fc01b1ba900e181) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\t\r{\n\"\"\n  :\t\"o\\f\\\"l\" \r\r, \"*B1\\n\\n}\"\r\r\r:true \r\r\r\r,\r  \r\"\\fq\" \t\t:\"\\nC`\"\r\t\t\n,\r  \"\\f\"\r\t :\"\\n\"\n, \r \r\"\\\"\\tt\\\\\"  \t:\t-0\r ,  \t\n \"\\bH\\r4\\\"C\":\tnull\n\n \n}'
	const char* json = "\n\t\r{\n\"\"\n  :\t\"o\\f\\\"l\" \r\r, \"*B1\\n\\n}\"\r\r\r:true \r\r\r\r,\r  \r\"\\fq\" \t\t:\"\\nC`\"\r\t\t\n,\r  \"\\f\"\r\t :\"\\n\"\n, \r \r\"\\\"\\tt\\\\\"  \t:\t-0\r ,  \t\n \"\\bH\\r4\\\"C\":\tnull\n\n \n}";
	std::cerr << "Plain JSON string from model: " << "\\n\\t\\r{\\n\\\"\\\"\\n  :\\t\\\"o\\\\f\\\\\\\"l\\\" \\r\\r, \\\"*B1\\\\n\\\\n}\\\"\\r\\r\\r:true \\r\\r\\r\\r,\\r  \\r\\\"\\\\fq\\\" \\t\\t:\\\"\\\\nC`\\\"\\r\\t\\t\\n,\\r  \\\"\\\\f\\\"\\r\\t :\\\"\\\\n\\\"\\n, \\r \\r\\\"\\\\\\\"\\\\tt\\\\\\\\\\\"  \\t:\\t-0\\r ,  \\t\\n \\\"\\\\bH\\\\r4\\\\\\\"C\\\":\\tnull\\n\\n \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'o\f\"l'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("o\f\"l", cJSON_string(child));
	}
	{
		// '\bH\r4\"C' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bH\r4\"C");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\f' = '\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n", cJSON_string(child));
	}
	{
		// '\"\tt\\' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\tt\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '*B1\n\n}' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "*B1\n\n}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\fq' = '\nC`'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fq");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\nC`", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_92996fa766fedfae7a09bcb5d406b27a) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{ \r\"\"\r\t: \"^\\r\\fa\"\r  \r\t} '
	const char* json = "\t{ \r\"\"\r\t: \"^\\r\\fa\"\r  \r\t} ";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\r\\\"\\\"\\r\\t: \\\"^\\\\r\\\\fa\\\"\\r  \\r\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '^\r\fa'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("^\r\fa", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ece0accfd3cb319602b6379fb63692c8) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n\r\r{\"\\n\"\r:{\"W\"\r\t:0e+0}\r\r\t\t\t, \n\r\"\\b\\\\\":\t-0E04,\r\r \"O\" :{\n\n\r\r\"\\/\\r9\\b8\"\r:\r \"\\/S\"  \t\r,\r\t\n  \"B1uH\\b\"\t:{}\r\r ,\n\t\t\"\\\\V]\":\t 0e0\r\n\t \n}\t}\n'
	const char* json = "\n\r\r{\"\\n\"\r:{\"W\"\r\t:0e+0}\r\r\t\t\t, \n\r\"\\b\\\\\":\t-0E04,\r\r \"O\" :{\n\n\r\r\"\\/\\r9\\b8\"\r:\r \"\\/S\"  \t\r,\r\t\n  \"B1uH\\b\"\t:{}\r\r ,\n\t\t\"\\\\V]\":\t 0e0\r\n\t \n}\t}\n";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\r{\\\"\\\\n\\\"\\r:{\\\"W\\\"\\r\\t:0e+0}\\r\\r\\t\\t\\t, \\n\\r\\\"\\\\b\\\\\\\\\\\":\\t-0E04,\\r\\r \\\"O\\\" :{\\n\\n\\r\\r\\\"\\\\/\\\\r9\\\\b8\\\"\\r:\\r \\\"\\\\/S\\\"  \\t\\r,\\r\\t\\n  \\\"B1uH\\\\b\\\"\\t:{}\\r\\r ,\\n\\t\\t\\\"\\\\\\\\V]\\\":\\t 0e0\\r\\n\\t \\n}\\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n':'W' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "W");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// 'O':'\\V]' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "O");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\V]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// 'O':'/\r9\b8' = '/S'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "O");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\r9\b8");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("/S", cJSON_string(child));
	}
	{
		// '\b\\' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b00c26c1a9014defea63b0a130929452) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t{ \"t\"\r\r\n\r:false  \t, \n \"\"\r\n \n\r:\r\ttrue}'
	const char* json = " \t{ \"t\"\r\r\n\r:false  \t, \n \"\"\r\n \n\r:\r\ttrue}";
	std::cerr << "Plain JSON string from model: " << " \\t{ \\\"t\\\"\\r\\r\\n\\r:false  \\t, \\n \\\"\\\"\\r\\n \\n\\r:\\r\\ttrue}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 't' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_36a97b8e8f02e1b871c17615d31c06f0) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r \n\r\"QK4\"\n\r:\"\\\"\\r\\r\\nH\"\r ,\t\r\r\r\"\\fz\"\r\t:\t\n\"\"\t}'
	const char* json = "{\r \n\r\"QK4\"\n\r:\"\\\"\\r\\r\\nH\"\r ,\t\r\r\r\"\\fz\"\r\t:\t\n\"\"\t}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\n\\r\\\"QK4\\\"\\n\\r:\\\"\\\\\\\"\\\\r\\\\r\\\\nH\\\"\\r ,\\t\\r\\r\\r\\\"\\\\fz\\\"\\r\\t:\\t\\n\\\"\\\"\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\fz' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fz");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// 'QK4' = '\"\r\r\nH'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "QK4");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"\r\r\nH", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_180122f993927fb7415e37fcf50e2555) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{ \t\"\\b\"\r\r:null \r\n\r  }\n '
	const char* json = "\r{ \t\"\\b\"\r\r:null \r\n\r  }\n ";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\t\\\"\\\\b\\\"\\r\\r:null \\r\\n\\r  }\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_defe94f47378a640daa540bfe84f170c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\r\r{\">\" \r:  null\r,\r\n\"n$bg\\r`Y\\t\"\n \n: \r\rnull }\t '
	const char* json = "\n\r\r{\">\" \r:  null\r,\r\n\"n$bg\\r`Y\\t\"\n \n: \r\rnull }\t ";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\r{\\\">\\\" \\r:  null\\r,\\r\\n\\\"n$bg\\\\r`Y\\\\t\\\"\\n \\n: \\r\\rnull }\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'n$bg\r`Y\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "n$bg\r`Y\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '>' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ">");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_98c3ca4f85efe5adc3ef6583fb8438f8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n{\r  \t\n\r\"\" :false\n}'
	const char* json = "\n{\r  \t\n\r\"\" :false\n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r  \\t\\n\\r\\\"\\\" :false\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b62a5246bf0adced4f14295a9f47e87e) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\n\r\r \"\\/F\\\\o\":\n\t\ntrue\t \n\r\t\r\n,\r\r\t\r\n\r \"\"\r:true \n} '
	const char* json = "{\t\n\r\r \"\\/F\\\\o\":\n\t\ntrue\t \n\r\t\r\n,\r\r\t\r\n\r \"\"\r:true \n} ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\r\\r \\\"\\\\/F\\\\\\\\o\\\":\\n\\t\\ntrue\\t \\n\\r\\t\\r\\n,\\r\\r\\t\\r\\n\\r \\\"\\\"\\r:true \\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '/F\\o' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/F\\o");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_009c129320dbcc4cff3751a54cf1c2a7) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\\\\61\\r\\f\\b\\n\":{\",\" :[  \n790.0371E+0, \r []]\n\t,\r \n\"u\\\"\\rp@\\/\":\n\n null\t\r\n\r}\t\n \r,\r\r\r\"\" \t \t\r:\tnull\r\r, \r\n\n\"|\" \t\r:\t  {\t}  \t}\n'
	const char* json = "{\"\\\\61\\r\\f\\b\\n\":{\",\" :[  \n790.0371E+0, \r []]\n\t,\r \n\"u\\\"\\rp@\\/\":\n\n null\t\r\n\r}\t\n \r,\r\r\r\"\" \t \t\r:\tnull\r\r, \r\n\n\"|\" \t\r:\t  {\t}  \t}\n";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\\\\\61\\\\r\\\\f\\\\b\\\\n\\\":{\\\",\\\" :[  \\n790.0371E+0, \\r []]\\n\\t,\\r \\n\\\"u\\\\\\\"\\\\rp@\\\\/\\\":\\n\\n null\\t\\r\\n\\r}\\t\\n \\r,\\r\\r\\r\\\"\\\" \\t \\t\\r:\\tnull\\r\\r, \\r\\n\\n\\\"|\\\" \\t\\r:\\t  {\\t}  \\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\\61\r\f\b\n':',':0 = '790.0371'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\61\r\f\b\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ",");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(790.0371, cJSON_double(child));
	}
	{
		// '\\61\r\f\b\n':'u\"\rp@/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\61\r\f\b\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "u\"\rp@/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3954712ff6c39021c45d23f45f22c984) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n \n{\n\r\r \"\\\\\" \n\r\r\n:\t\t\r\r[]\t \n}\t '
	const char* json = "\n \n{\n\r\r \"\\\\\" \n\r\r\n:\t\t\r\r[]\t \n}\t ";
	std::cerr << "Plain JSON string from model: " << "\\n \\n{\\n\\r\\r \\\"\\\\\\\\\\\" \\n\\r\\r\\n:\\t\\t\\r\\r[]\\t \\n}\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_50664b8921296b5c4b06c94a44fe41eb) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"\\/\\r\":\rtrue}'
	const char* json = "{\r\"\\/\\r\":\rtrue}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\/\\\\r\\\":\\rtrue}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4826a570440156e87acd77b669ba7c6f) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\n\r\n\"\\r\\r\\\\\\r\"\r\t\n :\r \t{\n} , \n \"\\\\mO\\/(E3(\":true\t\n }\t '
	const char* json = "{\t\n\r\n\"\\r\\r\\\\\\r\"\r\t\n :\r \t{\n} , \n \"\\\\mO\\/(E3(\":true\t\n }\t ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\r\\n\\\"\\\\r\\\\r\\\\\\\\\\\\r\\\"\\r\\t\\n :\\r \\t{\\n} , \\n \\\"\\\\\\\\mO\\\\/(E3(\\\":true\\t\\n }\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\mO/(E3(' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\mO/(E3(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bc4215a79c67e7a6c7486b612d6d813d) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\r \r\"\\\"\"\t:\t{ \t \"f\":[[]\r]\t\t ,\n\t \"\\/f\": true\t\n\t,\t\"\\/|\\r\" :\t-0e0702 \r\n} \r\n}\n'
	const char* json = "{\t\r \r\"\\\"\"\t:\t{ \t \"f\":[[]\r]\t\t ,\n\t \"\\/f\": true\t\n\t,\t\"\\/|\\r\" :\t-0e0702 \r\n} \r\n}\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r \\r\\\"\\\\\\\"\\\"\\t:\\t{ \\t \\\"f\\\":[[]\\r]\\t\\t ,\\n\\t \\\"\\\\/f\\\": true\\t\\n\\t,\\t\\\"\\\\/|\\\\r\\\" :\\t-0e0702 \\r\\n} \\r\\n}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"':'/f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\"':'/|\r' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/|\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5e046f6009c997a57e1579ea58643a71) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\t\t \"ZjRG\\bP\\n\\r(\\\"\\t\"\n:false\r,\n\"\"\r \n:\t false\r }'
	const char* json = "{\t\n\t\t \"ZjRG\\bP\\n\\r(\\\"\\t\"\n:false\r,\n\"\"\r \n:\t false\r }";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\t\\t \\\"ZjRG\\\\bP\\\\n\\\\r(\\\\\\\"\\\\t\\\"\\n:false\\r,\\n\\\"\\\"\\r \\n:\\t false\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'ZjRG\bP\n\r(\"\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ZjRG\bP\n\r(\"\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_12cd6cecfff307f2ce8c441fb602ff20) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\r \"\\/!\\bP\"\r\n\r:true\n,\n\"}\\/X\\\\uF\\niB]\"\n\t\t:\n\tnull}'
	const char* json = "{\t\n\r \"\\/!\\bP\"\r\n\r:true\n,\n\"}\\/X\\\\uF\\niB]\"\n\t\t:\n\tnull}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\r \\\"\\\\/!\\\\bP\\\"\\r\\n\\r:true\\n,\\n\\\"}\\\\/X\\\\\\\\uF\\\\niB]\\\"\\n\\t\\t:\\n\\tnull}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/!\bP' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/!\bP");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '}/X\\uF\niB]' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}/X\\uF\niB]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a7a9f07e0857a0c46629f00106dc6224) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r \t  \"\\/[$\":\n\t\r{}\t\r,\"\\\"\\\"\"\n:\nnull\r,\t\r\";\\/\"\t\t:4.0}'
	const char* json = "{\r \t  \"\\/[$\":\n\t\r{}\t\r,\"\\\"\\\"\"\n:\nnull\r,\t\r\";\\/\"\t\t:4.0}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t  \\\"\\\\/[$\\\":\\n\\t\\r{}\\t\\r,\\\"\\\\\\\"\\\\\\\"\\\"\\n:\\nnull\\r,\\t\\r\\\";\\\\/\\\"\\t\\t:4.0}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ';/' = '4.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ";/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(4.0, cJSON_double(child));
	}
	{
		// '\"\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_eaea97897d0947c085432b82684bca94) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\t \t\"\\/\"\n :\"+D\"\t\t  , \t\n\t\t\"\"\t \t\n:\n\ttrue\t,\n\n \"\\t\\r\" \t\n:\t\t-810.0\t\t,\t \"\\f\"  :\nfalse\t, \r\"\\\"\"\n :[\t \r]\t\n}\t'
	const char* json = "{\n\t \t\"\\/\"\n :\"+D\"\t\t  , \t\n\t\t\"\"\t \t\n:\n\ttrue\t,\n\n \"\\t\\r\" \t\n:\t\t-810.0\t\t,\t \"\\f\"  :\nfalse\t, \r\"\\\"\"\n :[\t \r]\t\n}\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t \\t\\\"\\\\/\\\"\\n :\\\"+D\\\"\\t\\t  , \\t\\n\\t\\t\\\"\\\"\\t \\t\\n:\\n\\ttrue\\t,\\n\\n \\\"\\\\t\\\\r\\\" \\t\\n:\\t\\t-810.0\\t\\t,\\t \\\"\\\\f\\\"  :\\nfalse\\t, \\r\\\"\\\\\\\"\\\"\\n :[\\t \\r]\\t\\n}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\t\r' = '-810.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-810.0, cJSON_double(child));
	}
	{
		// '\f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/' = '+D'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("+D", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_83211d9380ab9dfb7a069d95d1950616) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' { \n\r\t\"\\t\"  : {}} '
	const char* json = " { \n\r\t\"\\t\"  : {}} ";
	std::cerr << "Plain JSON string from model: " << " { \\n\\r\\t\\\"\\\\t\\\"  : {}} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_ce1ef32406de561f931228b926d45952) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"\\f\\/\" : \t[] }\n\r'
	const char* json = "{\"\\f\\/\" : \t[] }\n\r";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\f\\\\/\\\" : \\t[] }\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_5d2c971d8a7ad5af785487b08e905800) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\n\r\t\n \"(\\f3\":true,\r\"\"\r  :\n true\n}'
	const char* json = "{\r\n\r\t\n \"(\\f3\":true,\r\"\"\r  :\n true\n}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\r\\t\\n \\\"(\\\\f3\\\":true,\\r\\\"\\\"\\r  :\\n true\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '(\f3' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(\f3");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8b36b75ce66ffee23256754c42689415) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\t\r\"D\\t\"\r \n:\"\\\\\"\r\r } '
	const char* json = "\t{\t\r\"D\\t\"\r \n:\"\\\\\"\r\r } ";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\r\\\"D\\\\t\\\"\\r \\n:\\\"\\\\\\\\\\\"\\r\\r } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'D\t' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "D\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d01b4e2bc0bff31d32b9d3a1cbc0e73c) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"M\\t\":null}'
	const char* json = "{\"M\\t\":null}";
	std::cerr << "Plain JSON string from model: " << "{\\\"M\\\\t\\\":null}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'M\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "M\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7cc2f8049f06564fdc91facb2359915a) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t \r\"\\\"\" \n :null , \t\n\"\"\r: \rnull}'
	const char* json = "{\t \r\"\\\"\" \n :null , \t\n\"\"\r: \rnull}";
	std::cerr << "Plain JSON string from model: " << "{\\t \\r\\\"\\\\\\\"\\\" \\n :null , \\t\\n\\\"\\\"\\r: \\rnull}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_30a837ee972e5aa99d23a047e65c0fdd) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t\n{ \t\"\\n\\b\"\t\t\r\t:0\t,\"R\"  \n: -410\t ,\"\":\"0\" \r\t ,    \t\"\\t\"\t :true \n,\r\"uv\" \t :true\t\t\n\r\r\r}'
	const char* json = "\t\n{ \t\"\\n\\b\"\t\t\r\t:0\t,\"R\"  \n: -410\t ,\"\":\"0\" \r\t ,    \t\"\\t\"\t :true \n,\r\"uv\" \t :true\t\t\n\r\r\r}";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{ \\t\\\"\\\\n\\\\b\\\"\\t\\t\\r\\t:0\\t,\\\"R\\\"  \\n: -410\\t ,\\\"\\\":\\\"0\\\" \\r\\t ,    \\t\\\"\\\\t\\\"\\t :true \\n,\\r\\\"uv\\\" \\t :true\\t\\t\\n\\r\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("0", cJSON_string(child));
	}
	{
		// '\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'R' = '-410'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "R");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-410, cJSON_double(child));
	}
	{
		// '\n\b' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// 'uv' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "uv");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1220cf8931f51ef186be72f58b7612ea) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\r \t\"\" \r\r\r:\r\n []\r ,\n\"\\t\"\n:\r\n\t0.08094 \t,\r\n\"\\\\\\f?{\":  \t{},\t\"\\b\" : \nfalse\t\n\t}'
	const char* json = "\r{\r \t\"\" \r\r\r:\r\n []\r ,\n\"\\t\"\n:\r\n\t0.08094 \t,\r\n\"\\\\\\f?{\":  \t{},\t\"\\b\" : \nfalse\t\n\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r \\t\\\"\\\" \\r\\r\\r:\\r\\n []\\r ,\\n\\\"\\\\t\\\"\\n:\\r\\n\\t0.08094 \\t,\\r\\n\\\"\\\\\\\\\\\\f?{\\\":  \\t{},\\t\\\"\\\\b\\\" : \\nfalse\\t\\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = '0.08094'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.08094, cJSON_double(child));
	}
	{
		// '\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d76554e34ceab686146c1216377cd7f3) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\t \"Z]\":true\n\n}\r'
	const char* json = "\r{\t \"Z]\":true\n\n}\r";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t \\\"Z]\\\":true\\n\\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Z]' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Z]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2c3ac88afc2556b16369ebf77610a178) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\t\r{  \t\n\"\\n\"\n: \"\\\\\"\t}\n\t'
	const char* json = "\r\t\r{  \t\n\"\\n\"\n: \"\\\\\"\t}\n\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\r{  \\t\\n\\\"\\\\n\\\"\\n: \\\"\\\\\\\\\\\"\\t}\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d13cb5e8efb69e0f8ad3d0060d7cc4d5) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\n\n\r \"\":0E-0\r\n  }\t'
	const char* json = "\r{\n\n\r \"\":0E-0\r\n  }\t";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\n\\r \\\"\\\":0E-0\\r\\n  }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6e721ab322517beac7ebc12827cddda3) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{ \"\"\r\r\t:true, \n\"\\\"\\/s\"\r \t:\t{\t} \t\r\r\r,\n\r\r\"H\\n\" :\n{\t\n\r\t \"\\/\\f\\f\"\r :\tfalse \n \n\r}\r\n\t\n,\"\\\\\"\t\n:80e+0880\r\n\r}\n'
	const char* json = "\n{ \"\"\r\r\t:true, \n\"\\\"\\/s\"\r \t:\t{\t} \t\r\r\r,\n\r\r\"H\\n\" :\n{\t\n\r\t \"\\/\\f\\f\"\r :\tfalse \n \n\r}\r\n\t\n,\"\\\\\"\t\n:80e+0880\r\n\r}\n";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\\"\\\"\\r\\r\\t:true, \\n\\\"\\\\\\\"\\\\/s\\\"\\r \\t:\\t{\\t} \\t\\r\\r\\r,\\n\\r\\r\\\"H\\\\n\\\" :\\n{\\t\\n\\r\\t \\\"\\\\/\\\\f\\\\f\\\"\\r :\\tfalse \\n \\n\\r}\\r\\n\\t\\n,\\\"\\\\\\\\\\\"\\t\\n:80e+0880\\r\\n\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'H\n':'/\f\f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "H\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\f\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\' = 'inf'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		// Testing for NaN or Infinity is not implemented
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e058fc983dbeec3a7f427b2facf994a8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{\r\"d\"\t\t\t\r:\rfalse,\n\"\":\rnull \n }'
	const char* json = "\t{\r\"d\"\t\t\t\r:\rfalse,\n\"\":\rnull \n }";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\\"d\\\"\\t\\t\\t\\r:\\rfalse,\\n\\\"\\\":\\rnull \\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'd' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "d");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6090b500c10d5c6f19371eb7d9c8a9cb) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{  \"Q\"\r:\"\"\r\n\n,\"\\/\" :\n{\t\"_\\\\J\\/S[\\f\"\r\t\r:\r\ttrue\r}\r \n\t\t\r}'
	const char* json = "{  \"Q\"\r:\"\"\r\n\n,\"\\/\" :\n{\t\"_\\\\J\\/S[\\f\"\r\t\r:\r\ttrue\r}\r \n\t\t\r}";
	std::cerr << "Plain JSON string from model: " << "{  \\\"Q\\\"\\r:\\\"\\\"\\r\\n\\n,\\\"\\\\/\\\" :\\n{\\t\\\"_\\\\\\\\J\\\\/S[\\\\f\\\"\\r\\t\\r:\\r\\ttrue\\r}\\r \\n\\t\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Q' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Q");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '/':'_\\J/S[\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "_\\J/S[\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_69511389f189ee9d08df53738b88a223) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\"q\\t9\"\r\n \n\n\r:true}\t\r\t'
	const char* json = "{\n\"q\\t9\"\r\n \n\n\r:true}\t\r\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"q\\\\t9\\\"\\r\\n \\n\\n\\r:true}\\t\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'q\t9' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "q\t9");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bd68495fd713fdfad53d9f5ea6134b45) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r {\r  \n \"\" \n\t\t:\t\r\tnull \t\t }'
	const char* json = "\r {\r  \n \"\" \n\t\t:\t\r\tnull \t\t }";
	std::cerr << "Plain JSON string from model: " << "\\r {\\r  \\n \\\"\\\" \\n\\t\\t:\\t\\r\\tnull \\t\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ed05aa0e1b34e864e9d184d816f8da64) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\t\n\"\"\n\n\n:\r\tfalse \r\n ,\"v9\\t \\\"(Q)\":null\t \t \r}'
	const char* json = "{\n\t\n\"\"\n\n\n:\r\tfalse \r\n ,\"v9\\t \\\"(Q)\":null\t \t \r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\n\\\"\\\"\\n\\n\\n:\\r\\tfalse \\r\\n ,\\\"v9\\\\t \\\\\\\"(Q)\\\":null\\t \\t \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'v9\t \"(Q)' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "v9\t \"(Q)");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4c9dbfeda86dd1cfad2d0b066064acaa) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \"'\\t]\"\r\n\n:true\t,\n\"\" \n:true\n\t\t\r ,\r\t\"\\b\":\t\tfalse }'
	const char* json = "{ \"'\\t]\"\r\n\n:true\t,\n\"\" \n:true\n\t\t\r ,\r\t\"\\b\":\t\tfalse }";
	std::cerr << "Plain JSON string from model: " << "{ \\\"'\\\\t]\\\"\\r\\n\\n:true\\t,\\n\\\"\\\" \\n:true\\n\\t\\t\\r ,\\r\\t\\\"\\\\b\\\":\\t\\tfalse }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// ''\t]' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "'\t]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ac5cd8373b4b3f5f2ade1d6f48f4e73a) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n\t\n{\r\r\"\\t\":\nnull,\t\n\"\" \n:\r{} }'
	const char* json = "\n\t\n{\r\r\"\\t\":\nnull,\t\n\"\" \n:\r{} }";
	std::cerr << "Plain JSON string from model: " << "\\n\\t\\n{\\r\\r\\\"\\\\t\\\":\\nnull,\\t\\n\\\"\\\" \\n:\\r{} }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_64f61eb6146fd4c12a4e5889b02e5b72) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t\"\\\\\"\n\n\r :\"\\b\"\t\t\t \t}'
	const char* json = "{\t\"\\\\\"\n\n\r :\"\\b\"\t\t\t \t}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\\\\\\\\"\\n\\n\\r :\\\"\\\\b\\\"\\t\\t\\t \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\' = '\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\b", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9e478c2c02a4465c86b92a80694ec032) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{\t\t\r\"\\nHkI\":\r[null\n\r ,\tfalse\r\n]}\t\n'
	const char* json = "\t{\t\t\r\"\\nHkI\":\r[null\n\r ,\tfalse\r\n]}\t\n";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\t\\r\\\"\\\\nHkI\\\":\\r[null\\n\\r ,\\tfalse\\r\\n]}\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\nHkI':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nHkI");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\nHkI':1 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nHkI");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_06d685d2a91ef9211393414d7a42a9c0) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\"%\":\r\r[]\t }'
	const char* json = "{\n\"%\":\r\r[]\t }";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"%\\\":\\r\\r[]\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_30f5e5321d076312403a2a13ccdb0ec9) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \n\n\n\"@\\r\\r\":\r  []\r \t\t, \n\"\\n\"\n:null\n\t,\t\t\t\"\":\t\r\t\"s\\b\"} \r\r'
	const char* json = "{ \n\n\n\"@\\r\\r\":\r  []\r \t\t, \n\"\\n\"\n:null\n\t,\t\t\t\"\":\t\r\t\"s\\b\"} \r\r";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\n\\n\\\"@\\\\r\\\\r\\\":\\r  []\\r \\t\\t, \\n\\\"\\\\n\\\"\\n:null\\n\\t,\\t\\t\\t\\\"\\\":\\t\\r\\t\\\"s\\\\b\\\"} \\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 's\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("s\b", cJSON_string(child));
	}
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a7e2cdfe34b2e4b5fe78e037cd37ca98) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t\r\t{\n\t\n\r\"\\\\<\":[\t0,\t\"\"] \r,\t\"JU\"\n\n:\n\t\ntrue ,\t\n\t \"c \"\r:false\n\t}'
	const char* json = "\t\r\t{\n\t\n\r\"\\\\<\":[\t0,\t\"\"] \r,\t\"JU\"\n\n:\n\t\ntrue ,\t\n\t \"c \"\r:false\n\t}";
	std::cerr << "Plain JSON string from model: " << "\\t\\r\\t{\\n\\t\\n\\r\\\"\\\\\\\\<\\\":[\\t0,\\t\\\"\\\"] \\r,\\t\\\"JU\\\"\\n\\n:\\n\\t\\ntrue ,\\t\\n\\t \\\"c \\\"\\r:false\\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'JU' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "JU");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\\<':0 = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\<");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\\<':1 = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\<");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// 'c ' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "c ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a1e07d0f4cf635a298c81548b4db4b9a) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\t\"\\r\"\n:null,\n\"k;0\"\t:\"\\\\\"\r\r,\"R!\\b\"\n\r\t \t:[], \r\t\r\n\t\"\":true, \r\n\r\"=\":\rtrue\r,\"\\bh\"\r :\t\n \"-\" \r, \"\\b\"\n\r\t: \ntrue\t\r, \r\t \"s\" :\rnull,\r \r\r\t\"jp\\\\9\" \r:\t\r[\n0E-03430\r\t]\r\n \t ,\r\n \"\\/\\b\\n\\\"\\\"\"\t\n: \n\";\"\t}\t\r'
	const char* json = "{\r\t\"\\r\"\n:null,\n\"k;0\"\t:\"\\\\\"\r\r,\"R!\\b\"\n\r\t \t:[], \r\t\r\n\t\"\":true, \r\n\r\"=\":\rtrue\r,\"\\bh\"\r :\t\n \"-\" \r, \"\\b\"\n\r\t: \ntrue\t\r, \r\t \"s\" :\rnull,\r \r\r\t\"jp\\\\9\" \r:\t\r[\n0E-03430\r\t]\r\n \t ,\r\n \"\\/\\b\\n\\\"\\\"\"\t\n: \n\";\"\t}\t\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"\\\\r\\\"\\n:null,\\n\\\"k;0\\\"\\t:\\\"\\\\\\\\\\\"\\r\\r,\\\"R!\\\\b\\\"\\n\\r\\t \\t:[], \\r\\t\\r\\n\\t\\\"\\\":true, \\r\\n\\r\\\"=\\\":\\rtrue\\r,\\\"\\\\bh\\\"\\r :\\t\\n \\\"-\\\" \\r, \\\"\\\\b\\\"\\n\\r\\t: \\ntrue\\t\\r, \\r\\t \\\"s\\\" :\\rnull,\\r \\r\\r\\t\\\"jp\\\\\\\\9\\\" \\r:\\t\\r[\\n0E-03430\\r\\t]\\r\\n \\t ,\\r\\n \\\"\\\\/\\\\b\\\\n\\\\\\\"\\\\\\\"\\\"\\t\\n: \\n\\\";\\\"\\t}\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '/\b\n\"\"' = ';'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\b\n\"\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(";", cJSON_string(child));
	}
	{
		// '\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 's' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "s");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\bh' = '-'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bh");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("-", cJSON_string(child));
	}
	{
		// '=' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'k;0' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "k;0");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	{
		// 'jp\\9':0 = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "jp\\9");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_37ebf382c1a4b75983e1c65a67e64135) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t {\t\r\n\"\\\"\" :\r{}   \t\t}'
	const char* json = "\t {\t\r\n\"\\\"\" :\r{}   \t\t}";
	std::cerr << "Plain JSON string from model: " << "\\t {\\t\\r\\n\\\"\\\\\\\"\\\" :\\r{}   \\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_a92973d86ea70c8705a49de79439a2b2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '  \n{\t\t\r\"-B)I\\/\\n.\\\\HEh*\" \t\t:\r\t\r[ { } ]  \n}\r'
	const char* json = "  \n{\t\t\r\"-B)I\\/\\n.\\\\HEh*\" \t\t:\r\t\r[ { } ]  \n}\r";
	std::cerr << "Plain JSON string from model: " << "  \\n{\\t\\t\\r\\\"-B)I\\\\/\\\\n.\\\\\\\\HEh*\\\" \\t\\t:\\r\\t\\r[ { } ]  \\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_fb0a994a2b10600d2de1efce6637d227) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\n\"\"\n: \rfalse\t}\t\t'
	const char* json = "\r{\n\"\"\n: \rfalse\t}\t\t";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\\"\\\"\\n: \\rfalse\\t}\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f81cc3bf8ed29b0d23edaf149b10d651) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{\t\"\" :\n\"\\/\"\r}\n\t\t'
	const char* json = "\t{\t\"\" :\n\"\\/\"\r}\n\t\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\\"\\\" :\\n\\\"\\\\/\\\"\\r}\\n\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '/'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("/", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a3fc8904f5cfa1bdb7cc1bfac5bbfbbb) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\r\r\"\"\n:\"4\\f\\n\" \r,\"\\\"\": false\t\r,   \"o\"\t\n\n:\r90\t\n\t\r\n ,\r\t\r\"\\f\"  \t:\t\"\\n\\\\'\\\"=\"\t\t, \"^\"\r\r:false\t\r\r, \r  \t\"\\n\": true\n} '
	const char* json = "\r{\r\r\"\"\n:\"4\\f\\n\" \r,\"\\\"\": false\t\r,   \"o\"\t\n\n:\r90\t\n\t\r\n ,\r\t\r\"\\f\"  \t:\t\"\\n\\\\'\\\"=\"\t\t, \"^\"\r\r:false\t\r\r, \r  \t\"\\n\": true\n} ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r\\r\\\"\\\"\\n:\\\"4\\\\f\\\\n\\\" \\r,\\\"\\\\\\\"\\\": false\\t\\r,   \\\"o\\\"\\t\\n\\n:\\r90\\t\\n\\t\\r\\n ,\\r\\t\\r\\\"\\\\f\\\"  \\t:\\t\\\"\\\\n\\\\\\\\'\\\\\\\"=\\\"\\t\\t, \\\"^\\\"\\r\\r:false\\t\\r\\r, \\r  \\t\\\"\\\\n\\\": true\\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '4\f\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("4\f\n", cJSON_string(child));
	}
	{
		// '\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\f' = '\n\\'\"='
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n\\'\"=", cJSON_string(child));
	}
	{
		// 'o' = '90'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "o");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(90, cJSON_double(child));
	}
	{
		// '^' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "^");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_79997fae298d1cab7ae7363161335409) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\r{\"J3\\t\\n\":\t 0.0e-0\r ,\t\n\"\":{\n} \t \n\n,\r\n\n\n\"UYCI\"\t\n\t\t\t\n:[\t\t\nfalse \n \r\r]\n\t,\n\"\\\"G\\\"Z\"\r\t\r \t:null }'
	const char* json = "\r\r{\"J3\\t\\n\":\t 0.0e-0\r ,\t\n\"\":{\n} \t \n\n,\r\n\n\n\"UYCI\"\t\n\t\t\t\n:[\t\t\nfalse \n \r\r]\n\t,\n\"\\\"G\\\"Z\"\r\t\r \t:null }";
	std::cerr << "Plain JSON string from model: " << "\\r\\r{\\\"J3\\\\t\\\\n\\\":\\t 0.0e-0\\r ,\\t\\n\\\"\\\":{\\n} \\t \\n\\n,\\r\\n\\n\\n\\\"UYCI\\\"\\t\\n\\t\\t\\t\\n:[\\t\\t\\nfalse \\n \\r\\r]\\n\\t,\\n\\\"\\\\\\\"G\\\\\\\"Z\\\"\\r\\t\\r \\t:null }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'J3\t\n' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "J3\t\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '\"G\"Z' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"G\"Z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'UYCI':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "UYCI");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6b495aebfad862c8c1afadb34c6dd404) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \t\"~=\\b\" \n\t:false\r\r\r} '
	const char* json = "{ \t\"~=\\b\" \n\t:false\r\r\r} ";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"~=\\\\b\\\" \\n\\t:false\\r\\r\\r} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '~=\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "~=\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_682aa15eaef03ea18a209fdf69a5e436) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\r\"\"\r \t:false\r}\n \r'
	const char* json = "{\n\r\"\"\r \t:false\r}\n \r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\\"\\\"\\r \\t:false\\r}\\n \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1f96b72c93ebec85084e62981b27b531) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \n\n\"{P\\f\\r[\"\r\r\t\t:[false\r\r,\"\\\"\\r\\r\\\"\\tDr\"]\t,\r\"\":\rtrue \n,\t\n\r\"\\t}\\nU\" \r:[[\n{} \r\n\r\r,null,null \n\t]\t\r\t], \r\t \"c\" \t\n\t:true \t}'
	const char* json = "{ \n\n\"{P\\f\\r[\"\r\r\t\t:[false\r\r,\"\\\"\\r\\r\\\"\\tDr\"]\t,\r\"\":\rtrue \n,\t\n\r\"\\t}\\nU\" \r:[[\n{} \r\n\r\r,null,null \n\t]\t\r\t], \r\t \"c\" \t\n\t:true \t}";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\n\\\"{P\\\\f\\\\r[\\\"\\r\\r\\t\\t:[false\\r\\r,\\\"\\\\\\\"\\\\r\\\\r\\\\\\\"\\\\tDr\\\"]\\t,\\r\\\"\\\":\\rtrue \\n,\\t\\n\\r\\\"\\\\t}\\\\nU\\\" \\r:[[\\n{} \\r\\n\\r\\r,null,null \\n\\t]\\t\\r\\t], \\r\\t \\\"c\\\" \\t\\n\\t:true \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\t}\nU':0:1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t}\nU");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\t}\nU':0:2 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t}\nU");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'c' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "c");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '{P\f\r[':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "{P\f\r[");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '{P\f\r[':1 = '\"\r\r\"\tDr'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "{P\f\r[");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"\r\r\"\tDr", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b6ffd8051a98d6fb76ca28cb8ed437f7) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' { \"(\\r_\"  :false}'
	const char* json = " { \"(\\r_\"  :false}";
	std::cerr << "Plain JSON string from model: " << " { \\\"(\\\\r_\\\"  :false}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '(\r_' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(\r_");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fb2ed5bc3166b966e48fdb246ba6e852) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{  \r\n\"I#t_\\r\":\r\"K\" \t,\r \t \t\"\" \t:false\t\r}\r'
	const char* json = "{  \r\n\"I#t_\\r\":\r\"K\" \t,\r \t \t\"\" \t:false\t\r}\r";
	std::cerr << "Plain JSON string from model: " << "{  \\r\\n\\\"I#t_\\\\r\\\":\\r\\\"K\\\" \\t,\\r \\t \\t\\\"\\\" \\t:false\\t\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'I#t_\r' = 'K'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "I#t_\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("K", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_91eee61bae09dfdb446505ba9f9a7d84) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n\n\n\r\"T\\n\"\n\t:\"M\\f\"}'
	const char* json = "{\n\n\n\n\r\"T\\n\"\n\t:\"M\\f\"}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\n\\n\\r\\\"T\\\\n\\\"\\n\\t:\\\"M\\\\f\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'T\n' = 'M\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "T\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("M\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_be3001ed30796416124969d9d8eeb08d) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \r\n\t\r\r \"\"\r\t:\ttrue\r}\r\n'
	const char* json = "{ \r\n\t\r\r \"\"\r\t:\ttrue\r}\r\n";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\n\\t\\r\\r \\\"\\\"\\r\\t:\\ttrue\\r}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1a9e30009361ee851a827248e0bd2ecb) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"\\\"\"\r\n\n:\"#:\\t\"\r\t\n,\n\"\\n\\tW\"  : \r-0E0}'
	const char* json = "{\r\"\\\"\"\r\n\n:\"#:\\t\"\r\t\n,\n\"\\n\\tW\"  : \r-0E0}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\\\\"\\\"\\r\\n\\n:\\\"#:\\\\t\\\"\\r\\t\\n,\\n\\\"\\\\n\\\\tW\\\"  : \\r-0E0}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n\tW' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\tW");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// '\"' = '#:\t'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("#:\t", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_661f8ca2e1ec3abd8dae456d3e08e96c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\"\\/Cu\\r\\/=\\f\"\n :\t\t\r\nfalse\r\r\r,\r\r\"oj#\"\n\n\n\n:\"!^K\\\\7\\\"\"\r, \t\r  \"\"\t\t :0e0\t} '
	const char* json = "\r{\"\\/Cu\\r\\/=\\f\"\n :\t\t\r\nfalse\r\r\r,\r\r\"oj#\"\n\n\n\n:\"!^K\\\\7\\\"\"\r, \t\r  \"\"\t\t :0e0\t} ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\\/Cu\\\\r\\\\/=\\\\f\\\"\\n :\\t\\t\\r\\nfalse\\r\\r\\r,\\r\\r\\\"oj#\\\"\\n\\n\\n\\n:\\\"!^K\\\\\\\\7\\\\\\\"\\\"\\r, \\t\\r  \\\"\\\"\\t\\t :0e0\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '/Cu\r/=\f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/Cu\r/=\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'oj#' = '!^K\\7\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "oj#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("!^K\\7\"", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_17abaf5cdbb5fdd69ca7edcaa2e9b187) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' \r {\t\t \"f&)\\\\\" \r\t\n\n: \r{\t\n\n\t\"\\\\<\\t\"\t\t\t\r \r: 70}\r   }'
	const char* json = " \r {\t\t \"f&)\\\\\" \r\t\n\n: \r{\t\n\n\t\"\\\\<\\t\"\t\t\t\r \r: 70}\r   }";
	std::cerr << "Plain JSON string from model: " << " \\r {\\t\\t \\\"f&)\\\\\\\\\\\" \\r\\t\\n\\n: \\r{\\t\\n\\n\\t\\\"\\\\\\\\<\\\\t\\\"\\t\\t\\t\\r \\r: 70}\\r   }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'f&)\\':'\\<\t' = '70'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "f&)\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\<\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(70, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d2ed8c97919eef5f14472393cdb99fdc) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\n\"\\/\\/\\bv\":null\n}\r'
	const char* json = "\r{\n\"\\/\\/\\bv\":null\n}\r";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\\"\\\\/\\\\/\\\\bv\\\":null\\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '//\bv' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "//\bv");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1df3b346331d4eba88c7cb3726d60da8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\t\t\r \r \"<\\\\B\"\t:\rfalse\n,  \"U\"\r\n\r:\rtrue\t\n \t}\t'
	const char* json = "\t{\t\t\r \r \"<\\\\B\"\t:\rfalse\n,  \"U\"\r\n\r:\rtrue\t\n \t}\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\t\\r \\r \\\"<\\\\\\\\B\\\"\\t:\\rfalse\\n,  \\\"U\\\"\\r\\n\\r:\\rtrue\\t\\n \\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '<\\B' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<\\B");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'U' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "U");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_638fd780bf9f1dd1980f24481e11f30e) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n\"\"\t\t\n\n \n:false\r  \t \r}'
	const char* json = "{\n\n\"\"\t\t\n\n \n:false\r  \t \r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\\"\\\"\\t\\t\\n\\n \\n:false\\r  \\t \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7bfea7f7d3c52ba6ae78ccc376f5d3bd) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"rvh\\nq\"\t\r\r\t:{\t\r\n\r\"8\"\n\r\r:\r[\n\t {},null \r\t]\r ,\t\n\t\"\":\n [\r]\t\t\t} \r\t  , \n\r\t \"\\\\]TK\\n\"\n\n:  \t[\r]\r\r}'
	const char* json = "{\r\"rvh\\nq\"\t\r\r\t:{\t\r\n\r\"8\"\n\r\r:\r[\n\t {},null \r\t]\r ,\t\n\t\"\":\n [\r]\t\t\t} \r\t  , \n\r\t \"\\\\]TK\\n\"\n\n:  \t[\r]\r\r}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"rvh\\\\nq\\\"\\t\\r\\r\\t:{\\t\\r\\n\\r\\\"8\\\"\\n\\r\\r:\\r[\\n\\t {},null \\r\\t]\\r ,\\t\\n\\t\\\"\\\":\\n [\\r]\\t\\t\\t} \\r\\t  , \\n\\r\\t \\\"\\\\\\\\]TK\\\\n\\\"\\n\\n:  \\t[\\r]\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'rvh\nq':'8':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "rvh\nq");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "8");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_da8687d5d47a7903b3f97cfee80b2259) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r {\t\r\t\r\"t\\n\\\\\\n6<L\":[true\n\n], \t\r\r\t \"Hkq\"\t:true\r}\r'
	const char* json = "\r {\t\r\t\r\"t\\n\\\\\\n6<L\":[true\n\n], \t\r\r\t \"Hkq\"\t:true\r}\r";
	std::cerr << "Plain JSON string from model: " << "\\r {\\t\\r\\t\\r\\\"t\\\\n\\\\\\\\\\\\n6<L\\\":[true\\n\\n], \\t\\r\\r\\t \\\"Hkq\\\"\\t:true\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 't\n\\\n6<L':0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "t\n\\\n6<L");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'Hkq' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Hkq");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d7b6e0f93a3edbdaf4037213f1746097) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r \t{\n\n\n\"\\t\\/\"\r:{\t } \r\r\t} \n'
	const char* json = "\r \t{\n\n\n\"\\t\\/\"\r:{\t } \r\r\t} \n";
	std::cerr << "Plain JSON string from model: " << "\\r \\t{\\n\\n\\n\\\"\\\\t\\\\/\\\"\\r:{\\t } \\r\\r\\t} \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_a1cafde4bd1e3b3e05920f2fb997a0b4) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t\n{\"?_\\\\\"\t\n \r:true\r}'
	const char* json = "\t\n{\"?_\\\\\"\t\n \r:true\r}";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{\\\"?_\\\\\\\\\\\"\\t\\n \\r:true\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '?_\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "?_\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_641cba896df3c8debe14339afea8ea84) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r \t\"\\f\"\r:\t null\r \t \n,\t\"q\\be\\\"\\\\h\\r\"\t\t\n\n \t: \t\"\"\r \n\t}'
	const char* json = "{\r \t\"\\f\"\r:\t null\r \t \n,\t\"q\\be\\\"\\\\h\\r\"\t\t\n\n \t: \t\"\"\r \n\t}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t\\\"\\\\f\\\"\\r:\\t null\\r \\t \\n,\\t\\\"q\\\\be\\\\\\\"\\\\\\\\h\\\\r\\\"\\t\\t\\n\\n \\t: \\t\\\"\\\"\\r \\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'q\be\"\\h\r' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "q\be\"\\h\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\f' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bbdc7044b1e4ef2c33d7a0cc8ba788bf) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t\t\r{ \"\\ro\\n7\\n\" \t : []\n\t\n \r,\r\t\"F)\":-2.02E-01 \t\n\r\n,\"\":\"1\"\t\t\t}'
	const char* json = "\t\t\r{ \"\\ro\\n7\\n\" \t : []\n\t\n \r,\r\t\"F)\":-2.02E-01 \t\n\r\n,\"\":\"1\"\t\t\t}";
	std::cerr << "Plain JSON string from model: " << "\\t\\t\\r{ \\\"\\\\ro\\\\n7\\\\n\\\" \\t : []\\n\\t\\n \\r,\\r\\t\\\"F)\\\":-2.02E-01 \\t\\n\\r\\n,\\\"\\\":\\\"1\\\"\\t\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '1'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("1", cJSON_string(child));
	}
	{
		// 'F)' = '-0.202'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "F)");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.202, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4eedc66ddf7dfcc3b4d517c2f1f1f7ee) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\r\n\t\n\"\\r\" \t\r \n\t:\"(\"\t,\n\"\\nW0\\\"\"\r   \t\n:\tfalse\t,\t\"J@i\"\r\r:\nfalse\t}\t  '
	const char* json = "\n{\r\n\t\n\"\\r\" \t\r \n\t:\"(\"\t,\n\"\\nW0\\\"\"\r   \t\n:\tfalse\t,\t\"J@i\"\r\r:\nfalse\t}\t  ";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\n\\t\\n\\\"\\\\r\\\" \\t\\r \\n\\t:\\\"(\\\"\\t,\\n\\\"\\\\nW0\\\\\\\"\\\"\\r   \\t\\n:\\tfalse\\t,\\t\\\"J@i\\\"\\r\\r:\\nfalse\\t}\\t  " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'J@i' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "J@i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\r' = '('
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("(", cJSON_string(child));
	}
	{
		// '\nW0\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nW0\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0ea30705bb7243383f44d8d0e4f227fb) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r\t{\r \t\t\t\"\\\"9\\t\\t\"\t\r\n:\ntrue\n\n\r,\n\n\"xqIg]\\\".\\b\":false \n,\t\r\"\"\r \r\t:true\r \t}'
	const char* json = "\r\t{\r \t\t\t\"\\\"9\\t\\t\"\t\r\n:\ntrue\n\n\r,\n\n\"xqIg]\\\".\\b\":false \n,\t\r\"\"\r \r\t:true\r \t}";
	std::cerr << "Plain JSON string from model: " << "\\r\\t{\\r \\t\\t\\t\\\"\\\\\\\"9\\\\t\\\\t\\\"\\t\\r\\n:\\ntrue\\n\\n\\r,\\n\\n\\\"xqIg]\\\\\\\".\\\\b\\\":false \\n,\\t\\r\\\"\\\"\\r \\r\\t:true\\r \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\"9\t\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"9\t\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'xqIg]\".\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "xqIg]\".\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bfbe264a451efd99d7f66304f7349d8d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{ \t\n\r\t\"\"\r\r\t\n\t:\r{\r\t\"K\\f\"\t:\rfalse\r,\n\r\t\"}$)\"\r: \rtrue\n  } \n\t}\n'
	const char* json = "\t{ \t\n\r\t\"\"\r\r\t\n\t:\r{\r\t\"K\\f\"\t:\rfalse\r,\n\r\t\"}$)\"\r: \rtrue\n  } \n\t}\n";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\t\\n\\r\\t\\\"\\\"\\r\\r\\t\\n\\t:\\r{\\r\\t\\\"K\\\\f\\\"\\t:\\rfalse\\r,\\n\\r\\t\\\"}$)\\\"\\r: \\rtrue\\n  } \\n\\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'}$)' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}$)");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':'K\f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "K\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c865e99b55006f223bf3c69b98e3e854) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\n\"W\\\\\"\r :\n10.0e05\n\n}'
	const char* json = "{\r\n\"W\\\\\"\r :\n10.0e05\n\n}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"W\\\\\\\\\\\"\\r :\\n10.0e05\\n\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'W\\' = '1000000.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "W\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(1000000.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_566d8541a24a178d508575e1eaa05af8) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\"\n\n:\n\t{ \n\t\"w\\\\\": -0.01\r}\n\t,\n\r\"i\"\n: \n\n[{\"\\\"ZnC\"\n:\t0\r\r\t\t\r\r,\t  \"}\" \n :\n[]\r \t,\t\t \"\\\"\":\"\\n\\\\y\"  \t\n,\r\"q\" \t\n  :{\r\"\\\\\\b\\n\\nI\\r{i\"\t\r:\n\tfalse,\r \t\r\"}\\r\":\t \n-0e0 \n \n}\r\n , \"Iq\\\\\\\"c\\n\":\r{  }\t \t\r}\t \t]\t \n,\n\"\\b\"\t\n\t:-238.0\r  ,\r \t\"0\"\r:null \n \t}\t'
	const char* json = "{ \"\"\n\n:\n\t{ \n\t\"w\\\\\": -0.01\r}\n\t,\n\r\"i\"\n: \n\n[{\"\\\"ZnC\"\n:\t0\r\r\t\t\r\r,\t  \"}\" \n :\n[]\r \t,\t\t \"\\\"\":\"\\n\\\\y\"  \t\n,\r\"q\" \t\n  :{\r\"\\\\\\b\\n\\nI\\r{i\"\t\r:\n\tfalse,\r \t\r\"}\\r\":\t \n-0e0 \n \n}\r\n , \"Iq\\\\\\\"c\\n\":\r{  }\t \t\r}\t \t]\t \n,\n\"\\b\"\t\n\t:-238.0\r  ,\r \t\"0\"\r:null \n \t}\t";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\n\\n:\\n\\t{ \\n\\t\\\"w\\\\\\\\\\\": -0.01\\r}\\n\\t,\\n\\r\\\"i\\\"\\n: \\n\\n[{\\\"\\\\\\\"ZnC\\\"\\n:\\t0\\r\\r\\t\\t\\r\\r,\\t  \\\"}\\\" \\n :\\n[]\\r \\t,\\t\\t \\\"\\\\\\\"\\\":\\\"\\\\n\\\\\\\\y\\\"  \\t\\n,\\r\\\"q\\\" \\t\\n  :{\\r\\\"\\\\\\\\\\\\b\\\\n\\\\nI\\\\r{i\\\"\\t\\r:\\n\\tfalse,\\r \\t\\r\\\"}\\\\r\\\":\\t \\n-0e0 \\n \\n}\\r\\n , \\\"Iq\\\\\\\\\\\\\\\"c\\\\n\\\":\\r{  }\\t \\t\\r}\\t \\t]\\t \\n,\\n\\\"\\\\b\\\"\\t\\n\\t:-238.0\\r  ,\\r \\t\\\"0\\\"\\r:null \\n \\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'w\\' = '-0.01'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "w\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.01, cJSON_double(child));
	}
	{
		// 'i':0:'q':'}\r' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "q");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// 'i':0:'q':'\\\b\n\nI\r{i' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "q");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\b\n\nI\r{i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'i':0:'\"ZnC' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"ZnC");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// 'i':0:'\"' = '\n\\y'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "i");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n\\y", cJSON_string(child));
	}
	{
		// '0' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "0");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\b' = '-238.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-238.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_da38226a1cf51e5f41627632efeb992b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\n\n\r\">g\":\"\\n~\\r}\\t\\\"l\"\t \r\t\t}'
	const char* json = "\n{\n\n\r\">g\":\"\\n~\\r}\\t\\\"l\"\t \r\t\t}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\n\\r\\\">g\\\":\\\"\\\\n~\\\\r}\\\\t\\\\\\\"l\\\"\\t \\r\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '>g' = '\n~\r}\t\"l'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ">g");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n~\r}\t\"l", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d54e2cd960f4690b9fe0548cf565ecce) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{  \"\\\\\":false\n\n\t} '
	const char* json = "\t{  \"\\\\\":false\n\n\t} ";
	std::cerr << "Plain JSON string from model: " << "\\t{  \\\"\\\\\\\\\\\":false\\n\\n\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0297237c277ed200d161ec78f817e7eb) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t\t{\t \t\"C]\\\\\":\r{\r\t\t\n\n\r\"\"\n\t\n:true  ,\"]\":\n \t \"io\\t{\\f\\r\\b\\\"K\\bR>w\\\\\\f\",\r\n\n\"\\fu\\r\"   :\n{\t\"*\"\t:\t[] ,\r\t\"\\r\"\t  :\rtrue \n,\t\t\n\"\\\\Q\":true\r}\n\r\t\t,\r \r\"9-G\\n\\n\"\n  :null \r\r\t \r}\t\n\n\t\t\n,\n\"\\b\"\r:{}}'
	const char* json = "\t\t{\t \t\"C]\\\\\":\r{\r\t\t\n\n\r\"\"\n\t\n:true  ,\"]\":\n \t \"io\\t{\\f\\r\\b\\\"K\\bR>w\\\\\\f\",\r\n\n\"\\fu\\r\"   :\n{\t\"*\"\t:\t[] ,\r\t\"\\r\"\t  :\rtrue \n,\t\t\n\"\\\\Q\":true\r}\n\r\t\t,\r \r\"9-G\\n\\n\"\n  :null \r\r\t \r}\t\n\n\t\t\n,\n\"\\b\"\r:{}}";
	std::cerr << "Plain JSON string from model: " << "\\t\\t{\\t \\t\\\"C]\\\\\\\\\\\":\\r{\\r\\t\\t\\n\\n\\r\\\"\\\"\\n\\t\\n:true  ,\\\"]\\\":\\n \\t \\\"io\\\\t{\\\\f\\\\r\\\\b\\\\\\\"K\\\\bR>w\\\\\\\\\\\\f\\\",\\r\\n\\n\\\"\\\\fu\\\\r\\\"   :\\n{\\t\\\"*\\\"\\t:\\t[] ,\\r\\t\\\"\\\\r\\\"\\t  :\\rtrue \\n,\\t\\t\\n\\\"\\\\\\\\Q\\\":true\\r}\\n\\r\\t\\t,\\r \\r\\\"9-G\\\\n\\\\n\\\"\\n  :null \\r\\r\\t \\r}\\t\\n\\n\\t\\t\\n,\\n\\\"\\\\b\\\"\\r:{}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'C]\\':'' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C]\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'C]\\':'9-G\n\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C]\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "9-G\n\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'C]\\':']' = 'io\t{\f\r\b\"K\bR>w\\\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C]\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "]");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("io\t{\f\r\b\"K\bR>w\\\f", cJSON_string(child));
	}
	{
		// 'C]\\':'\fu\r':'\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C]\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fu\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'C]\\':'\fu\r':'\\Q' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C]\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fu\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\Q");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a0d684ee6b226a23716f2285fdee0630) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n\n{\r   \t\r\"\"\r\t\t:-0.096e-050  }\t'
	const char* json = "\n\n{\r   \t\r\"\"\r\t\t:-0.096e-050  }\t";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{\\r   \\t\\r\\\"\\\"\\r\\t\\t:-0.096e-050  }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-9.6e-52'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-9.6e-52, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_af97687b0c258d435a192f944d191915) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"\\r\\bq\\r}\\b\"\t:\n{ \n\"\" :0.020E+0\t}}'
	const char* json = "{\r\"\\r\\bq\\r}\\b\"\t:\n{ \n\"\" :0.020E+0\t}}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\r\\\\bq\\\\r}\\\\b\\\"\\t:\\n{ \\n\\\"\\\" :0.020E+0\\t}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r\bq\r}\b':'' = '0.02'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\bq\r}\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.02, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c941ad49534ff03b18fd87f7db9c5356) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r \"lD\":\n {\r\n\"Na \"\r\n\r:\tnull\t\n,\t\r  \"\\\"\\/\\t\":true ,\t \"\"\t\n\t\r:[null\n ]\n}\n\r\t}\r\t'
	const char* json = "{\r \"lD\":\n {\r\n\"Na \"\r\n\r:\tnull\t\n,\t\r  \"\\\"\\/\\t\":true ,\t \"\"\t\n\t\r:[null\n ]\n}\n\r\t}\r\t";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"lD\\\":\\n {\\r\\n\\\"Na \\\"\\r\\n\\r:\\tnull\\t\\n,\\t\\r  \\\"\\\\\\\"\\\\/\\\\t\\\":true ,\\t \\\"\\\"\\t\\n\\t\\r:[null\\n ]\\n}\\n\\r\\t}\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'lD':'':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "lD");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'lD':'\"/\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "lD");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"/\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'lD':'Na ' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "lD");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Na ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_21e683db099b182893aff51b43bcdaa3) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\n \"\"\t\r:{\r\n\n\"I\"\t: true\r\n  \n\r\t,\t\r \r\"\\r\\b@\\\\!\"\r\n\r\r\r:false\r \t\t\t ,\n\t\n\"\\r\\/\"\t\r :\r[{}\r\n\r] \n\r,  \n  \"O\\\"\"\t\r:{\"L\\r=\\\\\"\r: \"T\\f\"\t\t  , \"bL\\n\"\r:-0.0108E+0}\t\n}\r\n ,\n\r\"s\"\n\r\n:\rnull\n\n,\n\n \"\\\\\\/~\\\\\\rT\":\t\n\r\rnull}\n'
	const char* json = "{\r\n \"\"\t\r:{\r\n\n\"I\"\t: true\r\n  \n\r\t,\t\r \r\"\\r\\b@\\\\!\"\r\n\r\r\r:false\r \t\t\t ,\n\t\n\"\\r\\/\"\t\r :\r[{}\r\n\r] \n\r,  \n  \"O\\\"\"\t\r:{\"L\\r=\\\\\"\r: \"T\\f\"\t\t  , \"bL\\n\"\r:-0.0108E+0}\t\n}\r\n ,\n\r\"s\"\n\r\n:\rnull\n\n,\n\n \"\\\\\\/~\\\\\\rT\":\t\n\r\rnull}\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n \\\"\\\"\\t\\r:{\\r\\n\\n\\\"I\\\"\\t: true\\r\\n  \\n\\r\\t,\\t\\r \\r\\\"\\\\r\\\\b@\\\\\\\\!\\\"\\r\\n\\r\\r\\r:false\\r \\t\\t\\t ,\\n\\t\\n\\\"\\\\r\\\\/\\\"\\t\\r :\\r[{}\\r\\n\\r] \\n\\r,  \\n  \\\"O\\\\\\\"\\\"\\t\\r:{\\\"L\\\\r=\\\\\\\\\\\"\\r: \\\"T\\\\f\\\"\\t\\t  , \\\"bL\\\\n\\\"\\r:-0.0108E+0}\\t\\n}\\r\\n ,\\n\\r\\\"s\\\"\\n\\r\\n:\\rnull\\n\\n,\\n\\n \\\"\\\\\\\\\\\\/~\\\\\\\\\\\\rT\\\":\\t\\n\\r\\rnull}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'I' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "I");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':'\r\b@\\!' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\b@\\!");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':'O\"':'L\r=\\' = 'T\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "O\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "L\r=\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("T\f", cJSON_string(child));
	}
	{
		// '':'O\"':'bL\n' = '-0.0108'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "O\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "bL\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0108, cJSON_double(child));
	}
	{
		// '\\/~\\\rT' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\/~\\\rT");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 's' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "s");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ccd5dfcf9d8f346b68805c79c698c474) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' {\n  \t\"a\\rX<5\\/\\\\\\f\\/\\t\\b\"\n  :true\t\t}\t'
	const char* json = " {\n  \t\"a\\rX<5\\/\\\\\\f\\/\\t\\b\"\n  :true\t\t}\t";
	std::cerr << "Plain JSON string from model: " << " {\\n  \\t\\\"a\\\\rX<5\\\\/\\\\\\\\\\\\f\\\\/\\\\t\\\\b\\\"\\n  :true\\t\\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'a\rX<5/\\\f/\t\b' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "a\rX<5/\\\f/\t\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_da98cefc76bceb390b70633f2a6b6bd7) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\t\"\":true\r\n}'
	const char* json = "\t{\t\"\":true\r\n}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\\"\\\":true\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0fffea6b88efc38e70823215b69f288a) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\r\"4[\\b\\\"M\"\r\n :\t\n\t\"\\\"\"\n\t, \t\n\"\\t\" :\"\"\n,\"\\n\":\r\r\t\"e[\"\t\t\t\r\n}'
	const char* json = "\n{\r\"4[\\b\\\"M\"\r\n :\t\n\t\"\\\"\"\n\t, \t\n\"\\t\" :\"\"\n,\"\\n\":\r\r\t\"e[\"\t\t\t\r\n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\r\\\"4[\\\\b\\\\\\\"M\\\"\\r\\n :\\t\\n\\t\\\"\\\\\\\"\\\"\\n\\t, \\t\\n\\\"\\\\t\\\" :\\\"\\\"\\n,\\\"\\\\n\\\":\\r\\r\\t\\\"e[\\\"\\t\\t\\t\\r\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	{
		// '\n' = 'e['
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("e[", cJSON_string(child));
	}
	{
		// '4[\b\"M' = '\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "4[\b\"M");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_42365e6c869a3d1398d147f6d4c21c51) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\t\t\"\" :\n-3 \r \t, \r\"\\\\\"\t \r:\t\"\\n\\\\T\\tE\\n,n\\t\\r\"\r\r\n\r, \n\t\"\\/\\\\\":{ \n}\n  \n\r\n ,  \n\"\\t\":null,\r\n\n\r\"J\":1640\r\r\r}\n\n\r'
	const char* json = "{\r\t\t\"\" :\n-3 \r \t, \r\"\\\\\"\t \r:\t\"\\n\\\\T\\tE\\n,n\\t\\r\"\r\r\n\r, \n\t\"\\/\\\\\":{ \n}\n  \n\r\n ,  \n\"\\t\":null,\r\n\n\r\"J\":1640\r\r\r}\n\n\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\t\\\"\\\" :\\n-3 \\r \\t, \\r\\\"\\\\\\\\\\\"\\t \\r:\\t\\\"\\\\n\\\\\\\\T\\\\tE\\\\n,n\\\\t\\\\r\\\"\\r\\r\\n\\r, \\n\\t\\\"\\\\/\\\\\\\\\\\":{ \\n}\\n  \\n\\r\\n ,  \\n\\\"\\\\t\\\":null,\\r\\n\\n\\r\\\"J\\\":1640\\r\\r\\r}\\n\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-3'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-3, cJSON_double(child));
	}
	{
		// '\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'J' = '1640'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "J");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(1640, cJSON_double(child));
	}
	{
		// '\\' = '\n\\T\tE\n,n\t\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n\\T\tE\n,n\t\r", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2d954e0c5ed29a76579b110782bc6579) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' \n{\n\n\t \r\r\"\"\n\t\n\n :\n[false\r\r\r]\r,\t\t\r\r\"\\f\\ts\\tr\\\"n\\/\":\"$\\\\\\r2\" }\r\r\t'
	const char* json = " \n{\n\n\t \r\r\"\"\n\t\n\n :\n[false\r\r\r]\r,\t\t\r\r\"\\f\\ts\\tr\\\"n\\/\":\"$\\\\\\r2\" }\r\r\t";
	std::cerr << "Plain JSON string from model: " << " \\n{\\n\\n\\t \\r\\r\\\"\\\"\\n\\t\\n\\n :\\n[false\\r\\r\\r]\\r,\\t\\t\\r\\r\\\"\\\\f\\\\ts\\\\tr\\\\\\\"n\\\\/\\\":\\\"$\\\\\\\\\\\\r2\\\" }\\r\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\f\ts\tr\"n/' = '$\\\r2'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\ts\tr\"n/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("$\\\r2", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b41a9f855c074fffb4f58c0aff8ffb0e) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r {\r \r\r \n\"\"\r\t\r\r\n: \r\n\t-5.0\n\r,  \r\r\n\"\\/s\"\n:null, \"nd\"\r\r:[],\r\"N\" \t\t: \t [\nnull  \n\t\n]\r\r\r\t,\r\t\t\"\\/\"\r:\r[]\r\n,\n\n\t\"\\\"\"\t:{}\t\n\r ,\n\t\t\r\"G\\r\" \t\n : true\t\r\r, \t  \">\"\t\n\t :\r\t[]\r \r, \t\t\"yo\\\"\\\\\\b\":\tfalse\t  }\t'
	const char* json = "\r {\r \r\r \n\"\"\r\t\r\r\n: \r\n\t-5.0\n\r,  \r\r\n\"\\/s\"\n:null, \"nd\"\r\r:[],\r\"N\" \t\t: \t [\nnull  \n\t\n]\r\r\r\t,\r\t\t\"\\/\"\r:\r[]\r\n,\n\n\t\"\\\"\"\t:{}\t\n\r ,\n\t\t\r\"G\\r\" \t\n : true\t\r\r, \t  \">\"\t\n\t :\r\t[]\r \r, \t\t\"yo\\\"\\\\\\b\":\tfalse\t  }\t";
	std::cerr << "Plain JSON string from model: " << "\\r {\\r \\r\\r \\n\\\"\\\"\\r\\t\\r\\r\\n: \\r\\n\\t-5.0\\n\\r,  \\r\\r\\n\\\"\\\\/s\\\"\\n:null, \\\"nd\\\"\\r\\r:[],\\r\\\"N\\\" \\t\\t: \\t [\\nnull  \\n\\t\\n]\\r\\r\\r\\t,\\r\\t\\t\\\"\\\\/\\\"\\r:\\r[]\\r\\n,\\n\\n\\t\\\"\\\\\\\"\\\"\\t:{}\\t\\n\\r ,\\n\\t\\t\\r\\\"G\\\\r\\\" \\t\\n : true\\t\\r\\r, \\t  \\\">\\\"\\t\\n\\t :\\r\\t[]\\r \\r, \\t\\t\\\"yo\\\\\\\"\\\\\\\\\\\\b\\\":\\tfalse\\t  }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-5.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-5.0, cJSON_double(child));
	}
	{
		// 'N':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "N");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'G\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "G\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'yo\"\\\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "yo\"\\\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/s' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/s");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_38ef29ad131b32b1f7c64c1961e81665) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"C\\\\i;\"\n :false \t} \t'
	const char* json = "{\"C\\\\i;\"\n :false \t} \t";
	std::cerr << "Plain JSON string from model: " << "{\\\"C\\\\\\\\i;\\\"\\n :false \\t} \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'C\\i;' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C\\i;");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a292cfb0df87b8d7d5c5760d198f96f1) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\"{\":[] , \"\"\r:\t\n\ttrue  \n,\t\"R\\t\":\"dt\" } '
	const char* json = "{\n\"{\":[] , \"\"\r:\t\n\ttrue  \n,\t\"R\\t\":\"dt\" } ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"{\\\":[] , \\\"\\\"\\r:\\t\\n\\ttrue  \\n,\\t\\\"R\\\\t\\\":\\\"dt\\\" } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'R\t' = 'dt'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "R\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("dt", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7def095a0eb2a6b61d2652bf89903a31) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t \r\"ND\\n>\\\"\\\"\\n\"\r\r:\t{\t\"\"\r\n\t\n\n:\t\t {\n\t\"\\bw\\/\":\n[\"38\"\r\n\r\t]\n \r\t,\n\".7\\r\":\r null\r\t , \t\"\\/\\b\\n\\\\\"\r:null\r\t,\n\n\"\\r mrCVw\":\n{\r\r\"\\n\":true\n\n\n\n\n\t},\r  \"\\t\\\\\": \"\\t{?\"\r\r\t }}}\r\n'
	const char* json = "{\t \r\"ND\\n>\\\"\\\"\\n\"\r\r:\t{\t\"\"\r\n\t\n\n:\t\t {\n\t\"\\bw\\/\":\n[\"38\"\r\n\r\t]\n \r\t,\n\".7\\r\":\r null\r\t , \t\"\\/\\b\\n\\\\\"\r:null\r\t,\n\n\"\\r mrCVw\":\n{\r\r\"\\n\":true\n\n\n\n\n\t},\r  \"\\t\\\\\": \"\\t{?\"\r\r\t }}}\r\n";
	std::cerr << "Plain JSON string from model: " << "{\\t \\r\\\"ND\\\\n>\\\\\\\"\\\\\\\"\\\\n\\\"\\r\\r:\\t{\\t\\\"\\\"\\r\\n\\t\\n\\n:\\t\\t {\\n\\t\\\"\\\\bw\\\\/\\\":\\n[\\\"38\\\"\\r\\n\\r\\t]\\n \\r\\t,\\n\\\".7\\\\r\\\":\\r null\\r\\t , \\t\\\"\\\\/\\\\b\\\\n\\\\\\\\\\\"\\r:null\\r\\t,\\n\\n\\\"\\\\r mrCVw\\\":\\n{\\r\\r\\\"\\\\n\\\":true\\n\\n\\n\\n\\n\\t},\\r  \\\"\\\\t\\\\\\\\\\\": \\\"\\\\t{?\\\"\\r\\r\\t }}}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'ND\n>\"\"\n':'':'\bw/':0 = '38'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ND\n>\"\"\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bw/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("38", cJSON_string(child));
	}
	{
		// 'ND\n>\"\"\n':'':'/\b\n\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ND\n>\"\"\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\b\n\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'ND\n>\"\"\n':'':'\t\\' = '\t{?'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ND\n>\"\"\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t{?", cJSON_string(child));
	}
	{
		// 'ND\n>\"\"\n':'':'\r mrCVw':'\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ND\n>\"\"\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r mrCVw");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'ND\n>\"\"\n':'':'.7\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ND\n>\"\"\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ".7\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_88ecec7640d6d3e42ee5e13bf4da359c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r \t{\r\t\r\t\"Wi\":\r\r\tfalse\n}'
	const char* json = "\r \t{\r\t\r\t\"Wi\":\r\r\tfalse\n}";
	std::cerr << "Plain JSON string from model: " << "\\r \\t{\\r\\t\\r\\t\\\"Wi\\\":\\r\\r\\tfalse\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Wi' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Wi");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a11ba6a49d40e202ca73e909910c2110) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \"\"\t\n:\t\r{}\r\n\r  \t\t,\r\t\n\n\n \"9\\\"6\" \r\n\n:\r\n\r\"9\\n\\f\"\n}'
	const char* json = "{ \"\"\t\n:\t\r{}\r\n\r  \t\t,\r\t\n\n\n \"9\\\"6\" \r\n\n:\r\n\r\"9\\n\\f\"\n}";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\"\\t\\n:\\t\\r{}\\r\\n\\r  \\t\\t,\\r\\t\\n\\n\\n \\\"9\\\\\\\"6\\\" \\r\\n\\n:\\r\\n\\r\\\"9\\\\n\\\\f\\\"\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '9\"6' = '9\n\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "9\"6");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("9\n\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c089720b02193fa68162a4552edb53c3) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{  \t\t\"F\"\t\t :\n{\t\"\"\n\t:\n\"a\" \t\r,\r\r \"\\/R,%\"\t:\t\r\n\t\t\rfalse\t\t\r\n}\r\r \r\t\n,\t \r \n\r\t\"F\\\\\"\t \r:\n\tnull\t\t}'
	const char* json = "\r{  \t\t\"F\"\t\t :\n{\t\"\"\n\t:\n\"a\" \t\r,\r\r \"\\/R,%\"\t:\t\r\n\t\t\rfalse\t\t\r\n}\r\r \r\t\n,\t \r \n\r\t\"F\\\\\"\t \r:\n\tnull\t\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{  \\t\\t\\\"F\\\"\\t\\t :\\n{\\t\\\"\\\"\\n\\t:\\n\\\"a\\\" \\t\\r,\\r\\r \\\"\\\\/R,%\\\"\\t:\\t\\r\\n\\t\\t\\rfalse\\t\\t\\r\\n}\\r\\r \\r\\t\\n,\\t \\r \\n\\r\\t\\\"F\\\\\\\\\\\"\\t \\r:\\n\\tnull\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'F\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "F\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'F':'' = 'a'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "F");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("a", cJSON_string(child));
	}
	{
		// 'F':'/R,%' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "F");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/R,%");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ee7a7b3de232ddb42801dde44597045f) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r{\n\t \"\":false,\"\\\\>\"\n\r:\"mZcv\"\r    \n}\r '
	const char* json = "\r{\n\t \"\":false,\"\\\\>\"\n\r:\"mZcv\"\r    \n}\r ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\t \\\"\\\":false,\\\"\\\\\\\\>\\\"\\n\\r:\\\"mZcv\\\"\\r    \\n}\\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\>' = 'mZcv'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\>");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("mZcv", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_990130aef07735d641cb5fde4f8db8f5) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n\t{\n\t\r\r\"\":-0E+0 \r\n }\t'
	const char* json = "\n\t{\n\t\r\r\"\":-0E+0 \r\n }\t";
	std::cerr << "Plain JSON string from model: " << "\\n\\t{\\n\\t\\r\\r\\\"\\\":-0E+0 \\r\\n }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_83bc03e7e0ac8de5830f74a51a5adc4b) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\t\n\"*pp~\" :\n\tnull\r\t\n,\t \t\r\t\"\"\r:\n[\t false],\"h\" :{\t\r}\n,\t\"A<\"\t\n :0e-0307\t\t \t }'
	const char* json = "\t{\t\n\"*pp~\" :\n\tnull\r\t\n,\t \t\r\t\"\"\r:\n[\t false],\"h\" :{\t\r}\n,\t\"A<\"\t\n :0e-0307\t\t \t }";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t\\n\\\"*pp~\\\" :\\n\\tnull\\r\\t\\n,\\t \\t\\r\\t\\\"\\\"\\r:\\n[\\t false],\\\"h\\\" :{\\t\\r}\\n,\\t\\\"A<\\\"\\t\\n :0e-0307\\t\\t \\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '*pp~' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "*pp~");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'A<' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "A<");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d3ebf9d1f78ac3f0f88bb01a840002c5) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\n\r\r\"\\\"(\\f\"\r:-13.047e040\r ,\n \r\"Pg\":\t \"2}T\\tnk\\nh\\b\\n\"\n\r\r\r}'
	const char* json = "{\n\r\r\"\\\"(\\f\"\r:-13.047e040\r ,\n \r\"Pg\":\t \"2}T\\tnk\\nh\\b\\n\"\n\r\r\r}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\r\\\"\\\\\\\"(\\\\f\\\"\\r:-13.047e040\\r ,\\n \\r\\\"Pg\\\":\\t \\\"2}T\\\\tnk\\\\nh\\\\b\\\\n\\\"\\n\\r\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"(\f' = '-1.3047e+41'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"(\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-1.3047e+41, cJSON_double(child));
	}
	{
		// 'Pg' = '2}T\tnk\nh\b\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Pg");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("2}T\tnk\nh\b\n", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5abb585dbe9f5743de49978e036a0e30) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\n{\t \r\"0\\b\\/(\"\n \r\r :\"9%\\\\\\\\\\r\\r\" \n\r\n}\t\n\t'
	const char* json = "\n\n{\t \r\"0\\b\\/(\"\n \r\r :\"9%\\\\\\\\\\r\\r\" \n\r\n}\t\n\t";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{\\t \\r\\\"0\\\\b\\\\/(\\\"\\n \\r\\r :\\\"9%\\\\\\\\\\\\\\\\\\\\r\\\\r\\\" \\n\\r\\n}\\t\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '0\b/(' = '9%\\\\\r\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "0\b/(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("9%\\\\\r\r", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_52e888da22adee97f7957afd22c71e36) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"\" :{\n} \t\r, \r\"H\\nJd\\/b\" \t:\n\t\t\"9\" \n\t} \n\r'
	const char* json = "{\"\" :{\n} \t\r, \r\"H\\nJd\\/b\" \t:\n\t\t\"9\" \n\t} \n\r";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\" :{\\n} \\t\\r, \\r\\\"H\\\\nJd\\\\/b\\\" \\t:\\n\\t\\t\\\"9\\\" \\n\\t} \\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'H\nJd/b' = '9'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "H\nJd/b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("9", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a8e0623ac7b7abfe5c931048cc573d74) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r \n{\"\\fA\" :\rfalse\t\t \n,\r\t\n\"]\"   \r:[]\n\t\r\r} \n\r'
	const char* json = "\r \n{\"\\fA\" :\rfalse\t\t \n,\r\t\n\"]\"   \r:[]\n\t\r\r} \n\r";
	std::cerr << "Plain JSON string from model: " << "\\r \\n{\\\"\\\\fA\\\" :\\rfalse\\t\\t \\n,\\r\\t\\n\\\"]\\\"   \\r:[]\\n\\t\\r\\r} \\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\fA' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fA");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_67dec1f7b8572a6a7b3d3bcd6293a36f) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\r\"\\b\" \t\n: false\n }'
	const char* json = "{\t\r\"\\b\" \t\n: false\n }";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\\"\\\\b\\\" \\t\\n: false\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4dccdbecaab847c47ff04b6c0ab664a5) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{  \r\r\"\": \r [\nnull\n\r\t,\n[\t\n\nnull\t\t\n,\t  \"c\",\rtrue \n \t\r\r,[]\t\t]\n,\r\t { \r \r\n\t\"l\"\n\r\n :{\n \r \"\\/\":\t\r0.0E0\r\n } \n\n\r\t\n\t}, false,\tfalse\t,false ]}\r'
	const char* json = "{  \r\r\"\": \r [\nnull\n\r\t,\n[\t\n\nnull\t\t\n,\t  \"c\",\rtrue \n \t\r\r,[]\t\t]\n,\r\t { \r \r\n\t\"l\"\n\r\n :{\n \r \"\\/\":\t\r0.0E0\r\n } \n\n\r\t\n\t}, false,\tfalse\t,false ]}\r";
	std::cerr << "Plain JSON string from model: " << "{  \\r\\r\\\"\\\": \\r [\\nnull\\n\\r\\t,\\n[\\t\\n\\nnull\\t\\t\\n,\\t  \\\"c\\\",\\rtrue \\n \\t\\r\\r,[]\\t\\t]\\n,\\r\\t { \\r \\r\\n\\t\\\"l\\\"\\n\\r\\n :{\\n \\r \\\"\\\\/\\\":\\t\\r0.0E0\\r\\n } \\n\\n\\r\\t\\n\\t}, false,\\tfalse\\t,false ]}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':1:0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':1:1 = 'c'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("c", cJSON_string(child));
	}
	{
		// '':1:2 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':2:'l':'/' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "l");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '':3 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 3);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':4 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 4);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':5 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 5);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3c0d981cee5052d0da81364a10478268) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t  \t\"Z!#)\" \r\t: {},\t\n\"\\r\" : \n\"\\/\"\t,\t \t\n\t\"\\f&6\":-0.0\r \r }'
	const char* json = "{\t  \t\"Z!#)\" \r\t: {},\t\n\"\\r\" : \n\"\\/\"\t,\t \t\n\t\"\\f&6\":-0.0\r \r }";
	std::cerr << "Plain JSON string from model: " << "{\\t  \\t\\\"Z!#)\\\" \\r\\t: {},\\t\\n\\\"\\\\r\\\" : \\n\\\"\\\\/\\\"\\t,\\t \\t\\n\\t\\\"\\\\f&6\\\":-0.0\\r \\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f&6' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f&6");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// '\r' = '/'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("/", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_aae7c25dac95cb64aa3c8788751d89de) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n \r\"\\twrr\"\t\r:\"\\n\"\r\t\t\r} \t\t'
	const char* json = "{\n \r\"\\twrr\"\t\r:\"\\n\"\r\t\t\r} \t\t";
	std::cerr << "Plain JSON string from model: " << "{\\n \\r\\\"\\\\twrr\\\"\\t\\r:\\\"\\\\n\\\"\\r\\t\\t\\r} \\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\twrr' = '\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\twrr");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2af3edbefac7aad738731f01b0d5f74b) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \t \"\" : \t\r\"\\f\"\r}'
	const char* json = "{ \t \"\" : \t\r\"\\f\"\r}";
	std::cerr << "Plain JSON string from model: " << "{ \\t \\\"\\\" : \\t\\r\\\"\\\\f\\\"\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e536962e64246efc29e57f465b7f3144) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {  \r\r\"\\f0.\\\\\"\r\r:true\t\r\n,\t\r\n\"\"\n\n:\t\t\rfalse   \r }\r\n\n'
	const char* json = " {  \r\r\"\\f0.\\\\\"\r\r:true\t\r\n,\t\r\n\"\"\n\n:\t\t\rfalse   \r }\r\n\n";
	std::cerr << "Plain JSON string from model: " << " {  \\r\\r\\\"\\\\f0.\\\\\\\\\\\"\\r\\r:true\\t\\r\\n,\\t\\r\\n\\\"\\\"\\n\\n:\\t\\t\\rfalse   \\r }\\r\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\f0.\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f0.\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cb5b79310eba9f670a4b833a158924f6) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\t\"\"\r\n\r:\rfalse\r\n,\t\t\n\t \"\\\"\"  : 0.07\r}\t'
	const char* json = "{\r\t\"\"\r\n\r:\rfalse\r\n,\t\t\n\t \"\\\"\"  : 0.07\r}\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\\"\\\"\\r\\n\\r:\\rfalse\\r\\n,\\t\\t\\n\\t \\\"\\\\\\\"\\\"  : 0.07\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\"' = '0.07'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.07, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d56b39f169bc13d73181eea83150bb49) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{ \t  \"\\\\\" :\r[ ]\n\t\t }\n \n'
	const char* json = "\n{ \t  \"\\\\\" :\r[ ]\n\t\t }\n \n";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t  \\\"\\\\\\\\\\\" :\\r[ ]\\n\\t\\t }\\n \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_3592397ee094c3ac5091b24863c43374) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{ \"&\"\r\n:0E-02\t\r,\n \"\" : \t\nfalse }\r\t'
	const char* json = "\t{ \"&\"\r\n:0E-02\t\r,\n \"\" : \t\nfalse }\r\t";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\\"&\\\"\\r\\n:0E-02\\t\\r,\\n \\\"\\\" : \\t\\nfalse }\\r\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '&' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "&");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3c65b3fee678b97296b6edf328abc24e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '  \t{ \t\r \r\"\" \r :\rfalse\t}'
	const char* json = "  \t{ \t\r \r\"\" \r :\rfalse\t}";
	std::cerr << "Plain JSON string from model: " << "  \\t{ \\t\\r \\r\\\"\\\" \\r :\\rfalse\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_27bdb77fc5955050d156fec2655ae690) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{ \n\t \n\"\":[ \t\r\n\t\t\"z\"]\t}'
	const char* json = "\n{ \n\t \n\"\":[ \t\r\n\t\t\"z\"]\t}";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\n\\t \\n\\\"\\\":[ \\t\\r\\n\\t\\t\\\"z\\\"]\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'z'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("z", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_27a7ce32baa952eac491e9d306f2fdcb) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\r\"@\"\t:\n\"\"\n}'
	const char* json = " {\r\"@\"\t:\n\"\"\n}";
	std::cerr << "Plain JSON string from model: " << " {\\r\\\"@\\\"\\t:\\n\\\"\\\"\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '@' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "@");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7a76eb6512ed9fe48f156fb328cedb19) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// Null
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"P\" \n:\t[\r\r[ ]\r,null\t\n]\t\t\r\r}\n \n'
	const char* json = "{\"P\" \n:\t[\r\r[ ]\r,null\t\n]\t\t\r\r}\n \n";
	std::cerr << "Plain JSON string from model: " << "{\\\"P\\\" \\n:\\t[\\r\\r[ ]\\r,null\\t\\n]\\t\\t\\r\\r}\\n \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'P':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "P");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f982bd2fad9ad116cc901b514bdf523d) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\t\r\n\n\"\\t*\"\n\t\r\n:\n\"R\\fs\"\n\n,   \"\\\"\" \r\r\t:{},\r\t\t\t \t\"\"\n:\tfalse\n ,   \t\"`|\\n\\\"\"\r\n\t:\t{\t\t\"\\r,\":false\t\r \r}\t}'
	const char* json = "{\t\r\n\n\"\\t*\"\n\t\r\n:\n\"R\\fs\"\n\n,   \"\\\"\" \r\r\t:{},\r\t\t\t \t\"\"\n:\tfalse\n ,   \t\"`|\\n\\\"\"\r\n\t:\t{\t\t\"\\r,\":false\t\r \r}\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\n\\n\\\"\\\\t*\\\"\\n\\t\\r\\n:\\n\\\"R\\\\fs\\\"\\n\\n,   \\\"\\\\\\\"\\\" \\r\\r\\t:{},\\r\\t\\t\\t \\t\\\"\\\"\\n:\\tfalse\\n ,   \\t\\\"`|\\\\n\\\\\\\"\\\"\\r\\n\\t:\\t{\\t\\t\\\"\\\\r,\\\":false\\t\\r \\r}\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\t*' = 'R\fs'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t*");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("R\fs", cJSON_string(child));
	}
	{
		// '`|\n\"':'\r,' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "`|\n\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r,");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_38b2950d920adc3c44213acaca22479a) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\r\r\r\"\" :\r{\r} ,\n\r\n\n\"\\\\v\\r94~d\" :true}\t'
	const char* json = "{\t\r\r\r\"\" :\r{\r} ,\n\r\n\n\"\\\\v\\r94~d\" :true}\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\r\\r\\\"\\\" :\\r{\\r} ,\\n\\r\\n\\n\\\"\\\\\\\\v\\\\r94~d\\\" :true}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\v\r94~d' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\v\r94~d");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6d59c0d5473f902f1fa409d3599ea0e7) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r \"V\\fBu\"\n\t :{\r}}\t\n'
	const char* json = "{\r \"V\\fBu\"\n\t :{\r}}\t\n";
	std::cerr << "Plain JSON string from model: " << "{\\r \\\"V\\\\fBu\\\"\\n\\t :{\\r}}\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_b367feae86eed5cbee945402e998c942) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\n \r\n\"y\" \t \t:0\t\t\t\t\n,  \r\"\"\t\t:false}'
	const char* json = "\r{\n \r\n\"y\" \t \t:0\t\t\t\t\n,  \r\"\"\t\t:false}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n \\r\\n\\\"y\\\" \\t \\t:0\\t\\t\\t\\t\\n,  \\r\\\"\\\"\\t\\t:false}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'y' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "y");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_551a5f6522bd2e66ad996c6908b0eb97) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\"jA2W\\\\\\tK\\r\"\n: [null \r\t]\n}'
	const char* json = "{\n\"jA2W\\\\\\tK\\r\"\n: [null \r\t]\n}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\"jA2W\\\\\\\\\\\\tK\\\\r\\\"\\n: [null \\r\\t]\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'jA2W\\\tK\r':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "jA2W\\\tK\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ebfc15f23e6e0d1d80c713c6054668ef) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{ \t\r\r\t\"\\/\"\n:0.0E0 \n\t\t\r\r,\t\r\"\\/\\r\"\t\r \r:\ttrue, \n\t\r\"\\t\" \n\r\r: {}\t}\n'
	const char* json = "\n{ \t\r\r\t\"\\/\"\n:0.0E0 \n\t\t\r\r,\t\r\"\\/\\r\"\t\r \r:\ttrue, \n\t\r\"\\t\" \n\r\r: {}\t}\n";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t\\r\\r\\t\\\"\\\\/\\\"\\n:0.0E0 \\n\\t\\t\\r\\r,\\t\\r\\\"\\\\/\\\\r\\\"\\t\\r \\r:\\ttrue, \\n\\t\\r\\\"\\\\t\\\" \\n\\r\\r: {}\\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '/' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b1c00903aaaab0bd784878d1ddb1aa46) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\r\r{\t\n\"\":\n\n\tfalse \n \r\n\n}\t\r'
	const char* json = "\r\r\r{\t\n\"\":\n\n\tfalse \n \r\n\n}\t\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\r\\r{\\t\\n\\\"\\\":\\n\\n\\tfalse \\n \\r\\n\\n}\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c19b0c79a09aa84733609bdeab49fc63) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t\r\n{\"\\n\\f2\"\r\n :0E+0\r \t ,\"\\\";\":\rnull\n\n}'
	const char* json = "\t\r\n{\"\\n\\f2\"\r\n :0E+0\r \t ,\"\\\";\":\rnull\n\n}";
	std::cerr << "Plain JSON string from model: " << "\\t\\r\\n{\\\"\\\\n\\\\f2\\\"\\r\\n :0E+0\\r \\t ,\\\"\\\\\\\";\\\":\\rnull\\n\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\";' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\";");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\n\f2' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\f2");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9604c70401694fc9e9f04dd2458d0aad) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\r\t \r\"q8\\r\\\\\"\t\n\t:\r\r \"\",  \r\"\\/ f\"\t: \tfalse\t\t\n\r,\t\t \"ubJ\\r\\t\\/\\r\":null \n , \r\n\r\"V\\n\\tg\\b1\"\t:-8\r\t\t}'
	const char* json = "{\n\r\t \r\"q8\\r\\\\\"\t\n\t:\r\r \"\",  \r\"\\/ f\"\t: \tfalse\t\t\n\r,\t\t \"ubJ\\r\\t\\/\\r\":null \n , \r\n\r\"V\\n\\tg\\b1\"\t:-8\r\t\t}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\t \\r\\\"q8\\\\r\\\\\\\\\\\"\\t\\n\\t:\\r\\r \\\"\\\",  \\r\\\"\\\\/ f\\\"\\t: \\tfalse\\t\\t\\n\\r,\\t\\t \\\"ubJ\\\\r\\\\t\\\\/\\\\r\\\":null \\n , \\r\\n\\r\\\"V\\\\n\\\\tg\\\\b1\\\"\\t:-8\\r\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'ubJ\r\t/\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "ubJ\r\t/\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '/ f' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/ f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'V\n\tg\b1' = '-8'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "V\n\tg\b1");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-8, cJSON_double(child));
	}
	{
		// 'q8\r\\' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "q8\r\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_31ba8d082f6550e3fd5ab97e6a251340) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\n \r\r\"\" \t:\n [\n]\r} \n'
	const char* json = "{\t\n \r\r\"\" \t:\n [\n]\r} \n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n \\r\\r\\\"\\\" \\t:\\n [\\n]\\r} \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_3462117bf744e89cac2f2ddf1ece597e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r\t\n{\t\t\"\":\t\t{\"2\"\n\r \n\t:\t-2\n,\r\t \"D@\\ni\": [\n ]  \t \r,\"9g\\f\\fi6\\bqs\\\"\"\n:\tfalse   }\t \n,\t \t\r\n\"\\r\"\n\r:\nnull,\n\r\"\\nR\"\t\n\n:null\t,\t\"\\rW%D\\b@G\":\tnull,\n \n\"q\\bzkN\"\r\t: \"g\\\\Z$;Mf\" \r\r,\r\r\n\t\r\"\\/\\b\" :[],  \r\n\"\\r\\r\":[]\r\t}'
	const char* json = "\r\t\n{\t\t\"\":\t\t{\"2\"\n\r \n\t:\t-2\n,\r\t \"D@\\ni\": [\n ]  \t \r,\"9g\\f\\fi6\\bqs\\\"\"\n:\tfalse   }\t \n,\t \t\r\n\"\\r\"\n\r:\nnull,\n\r\"\\nR\"\t\n\n:null\t,\t\"\\rW%D\\b@G\":\tnull,\n \n\"q\\bzkN\"\r\t: \"g\\\\Z$;Mf\" \r\r,\r\r\n\t\r\"\\/\\b\" :[],  \r\n\"\\r\\r\":[]\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\n{\\t\\t\\\"\\\":\\t\\t{\\\"2\\\"\\n\\r \\n\\t:\\t-2\\n,\\r\\t \\\"D@\\\\ni\\\": [\\n ]  \\t \\r,\\\"9g\\\\f\\\\fi6\\\\bqs\\\\\\\"\\\"\\n:\\tfalse   }\\t \\n,\\t \\t\\r\\n\\\"\\\\r\\\"\\n\\r:\\nnull,\\n\\r\\\"\\\\nR\\\"\\t\\n\\n:null\\t,\\t\\\"\\\\rW%D\\\\b@G\\\":\\tnull,\\n \\n\\\"q\\\\bzkN\\\"\\r\\t: \\\"g\\\\\\\\Z$;Mf\\\" \\r\\r,\\r\\r\\n\\t\\r\\\"\\\\/\\\\b\\\" :[],  \\r\\n\\\"\\\\r\\\\r\\\":[]\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'9g\f\fi6\bqs\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "9g\f\fi6\bqs\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '':'2' = '-2'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "2");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-2, cJSON_double(child));
	}
	{
		// '\rW%D\b@G' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\rW%D\b@G");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\nR' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nR");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'q\bzkN' = 'g\\Z$;Mf'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "q\bzkN");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("g\\Z$;Mf", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ddd3eab48b0cd4f66052e0453b09b1bd) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{\n\"\\fY\"\r:true   \n} \t\t'
	const char* json = "\t{\n\"\\fY\"\r:true   \n} \t\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\\"\\\\fY\\\"\\r:true   \\n} \\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\fY' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fY");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_08c619e1afd444ba3eeaf271d185f5f9) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \"\\\"Z\\t\\\"\\n\\f\"\r\r\t\n\n\r:\t[\n]\t, \"\":false\t}'
	const char* json = "{ \"\\\"Z\\t\\\"\\n\\f\"\r\r\t\n\n\r:\t[\n]\t, \"\":false\t}";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\\\\"Z\\\\t\\\\\\\"\\\\n\\\\f\\\"\\r\\r\\t\\n\\n\\r:\\t[\\n]\\t, \\\"\\\":false\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_156630b69dea7ebef028eea19ba21c6a) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n {\t\t\t\"\\\\\" :true\n \t\r,\n\n \"\\\\\\\\\\nq\\b(:\"\n \t:\".\\n\"}'
	const char* json = "\n {\t\t\t\"\\\\\" :true\n \t\r,\n\n \"\\\\\\\\\\nq\\b(:\"\n \t:\".\\n\"}";
	std::cerr << "Plain JSON string from model: " << "\\n {\\t\\t\\t\\\"\\\\\\\\\\\" :true\\n \\t\\r,\\n\\n \\\"\\\\\\\\\\\\\\\\\\\\nq\\\\b(:\\\"\\n \\t:\\\".\\\\n\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\\\nq\b(:' = '.\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\\\nq\b(:");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(".\n", cJSON_string(child));
	}
	{
		// '\\' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ebde20ba7237d9243499df2e428301f1) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\"2\\f\\\\\\tW\\f\\\"Y\\/}(\\b\":\r \n0E03\t\r}\n'
	const char* json = "{\t\"2\\f\\\\\\tW\\f\\\"Y\\/}(\\b\":\r \n0E03\t\r}\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"2\\\\f\\\\\\\\\\\\tW\\\\f\\\\\\\"Y\\\\/}(\\\\b\\\":\\r \\n0E03\\t\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '2\f\\\tW\f\"Y/}(\b' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "2\f\\\tW\f\"Y/}(\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5b9d5d6a6a7e9e1577212d03b568f5de) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\n\n\r\n \n\"\\r!>\\r\"\t:false\n,\r\n\"=\":\"\\te\\n\" ,\r\t\"\\b<\\\\\\/\\t5$\\/\" :\t-40\r}'
	const char* json = "\t{\n\n\r\n \n\"\\r!>\\r\"\t:false\n,\r\n\"=\":\"\\te\\n\" ,\r\t\"\\b<\\\\\\/\\t5$\\/\" :\t-40\r}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n\\n\\r\\n \\n\\\"\\\\r!>\\\\r\\\"\\t:false\\n,\\r\\n\\\"=\\\":\\\"\\\\te\\\\n\\\" ,\\r\\t\\\"\\\\b<\\\\\\\\\\\\/\\\\t5$\\\\/\\\" :\\t-40\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b<\\/\t5$/' = '-40'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b<\\/\t5$/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-40, cJSON_double(child));
	}
	{
		// '=' = '\te\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\te\n", cJSON_string(child));
	}
	{
		// '\r!>\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r!>\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_88d376663e4a4497ef28e54f8371f75e) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\t \t\"znh\"\r\t\t\n:null \t}\n\r'
	const char* json = "{\t\t \t\"znh\"\r\t\t\n:null \t}\n\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t \\t\\\"znh\\\"\\r\\t\\t\\n:null \\t}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'znh' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "znh");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_aa93d14913ff2678819a18534727e04c) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\r\"\\r\": { \"1\"\t\t:\ttrue\r, \n\t\"\\\\\"\r\n:\"Fqk\"} \n } \t'
	const char* json = "{\n\r\"\\r\": { \"1\"\t\t:\ttrue\r, \n\t\"\\\\\"\r\n:\"Fqk\"} \n } \t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\\"\\\\r\\\": { \\\"1\\\"\\t\\t:\\ttrue\\r, \\n\\t\\\"\\\\\\\\\\\"\\r\\n:\\\"Fqk\\\"} \\n } \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r':'1' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "1");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\r':'\\' = 'Fqk'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("Fqk", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a4a5f0998a8217238044b55f696400f7) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\t\"\\/\\\"\":\n\"|\"\n} \n\n'
	const char* json = "{\t\t\"\\/\\\"\":\n\"|\"\n} \n\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"\\\\/\\\\\\\"\\\":\\n\\\"|\\\"\\n} \\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\"' = '|'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("|", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b285cacf3ad5e013bedfa86f8d5b1832) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r \t{ \t\"9\\r\\t\"\r:\r \t\"\\f'\\n\",\"\":{\"C\\f\"  :\"\\\\\"  ,\r \r\t\n \"q\":null \t\r}\t\t}\t\t'
	const char* json = "\r \t{ \t\"9\\r\\t\"\r:\r \t\"\\f'\\n\",\"\":{\"C\\f\"  :\"\\\\\"  ,\r \r\t\n \"q\":null \t\r}\t\t}\t\t";
	std::cerr << "Plain JSON string from model: " << "\\r \\t{ \\t\\\"9\\\\r\\\\t\\\"\\r:\\r \\t\\\"\\\\f'\\\\n\\\",\\\"\\\":{\\\"C\\\\f\\\"  :\\\"\\\\\\\\\\\"  ,\\r \\r\\t\\n \\\"q\\\":null \\t\\r}\\t\\t}\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '9\r\t' = '\f'\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "9\r\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\f'\n", cJSON_string(child));
	}
	{
		// '':'q' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "q");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':'C\f' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_03a8706452f5107a7eed168041e26afb) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r   \r\t\"\" :\ttrue\t  , \r \"\\/\\\\\\t\"\t:\"<5o\\\"8\\n\"\n\t ,\n\n \"\\\\(\"\r:{\n\t\n\r\"\\fm\"\t:\t false ,\r\r\"\\\\\"  :0\t  ,  \r\"\\b\"\r :\r\t\rfalse\n \n}\n\t\t}'
	const char* json = "{\r   \r\t\"\" :\ttrue\t  , \r \"\\/\\\\\\t\"\t:\"<5o\\\"8\\n\"\n\t ,\n\n \"\\\\(\"\r:{\n\t\n\r\"\\fm\"\t:\t false ,\r\r\"\\\\\"  :0\t  ,  \r\"\\b\"\r :\r\t\rfalse\n \n}\n\t\t}";
	std::cerr << "Plain JSON string from model: " << "{\\r   \\r\\t\\\"\\\" :\\ttrue\\t  , \\r \\\"\\\\/\\\\\\\\\\\\t\\\"\\t:\\\"<5o\\\\\\\"8\\\\n\\\"\\n\\t ,\\n\\n \\\"\\\\\\\\(\\\"\\r:{\\n\\t\\n\\r\\\"\\\\fm\\\"\\t:\\t false ,\\r\\r\\\"\\\\\\\\\\\"  :0\\t  ,  \\r\\\"\\\\b\\\"\\r :\\r\\t\\rfalse\\n \\n}\\n\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '/\\\t' = '<5o\"8\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\\\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("<5o\"8\n", cJSON_string(child));
	}
	{
		// '\\(':'\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\(':'\fm' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fm");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\(':'\\' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6feca2e1ecca0866fe7a3dd96be91a67) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\n  \"\\b>f[\\bS6\\n\\fG\\n0Ef\\/\\\\\\/\\r\"\t \n:false}\n'
	const char* json = "{\t\n  \"\\b>f[\\bS6\\n\\fG\\n0Ef\\/\\\\\\/\\r\"\t \n:false}\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n  \\\"\\\\b>f[\\\\bS6\\\\n\\\\fG\\\\n0Ef\\\\/\\\\\\\\\\\\/\\\\r\\\"\\t \\n:false}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b>f[\bS6\n\fG\n0Ef/\\/\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b>f[\bS6\n\fG\n0Ef/\\/\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ed9c01c0ef74c258bca8698d96eb55a2) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n{\n \t\t\r\"\":\t\"\\/\\n+\"\r\t \r \n}'
	const char* json = "\n{\n \t\t\r\"\":\t\"\\/\\n+\"\r\t \r \n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n \\t\\t\\r\\\"\\\":\\t\\\"\\\\/\\\\n+\\\"\\r\\t \\r \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '/\n+'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("/\n+", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6bc8ffc2051355748ca662fe6c060d8a) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r\t{\t\n\n\r\t\"m\\n\"  :\r\"W%0\" ,\r\"_0\\tk\\t\\\"_\"\r:6e02\r\r\t\n\n \n,\r\r\t\n \n \n\"\"\n\t\t:[\r\r]\r\n\t}'
	const char* json = "\r\t{\t\n\n\r\t\"m\\n\"  :\r\"W%0\" ,\r\"_0\\tk\\t\\\"_\"\r:6e02\r\r\t\n\n \n,\r\r\t\n \n \n\"\"\n\t\t:[\r\r]\r\n\t}";
	std::cerr << "Plain JSON string from model: " << "\\r\\t{\\t\\n\\n\\r\\t\\\"m\\\\n\\\"  :\\r\\\"W%0\\\" ,\\r\\\"_0\\\\tk\\\\t\\\\\\\"_\\\"\\r:6e02\\r\\r\\t\\n\\n \\n,\\r\\r\\t\\n \\n \\n\\\"\\\"\\n\\t\\t:[\\r\\r]\\r\\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '_0\tk\t\"_' = '600.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "_0\tk\t\"_");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(600.0, cJSON_double(child));
	}
	{
		// 'm\n' = 'W%0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "m\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("W%0", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_25429508c2de5ed5359176650d0ca738) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' { \"\"\n \t:\"\\/k\\r\\\\\\r\\t\\\"\\\\\\f\"   }\r\n '
	const char* json = " { \"\"\n \t:\"\\/k\\r\\\\\\r\\t\\\"\\\\\\f\"   }\r\n ";
	std::cerr << "Plain JSON string from model: " << " { \\\"\\\"\\n \\t:\\\"\\\\/k\\\\r\\\\\\\\\\\\r\\\\t\\\\\\\"\\\\\\\\\\\\f\\\"   }\\r\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '/k\r\\\r\t\"\\\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("/k\r\\\r\t\"\\\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c617204ee5ee9457c1180691e1c7547a) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\t\r \n\"e\\t\\\\\"\n:\n\r\t-2e-040301 \r  \r\r}'
	const char* json = "{\t\t\r \n\"e\\t\\\\\"\n:\n\r\t-2e-040301 \r  \r\r}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\r \\n\\\"e\\\\t\\\\\\\\\\\"\\n:\\n\\r\\t-2e-040301 \\r  \\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'e\t\\' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "e\t\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_864e67bb8dfd60d2d560fd018da320a2) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \n\r\n\n\n\"?\\r\"\t\r\n\n\t: \ntrue\r\t,\"\\\"gNg.\"\r\r:false\t\r ,\"x\\b\\n.\" \t\n   :\"x\"\r\r\t \r\r}'
	const char* json = "{ \n\r\n\n\n\"?\\r\"\t\r\n\n\t: \ntrue\r\t,\"\\\"gNg.\"\r\r:false\t\r ,\"x\\b\\n.\" \t\n   :\"x\"\r\r\t \r\r}";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\r\\n\\n\\n\\\"?\\\\r\\\"\\t\\r\\n\\n\\t: \\ntrue\\r\\t,\\\"\\\\\\\"gNg.\\\"\\r\\r:false\\t\\r ,\\\"x\\\\b\\\\n.\\\" \\t\\n   :\\\"x\\\"\\r\\r\\t \\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '?\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "?\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\"gNg.' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"gNg.");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'x\b\n.' = 'x'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "x\b\n.");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("x", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_898d1bfb0f397cd9bec8254d16e21ffa) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\n \n\"\\b$\\t\\tA>\\\"\":\n\t\t{}\n\t}\t '
	const char* json = " {\n \n\"\\b$\\t\\tA>\\\"\":\n\t\t{}\n\t}\t ";
	std::cerr << "Plain JSON string from model: " << " {\\n \\n\\\"\\\\b$\\\\t\\\\tA>\\\\\\\"\\\":\\n\\t\\t{}\\n\\t}\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_6f3ab27f7eff9c6b98267b902c784556) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\r\t\r\r\"\\/,1g\\r\" \t:{\r}\r\n\n}\t\t'
	const char* json = "{\r\r\t\r\r\"\\/,1g\\r\" \t:{\r}\r\n\n}\t\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\t\\r\\r\\\"\\\\/,1g\\\\r\\\" \\t:{\\r}\\r\\n\\n}\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_21378b4ded785a0ece469ae0cb1fc03f) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\n\n\"\\\"g\\r\\n\":\t\rtrue }\t'
	const char* json = "{\n\n\n\"\\\"g\\r\\n\":\t\rtrue }\t";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\n\\\"\\\\\\\"g\\\\r\\\\n\\\":\\t\\rtrue }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"g\r\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"g\r\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7895d931da01fa51cc8973ef203d4ca2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n\n\r{ \t\n\"\"\n\n:[ \t\rnull  \r] ,\r\"\\f\"\r\n\t\n:  \"\\b\" , \"\\\\\":\r\t{} \r\r\n\r,\r\"5\\/\\r\"\t\n\n: -0.0e0 \n\n\t}'
	const char* json = "\n\n\r{ \t\n\"\"\n\n:[ \t\rnull  \r] ,\r\"\\f\"\r\n\t\n:  \"\\b\" , \"\\\\\":\r\t{} \r\r\n\r,\r\"5\\/\\r\"\t\n\n: -0.0e0 \n\n\t}";
	std::cerr << "Plain JSON string from model: " << "\\n\\n\\r{ \\t\\n\\\"\\\"\\n\\n:[ \\t\\rnull  \\r] ,\\r\\\"\\\\f\\\"\\r\\n\\t\\n:  \\\"\\\\b\\\" , \\\"\\\\\\\\\\\":\\r\\t{} \\r\\r\\n\\r,\\r\\\"5\\\\/\\\\r\\\"\\t\\n\\n: -0.0e0 \\n\\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\f' = '\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\b", cJSON_string(child));
	}
	{
		// '5/\r' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "5/\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7ff4d7bcd9bca4720494be14ce9976b6) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\n\n{\r\r\r\n\t\"<\\t\"\r\n:{\"\\r\\/\\/&\\t\":\t\"\\\\\\/\\rl\\b\\r\"\r\r \r \r\t} }\t'
	const char* json = "\t\n\n{\r\r\r\n\t\"<\\t\"\r\n:{\"\\r\\/\\/&\\t\":\t\"\\\\\\/\\rl\\b\\r\"\r\r \r \r\t} }\t";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\n{\\r\\r\\r\\n\\t\\\"<\\\\t\\\"\\r\\n:{\\\"\\\\r\\\\/\\\\/&\\\\t\\\":\\t\\\"\\\\\\\\\\\\/\\\\rl\\\\b\\\\r\\\"\\r\\r \\r \\r\\t} }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '<\t':'\r//&\t' = '\\/\rl\b\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r//&\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\/\rl\b\r", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c652e308a5154338b9c5623e2d335eb4) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n { \r\"\\bG\"\t\r:{ \t\n\"\"\n:false\r\n} \n\t,\"\\t?\\\"*\\rP\":\t\"zY\"\n\t\n , \t\"\\t&\"\t:{\r\t\"S\": {\t\"3%c\" \t\r\n\r\n:{\n\t\n\r\n\t\"\\n\":\r\nnull}\n}} \t,   \"u\"\t:true  , \t\t \n\"\\b=\"\n:\t \n{\r\n\n\"\\\\\\n?A\"\t  :true\t }\r\t,\n\"H\"  \n \n:\tfalse\n\t\n\n\t\n }\n'
	const char* json = "\n { \r\"\\bG\"\t\r:{ \t\n\"\"\n:false\r\n} \n\t,\"\\t?\\\"*\\rP\":\t\"zY\"\n\t\n , \t\"\\t&\"\t:{\r\t\"S\": {\t\"3%c\" \t\r\n\r\n:{\n\t\n\r\n\t\"\\n\":\r\nnull}\n}} \t,   \"u\"\t:true  , \t\t \n\"\\b=\"\n:\t \n{\r\n\n\"\\\\\\n?A\"\t  :true\t }\r\t,\n\"H\"  \n \n:\tfalse\n\t\n\n\t\n }\n";
	std::cerr << "Plain JSON string from model: " << "\\n { \\r\\\"\\\\bG\\\"\\t\\r:{ \\t\\n\\\"\\\"\\n:false\\r\\n} \\n\\t,\\\"\\\\t?\\\\\\\"*\\\\rP\\\":\\t\\\"zY\\\"\\n\\t\\n , \\t\\\"\\\\t&\\\"\\t:{\\r\\t\\\"S\\\": {\\t\\\"3%c\\\" \\t\\r\\n\\r\\n:{\\n\\t\\n\\r\\n\\t\\\"\\\\n\\\":\\r\\nnull}\\n}} \\t,   \\\"u\\\"\\t:true  , \\t\\t \\n\\\"\\\\b=\\\"\\n:\\t \\n{\\r\\n\\n\\\"\\\\\\\\\\\\n?A\\\"\\t  :true\\t }\\r\\t,\\n\\\"H\\\"  \\n \\n:\\tfalse\\n\\t\\n\\n\\t\\n }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b=':'\\\n?A' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\n?A");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'H' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "H");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\t?\"*\rP' = 'zY'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t?\"*\rP");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("zY", cJSON_string(child));
	}
	{
		// 'u' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "u");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\bG':'' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bG");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\t&':'S':'3%c':'\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t&");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "S");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "3%c");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2e61f2473e7b5a423af1df68d273cf02) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\" \\tzO\\rE#\"\r\n\n:false\r\t\r\r \r \r,\n \t\".+F\" :\r{}\r\t\n ,\t \"\\/r\"\t:\n\r\n[\r\"\\r\\n\",\n\t\nnull ,\"\\\\\"]\n\n}\r\n'
	const char* json = "{\t\" \\tzO\\rE#\"\r\n\n:false\r\t\r\r \r \r,\n \t\".+F\" :\r{}\r\t\n ,\t \"\\/r\"\t:\n\r\n[\r\"\\r\\n\",\n\t\nnull ,\"\\\\\"]\n\n}\r\n";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\" \\\\tzO\\\\rE#\\\"\\r\\n\\n:false\\r\\t\\r\\r \\r \\r,\\n \\t\\\".+F\\\" :\\r{}\\r\\t\\n ,\\t \\\"\\\\/r\\\"\\t:\\n\\r\\n[\\r\\\"\\\\r\\\\n\\\",\\n\\t\\nnull ,\\\"\\\\\\\\\\\"]\\n\\n}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ' \tzO\rE#' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " \tzO\rE#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/r':0 = '\r\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r\n", cJSON_string(child));
	}
	{
		// '/r':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '/r':2 = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b8a717e8ec10a795bc712adf185379db) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\")\\/\" \r \r:false\t\t\t}'
	const char* json = "{\")\\/\" \r \r:false\t\t\t}";
	std::cerr << "Plain JSON string from model: " << "{\\\")\\\\/\\\" \\r \\r:false\\t\\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ')/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ")/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bd44478ac33a1db253c174753ee99d18) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\t{   \"\\r\":null\r\r,\n\t \"{\\f\\/'\\t&\"\t:\n\r true \r,\"H\\n\\t\\t\" \n:\n false  \t}'
	const char* json = "\n\t{   \"\\r\":null\r\r,\n\t \"{\\f\\/'\\t&\"\t:\n\r true \r,\"H\\n\\t\\t\" \n:\n false  \t}";
	std::cerr << "Plain JSON string from model: " << "\\n\\t{   \\\"\\\\r\\\":null\\r\\r,\\n\\t \\\"{\\\\f\\\\/'\\\\t&\\\"\\t:\\n\\r true \\r,\\\"H\\\\n\\\\t\\\\t\\\" \\n:\\n false  \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'H\n\t\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "H\n\t\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '{\f/'\t&' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "{\f/'\t&");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2a9cd82830260209ded7cb3414050f68) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t  {\r\n\r\n \"\\fh\\b\"\t\n\r:\nfalse}'
	const char* json = "\t  {\r\n\r\n \"\\fh\\b\"\t\n\r:\nfalse}";
	std::cerr << "Plain JSON string from model: " << "\\t  {\\r\\n\\r\\n \\\"\\\\fh\\\\b\\\"\\t\\n\\r:\\nfalse}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\fh\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fh\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_356cb3c3b06faf82429afc7c83551db0) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\r\r\r\r\"~\":\n\"\\ni\\f\\nh\\\"\\tn\\f\"\t}'
	const char* json = "\t{\r\r\r\r\"~\":\n\"\\ni\\f\\nh\\\"\\tn\\f\"\t}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r\\r\\r\\\"~\\\":\\n\\\"\\\\ni\\\\f\\\\nh\\\\\\\"\\\\tn\\\\f\\\"\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '~' = '\ni\f\nh\"\tn\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "~");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\ni\f\nh\"\tn\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_22ccc21994de3b80bd9dbb290f2d0ca5) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\t\n\r\r\"\\/\\t\\n\\\\\"\r\n:false}'
	const char* json = "\n{\t\n\r\r\"\\/\\t\\n\\\\\"\r\n:false}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\n\\r\\r\\\"\\\\/\\\\t\\\\n\\\\\\\\\\\"\\r\\n:false}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/\t\n\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\t\n\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e097a1ecae88b1344774307dca5c6e68) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\"\\\\[\\f\\\"\"\n\n\t\r\r:[]\n }\n'
	const char* json = "{\r\"\\\\[\\f\\\"\"\n\n\t\r\r:[]\n }\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\\\\\[\\\\f\\\\\\\"\\\"\\n\\n\\t\\r\\r:[]\\n }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_4eafd7b510ec2bc02a7ae28c634c52b7) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n{\n\t\t\"\\\"\\f\\\\\\n^\\fp5\\/\\b3\\t\\n-\"\n:\"1\\b\"\r\n\n}'
	const char* json = "\n{\n\t\t\"\\\"\\f\\\\\\n^\\fp5\\/\\b3\\t\\n-\"\n:\"1\\b\"\r\n\n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\t\\t\\\"\\\\\\\"\\\\f\\\\\\\\\\\\n^\\\\fp5\\\\/\\\\b3\\\\t\\\\n-\\\"\\n:\\\"1\\\\b\\\"\\r\\n\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"\f\\\n^\fp5/\b3\t\n-' = '1\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\f\\\n^\fp5/\b3\t\n-");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("1\b", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9ba8fd837abb3aa6407e9a4516d7af54) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\t \"-\"\n:null \r\r\n,\"Gs\\fAc\\f\\\"\\\\\\f\\b\"\t\r\t\r:\r\r{}}'
	const char* json = "{\n\t \"-\"\n:null \r\r\n,\"Gs\\fAc\\f\\\"\\\\\\f\\b\"\t\r\t\r:\r\r{}}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t \\\"-\\\"\\n:null \\r\\r\\n,\\\"Gs\\\\fAc\\\\f\\\\\\\"\\\\\\\\\\\\f\\\\b\\\"\\t\\r\\t\\r:\\r\\r{}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '-' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "-");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2cb525137f1929991329303991a50479) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\n{\r\"\"  \n:\"\\b\"}'
	const char* json = "\n\n{\r\"\"  \n:\"\\b\"}";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{\\r\\\"\\\"  \\n:\\\"\\\\b\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\b", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_42c708c9cd53f6865d78cf02571cf14e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\"\" \n\n\r: \n\t{  \"\\fS\\\\\\nW\" :0.0} } \r'
	const char* json = "\n{\"\" \n\n\r: \n\t{  \"\\fS\\\\\\nW\" :0.0} } \r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\" \\n\\n\\r: \\n\\t{  \\\"\\\\fS\\\\\\\\\\\\nW\\\" :0.0} } \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\fS\\\nW' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fS\\\nW");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9a81ad408a36512494ca4026e4ccb1d8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\t\"%\"\n\t\n:null,\r  \n\"\": null }'
	const char* json = " {\t\"%\"\n\t\n:null,\r  \n\"\": null }";
	std::cerr << "Plain JSON string from model: " << " {\\t\\\"%\\\"\\n\\t\\n:null,\\r  \\n\\\"\\\": null }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '%' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "%");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ea3bedc99d7396870e36b128c52d16fb) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\r\r \"\"\n:null\r\r,\n\r\r\"q\":{}\r\n\n\r}\t'
	const char* json = "\t{\r\r \"\"\n:null\r\r,\n\r\r\"q\":{}\r\n\n\r}\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r \\\"\\\"\\n:null\\r\\r,\\n\\r\\r\\\"q\\\":{}\\r\\n\\n\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8b4a212732488da7a78e7a3eb91285e4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\t\r{\n\r\"\"\t\t\r:\"T\\\"5lW\", \n\r\"\\t\\\\\"  \n\t: \n\t0\t  \n \r}\t\t\n'
	const char* json = "\t\t\r{\n\r\"\"\t\t\r:\"T\\\"5lW\", \n\r\"\\t\\\\\"  \n\t: \n\t0\t  \n \r}\t\t\n";
	std::cerr << "Plain JSON string from model: " << "\\t\\t\\r{\\n\\r\\\"\\\"\\t\\t\\r:\\\"T\\\\\\\"5lW\\\", \\n\\r\\\"\\\\t\\\\\\\\\\\"  \\n\\t: \\n\\t0\\t  \\n \\r}\\t\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'T\"5lW'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("T\"5lW", cJSON_string(child));
	}
	{
		// '\t\\' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a42556fb817ccc8901f9105d4eb55e5a) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\t {\t\"\"\n:[\r\n true\t\t,\"\\\\\",\r{}\n\r\t\t]\r\n\t,\"7 \\f@\\\"{\\/z\\\"\"\t :\t[\t]\t\r,\"\\/2\":\t\n\t\"\\rU4\"}\r\n'
	const char* json = "\r\t {\t\"\"\n:[\r\n true\t\t,\"\\\\\",\r{}\n\r\t\t]\r\n\t,\"7 \\f@\\\"{\\/z\\\"\"\t :\t[\t]\t\r,\"\\/2\":\t\n\t\"\\rU4\"}\r\n";
	std::cerr << "Plain JSON string from model: " << "\\r\\t {\\t\\\"\\\"\\n:[\\r\\n true\\t\\t,\\\"\\\\\\\\\\\",\\r{}\\n\\r\\t\\t]\\r\\n\\t,\\\"7 \\\\f@\\\\\\\"{\\\\/z\\\\\\\"\\\"\\t :\\t[\\t]\\t\\r,\\\"\\\\/2\\\":\\t\\n\\t\\\"\\\\rU4\\\"}\\r\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':1 = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	{
		// '/2' = '\rU4'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/2");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\rU4", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c26191d58a0ff085938a83fc1e58afa4) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\\t\\\"\"\t\t:\n[\t\n\tfalse\r]\n  }\n'
	const char* json = "{ \"\\t\\\"\"\t\t:\n[\t\n\tfalse\r]\n  }\n";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\t\\\\\\\"\\\"\\t\\t:\\n[\\t\\n\\tfalse\\r]\\n  }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t\"':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8f0f14895990981dbbddda86c1488827) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' {\"\\\"\"\n \t:\n \r\nfalse\n\n\t ,\r\n  \"u.\":null,\n\r\t\"\":\">\\/\"\n }'
	const char* json = " {\"\\\"\"\n \t:\n \r\nfalse\n\n\t ,\r\n  \"u.\":null,\n\r\t\"\":\">\\/\"\n }";
	std::cerr << "Plain JSON string from model: " << " {\\\"\\\\\\\"\\\"\\n \\t:\\n \\r\\nfalse\\n\\n\\t ,\\r\\n  \\\"u.\\\":null,\\n\\r\\t\\\"\\\":\\\">\\\\/\\\"\\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '>/'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(">/", cJSON_string(child));
	}
	{
		// 'u.' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "u.");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_dbb5f00498ca70746f7e96c23a30bcca) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\n\n\t\r\r\n\"\\b\\b\" \r\n:\nfalse\n,\"\\\"\\\"@\\\\\\/\\f\\tY\"\t\n :false\r\t\n\n, \"\"\r\r:\r -0\r \t}\r\n\r'
	const char* json = "\n{\n\n\t\r\r\n\"\\b\\b\" \r\n:\nfalse\n,\"\\\"\\\"@\\\\\\/\\f\\tY\"\t\n :false\r\t\n\n, \"\"\r\r:\r -0\r \t}\r\n\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\n\\t\\r\\r\\n\\\"\\\\b\\\\b\\\" \\r\\n:\\nfalse\\n,\\\"\\\\\\\"\\\\\\\"@\\\\\\\\\\\\/\\\\f\\\\tY\\\"\\t\\n :false\\r\\t\\n\\n, \\\"\\\"\\r\\r:\\r -0\\r \\t}\\r\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\b\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\"\"@\\/\f\tY' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\"@\\/\f\tY");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_701579b66144f823a54a03dbfb2dd1ca) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \t\r\n\"\\\"\\\\\"\t: \nfalse\n}\r \n'
	const char* json = "{ \t\r\n\"\\\"\\\\\"\t: \nfalse\n}\r \n";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\r\\n\\\"\\\\\\\"\\\\\\\\\\\"\\t: \\nfalse\\n}\\r \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_0cac2539d00456658cc2fcdf927e7137) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n \r\t\"D\\b\\/\":\nnull \t\t ,\r\n\"\"\r:null  }'
	const char* json = "{\n \r\t\"D\\b\\/\":\nnull \t\t ,\r\n\"\"\r:null  }";
	std::cerr << "Plain JSON string from model: " << "{\\n \\r\\t\\\"D\\\\b\\\\/\\\":\\nnull \\t\\t ,\\r\\n\\\"\\\"\\r:null  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'D\b/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "D\b/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d9bb99c47325c28d0890db0f59e3460f) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{  \n\"Z\\n\\/\\\"\"\t:\r\t  null \t}'
	const char* json = "{  \n\"Z\\n\\/\\\"\"\t:\r\t  null \t}";
	std::cerr << "Plain JSON string from model: " << "{  \\n\\\"Z\\\\n\\\\/\\\\\\\"\\\"\\t:\\r\\t  null \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Z\n/\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Z\n/\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_18f54d33c2cb5bfbc64874b5dd09d67d) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \n\n \r\"\\nh\\r$\":\nfalse\n\r\t\r\n } \n\t'
	const char* json = "{ \n\n \r\"\\nh\\r$\":\nfalse\n\r\t\r\n } \n\t";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\n \\r\\\"\\\\nh\\\\r$\\\":\\nfalse\\n\\r\\t\\r\\n } \\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\nh\r$' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nh\r$");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7a44115ac8a5a02322eedee5509109cb) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\r\r\n \"i\\\"\\/\":true\n\t }'
	const char* json = "\t{\r\r\n \"i\\\"\\/\":true\n\t }";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r\\n \\\"i\\\\\\\"\\\\/\\\":true\\n\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'i\"/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "i\"/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9b93f56d3a8d84fb6fa2b6ffaf8d5c75) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \n\r\"\\t\"\t\n: false\n\n ,\r\"\\/\\n\"\t\r\t:true\n  }\n\t '
	const char* json = "{ \n\r\"\\t\"\t\n: false\n\n ,\r\"\\/\\n\"\t\r\t:true\n  }\n\t ";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\r\\\"\\\\t\\\"\\t\\n: false\\n\\n ,\\r\\\"\\\\/\\\\n\\\"\\t\\r\\t:true\\n  }\\n\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f5e956db9074670ff4c5e8b05e673251) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n \"t\"\t\n\n:\n{\n\t\t\"\\f\"\t \n\r:\t{  \"U\\t M\\/\\t\"\n\n\t:false\r  \n\n,\t\n\"\\bL\\tE*\\rY\":\tnull,\"\"\t\r: \t true,\n\"H\\/\\r\": false\n\t\n\t}\t }\r\n\n,\r\"\\b\"\n :\n-8\r}\t'
	const char* json = "{\n \"t\"\t\n\n:\n{\n\t\t\"\\f\"\t \n\r:\t{  \"U\\t M\\/\\t\"\n\n\t:false\r  \n\n,\t\n\"\\bL\\tE*\\rY\":\tnull,\"\"\t\r: \t true,\n\"H\\/\\r\": false\n\t\n\t}\t }\r\n\n,\r\"\\b\"\n :\n-8\r}\t";
	std::cerr << "Plain JSON string from model: " << "{\\n \\\"t\\\"\\t\\n\\n:\\n{\\n\\t\\t\\\"\\\\f\\\"\\t \\n\\r:\\t{  \\\"U\\\\t M\\\\/\\\\t\\\"\\n\\n\\t:false\\r  \\n\\n,\\t\\n\\\"\\\\bL\\\\tE*\\\\rY\\\":\\tnull,\\\"\\\"\\t\\r: \\t true,\\n\\\"H\\\\/\\\\r\\\": false\\n\\t\\n\\t}\\t }\\r\\n\\n,\\r\\\"\\\\b\\\"\\n :\\n-8\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b' = '-8'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-8, cJSON_double(child));
	}
	{
		// 't':'\f':'' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 't':'\f':'H/\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "H/\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 't':'\f':'U\t M/\t' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "U\t M/\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 't':'\f':'\bL\tE*\rY' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bL\tE*\rY");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_44ae7e74be88608409a1f0e156cb94e1) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\r\n\t\"\\\\\\\"\"\r :\tfalse\n \n}'
	const char* json = "{\r\r\n\t\"\\\\\\\"\"\r :\tfalse\n \n}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\r\\n\\t\\\"\\\\\\\\\\\\\\\"\\\"\\r :\\tfalse\\n \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_928d36fda1a52299844955406c771f06) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\t\"}\"\t:\t\"\"\n}'
	const char* json = "{\t\t\"}\"\t:\t\"\"\n}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"}\\\"\\t:\\t\\\"\\\"\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '}' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d3d01ac64fcea30680139278d173f650) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenArray
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t \r{\r\r\n\"\":\r\t\r {}\t,\r\r\r\n\r\"2rE\"\t\r:\"[~\\r\\b\\\"\\\\\\r|\\/\\\\^\\/`\\n\\\\B\"  \n \t,\t\"=\" \t\t\n:null\n\r \n\t,\n \r\"\\n\\f\"\n\t\r\n\r:\n\t\t\r[false\n\n,10\r \t\r]\r\r\r, \t\r\n \"\\b\\bx\\f\\f\\\\\\/&\"\r\t\t\t:\r [ [ ] \t\t  ]\n,\n\t \"T\\b#\"\r\r:true\t\n\r}\t\n'
	const char* json = "\t \r{\r\r\n\"\":\r\t\r {}\t,\r\r\r\n\r\"2rE\"\t\r:\"[~\\r\\b\\\"\\\\\\r|\\/\\\\^\\/`\\n\\\\B\"  \n \t,\t\"=\" \t\t\n:null\n\r \n\t,\n \r\"\\n\\f\"\n\t\r\n\r:\n\t\t\r[false\n\n,10\r \t\r]\r\r\r, \t\r\n \"\\b\\bx\\f\\f\\\\\\/&\"\r\t\t\t:\r [ [ ] \t\t  ]\n,\n\t \"T\\b#\"\r\r:true\t\n\r}\t\n";
	std::cerr << "Plain JSON string from model: " << "\\t \\r{\\r\\r\\n\\\"\\\":\\r\\t\\r {}\\t,\\r\\r\\r\\n\\r\\\"2rE\\\"\\t\\r:\\\"[~\\\\r\\\\b\\\\\\\"\\\\\\\\\\\\r|\\\\/\\\\\\\\^\\\\/`\\\\n\\\\\\\\B\\\"  \\n \\t,\\t\\\"=\\\" \\t\\t\\n:null\\n\\r \\n\\t,\\n \\r\\\"\\\\n\\\\f\\\"\\n\\t\\r\\n\\r:\\n\\t\\t\\r[false\\n\\n,10\\r \\t\\r]\\r\\r\\r, \\t\\r\\n \\\"\\\\b\\\\bx\\\\f\\\\f\\\\\\\\\\\\/&\\\"\\r\\t\\t\\t:\\r [ [ ] \\t\\t  ]\\n,\\n\\t \\\"T\\\\b#\\\"\\r\\r:true\\t\\n\\r}\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'T\b#' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "T\b#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '2rE' = '[~\r\b\"\\\r|/\\^/`\n\\B'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "2rE");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("[~\r\b\"\\\r|/\\^/`\n\\B", cJSON_string(child));
	}
	{
		// '\n\f':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\n\f':1 = '10'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(10, cJSON_double(child));
	}
	{
		// '=' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c2e9ab1a8d6c66d376533230ed553410) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n\n{\n \"\"\r\r:\r\r\ntrue\r\r\n\r,\t\"\\\\\\n\"\n\t\t\r:  \"\\\\4&'\\tl\\n\\\"\\t\\\"\\b\"\n  ,\r\"\\n\"\n:true\r\t\n\r}\r'
	const char* json = "\n\n{\n \"\"\r\r:\r\r\ntrue\r\r\n\r,\t\"\\\\\\n\"\n\t\t\r:  \"\\\\4&'\\tl\\n\\\"\\t\\\"\\b\"\n  ,\r\"\\n\"\n:true\r\t\n\r}\r";
	std::cerr << "Plain JSON string from model: " << "\\n\\n{\\n \\\"\\\"\\r\\r:\\r\\r\\ntrue\\r\\r\\n\\r,\\t\\\"\\\\\\\\\\\\n\\\"\\n\\t\\t\\r:  \\\"\\\\\\\\4&'\\\\tl\\\\n\\\\\\\"\\\\t\\\\\\\"\\\\b\\\"\\n  ,\\r\\\"\\\\n\\\"\\n:true\\r\\t\\n\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\\\n' = '\\4&'\tl\n\"\t\"\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\4&'\tl\n\"\t\"\b", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c7ad5f5679d5b410aba1b3389756c222) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \n\t\"P\\t\\\\\"\r: false}\n'
	const char* json = "{ \n\t\"P\\t\\\\\"\r: false}\n";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\t\\\"P\\\\t\\\\\\\\\\\"\\r: false}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'P\t\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "P\t\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d1e97f3433c9e11f6ec1e9b4761a2929) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\r{\t\n\r\"&\"\n:\n\tfalse\t\r\r\n\n\n ,\"\\r\"  \t\t\t: \t\n {},\t  \t\"9\"\t:\"-\" } \r'
	const char* json = "\t\r{\t\n\r\"&\"\n:\n\tfalse\t\r\r\n\n\n ,\"\\r\"  \t\t\t: \t\n {},\t  \t\"9\"\t:\"-\" } \r";
	std::cerr << "Plain JSON string from model: " << "\\t\\r{\\t\\n\\r\\\"&\\\"\\n:\\n\\tfalse\\t\\r\\r\\n\\n\\n ,\\\"\\\\r\\\"  \\t\\t\\t: \\t\\n {},\\t  \\t\\\"9\\\"\\t:\\\"-\\\" } \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '9' = '-'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "9");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("-", cJSON_string(child));
	}
	{
		// '&' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "&");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_046c2e17573bd47f6a9167f249f67cbc) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"u\"\r\n\t\r\n\r:\t\n \"\\tB\"}\t'
	const char* json = "{ \"u\"\r\n\t\r\n\r:\t\n \"\\tB\"}\t";
	std::cerr << "Plain JSON string from model: " << "{ \\\"u\\\"\\r\\n\\t\\r\\n\\r:\\t\\n \\\"\\\\tB\\\"}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'u' = '\tB'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "u");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\tB", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_21111cac160cb61a704558d677ec3354) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \t\"\\\"\\\\.\":\n[]\t\n,\r\"\\fb3\\n\\n\\\"\\b\\f\":\t\n true\n\t}\n'
	const char* json = "{ \t\"\\\"\\\\.\":\n[]\t\n,\r\"\\fb3\\n\\n\\\"\\b\\f\":\t\n true\n\t}\n";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"\\\\\\\"\\\\\\\\.\\\":\\n[]\\t\\n,\\r\\\"\\\\fb3\\\\n\\\\n\\\\\\\"\\\\b\\\\f\\\":\\t\\n true\\n\\t}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\fb3\n\n\"\b\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fb3\n\n\"\b\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_509f261090371734a94b8e13e9d1a0eb) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t\r{\n \n\r\r\r\"\\\\\":{\n\r \t\".\\b\\/\" \n\t\t:null\t} \n, \n\t\t \"d\\n\\/\\r*E\\\"\\/1\\b\" :\r30e0209,\r\r\t\t\t\"\"\n \r\t : null \n}'
	const char* json = " \t\r{\n \n\r\r\r\"\\\\\":{\n\r \t\".\\b\\/\" \n\t\t:null\t} \n, \n\t\t \"d\\n\\/\\r*E\\\"\\/1\\b\" :\r30e0209,\r\r\t\t\t\"\"\n \r\t : null \n}";
	std::cerr << "Plain JSON string from model: " << " \\t\\r{\\n \\n\\r\\r\\r\\\"\\\\\\\\\\\":{\\n\\r \\t\\\".\\\\b\\\\/\\\" \\n\\t\\t:null\\t} \\n, \\n\\t\\t \\\"d\\\\n\\\\/\\\\r*E\\\\\\\"\\\\/1\\\\b\\\" :\\r30e0209,\\r\\r\\t\\t\\t\\\"\\\"\\n \\r\\t : null \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\\':'.\b/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ".\b/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'd\n/\r*E\"/1\b' = '3e+210'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "d\n/\r*E\"/1\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(3e+210, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4d1ece2e9f62eb30ae6b8e68ef5d15ef) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t\n{\"\\t}\\f\\f\"\r\t\n:{}\r \t}'
	const char* json = "\t\n{\"\\t}\\f\\f\"\r\t\n:{}\r \t}";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{\\\"\\\\t}\\\\f\\\\f\\\"\\r\\t\\n:{}\\r \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_e6e3840e0ffdc2d1cf32727d6f22f434) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' \t\n{ \n\"\\n\"\t\n\t: \"_\" }'
	const char* json = " \t\n{ \n\"\\n\"\t\n\t: \"_\" }";
	std::cerr << "Plain JSON string from model: " << " \\t\\n{ \\n\\\"\\\\n\\\"\\t\\n\\t: \\\"_\\\" }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = '_'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("_", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e066c08cf8f2611646078a17ae44f694) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\n  \t\"$\"\n:false \n \r\n\t ,\t\r  \t\n\"\\fZ\" \n :\"'\\f\"}\n'
	const char* json = "\n{\n  \t\"$\"\n:false \n \r\n\t ,\t\r  \t\n\"\\fZ\" \n :\"'\\f\"}\n";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n  \\t\\\"$\\\"\\n:false \\n \\r\\n\\t ,\\t\\r  \\t\\n\\\"\\\\fZ\\\" \\n :\\\"'\\\\f\\\"}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\fZ' = ''\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fZ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("'\f", cJSON_string(child));
	}
	{
		// '$' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "$");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_81d6eecbbc7ead5c814d81036a0b0c77) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\n\"\\t\\\"\\tq\" \r:\r\n -0e-0\t \t\t,\r \n\">\"\n:\r false  \r\n,\t\"\\t\\r\": 5  ,\r \"\\/\\\"\\n(r\\/Z\"  :\t\t\ntrue}\r'
	const char* json = "\n{\n\"\\t\\\"\\tq\" \r:\r\n -0e-0\t \t\t,\r \n\">\"\n:\r false  \r\n,\t\"\\t\\r\": 5  ,\r \"\\/\\\"\\n(r\\/Z\"  :\t\t\ntrue}\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\\"\\\\t\\\\\\\"\\\\tq\\\" \\r:\\r\\n -0e-0\\t \\t\\t,\\r \\n\\\">\\\"\\n:\\r false  \\r\\n,\\t\\\"\\\\t\\\\r\\\": 5  ,\\r \\\"\\\\/\\\\\\\"\\\\n(r\\\\/Z\\\"  :\\t\\t\\ntrue}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t\"\tq' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\"\tq");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// '\t\r' = '5'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(5, cJSON_double(child));
	}
	{
		// '/\"\n(r/Z' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\"\n(r/Z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '>' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ">");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c61d82fb6657a363795624198637d97e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' \r {\n\r\n\t\"\\t!<2\":\nfalse\t }\r'
	const char* json = " \r {\n\r\n\t\"\\t!<2\":\nfalse\t }\r";
	std::cerr << "Plain JSON string from model: " << " \\r {\\n\\r\\n\\t\\\"\\\\t!<2\\\":\\nfalse\\t }\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t!<2' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t!<2");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_806fb89d67565e22176b067dd657b2d2) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"\"  \t:\t\tfalse\n\r\r}'
	const char* json = "{\"\"  \t:\t\tfalse\n\r\r}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"  \\t:\\t\\tfalse\\n\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2190e79224de6753cf12164521694e96) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"\"\r\r\n:\n\"\\r\\f\"\t }'
	const char* json = "{\r\"\"\r\r\n:\n\"\\r\\f\"\t }";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\r\\r\\n:\\n\\\"\\\\r\\\\f\\\"\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\r\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a1b110c3ab263537f68943d3e9e1ef82) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t\r\r{\r\"\\\\\"\n\r\n:false\r\t\n}'
	const char* json = "\t\r\r{\r\"\\\\\"\n\r\n:false\r\t\n}";
	std::cerr << "Plain JSON string from model: " << "\\t\\r\\r{\\r\\\"\\\\\\\\\\\"\\n\\r\\n:false\\r\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4cc0f2e92855cf10a2b54fdc6e4bf378) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n\n {\t\"\"\t: \r\n\tnull\r}'
	const char* json = "\n\n {\t\"\"\t: \r\n\tnull\r}";
	std::cerr << "Plain JSON string from model: " << "\\n\\n {\\t\\\"\\\"\\t: \\r\\n\\tnull\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6ea945a30e9fe80e2dffcc75c76392db) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\":\n4,\t\"\\\"\\\\\"\t:false\n } '
	const char* json = "{\"\":\n4,\t\"\\\"\\\\\"\t:false\n } ";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\":\\n4,\\t\\\"\\\\\\\"\\\\\\\\\\\"\\t:false\\n } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '4'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(4, cJSON_double(child));
	}
	{
		// '\"\\' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_16c6aa1f0f058431a92f0e008486b45c) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\n\r\r\"\":\ttrue\n\t\n}\r\r'
	const char* json = " {\n\r\r\"\":\ttrue\n\t\n}\r\r";
	std::cerr << "Plain JSON string from model: " << " {\\n\\r\\r\\\"\\\":\\ttrue\\n\\t\\n}\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_15f0ff9b3ede017b7f8dc23a5ef114e7) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n\r\t{ \n\"\":false\r\r\r}\t \r'
	const char* json = "\n\r\t{ \n\"\":false\r\r\r}\t \r";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{ \\n\\\"\\\":false\\r\\r\\r}\\t \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bf9c202b042c5e5fdc8d408635db4aa0) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n\t{\"\": \n\nfalse\r ,\t \t\"\\fc\"\t :true\r\t\n\n,\t\n \"\\/G`\\/\\rd\\\"<\\tx\\\"\"\n:\"\\t\"\r\t\r\r}\t'
	const char* json = "\n\t{\"\": \n\nfalse\r ,\t \t\"\\fc\"\t :true\r\t\n\n,\t\n \"\\/G`\\/\\rd\\\"<\\tx\\\"\"\n:\"\\t\"\r\t\r\r}\t";
	std::cerr << "Plain JSON string from model: " << "\\n\\t{\\\"\\\": \\n\\nfalse\\r ,\\t \\t\\\"\\\\fc\\\"\\t :true\\r\\t\\n\\n,\\t\\n \\\"\\\\/G`\\\\/\\\\rd\\\\\\\"<\\\\tx\\\\\\\"\\\"\\n:\\\"\\\\t\\\"\\r\\t\\r\\r}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/G`/\rd\"<\tx\"' = '\t'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/G`/\rd\"<\tx\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t", cJSON_string(child));
	}
	{
		// '\fc' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fc");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fa9e15eb7d02dfa53b1b360ccd7f3b7a) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n \r\n\n\"\\t\\n\\r\\tDaf\\f\"  :   true\n}'
	const char* json = "{\n \r\n\n\"\\t\\n\\r\\tDaf\\f\"  :   true\n}";
	std::cerr << "Plain JSON string from model: " << "{\\n \\r\\n\\n\\\"\\\\t\\\\n\\\\r\\\\tDaf\\\\f\\\"  :   true\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t\n\r\tDaf\f' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\n\r\tDaf\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_44e949906090839bc95343f0cea24ea0) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n  \")Y\":\r-0.07070E0,\"\\\\\\\\l\"\t\t \r:\"\"\n,\"W\"\r\r:false\n\n\t\n}'
	const char* json = "{\n\n  \")Y\":\r-0.07070E0,\"\\\\\\\\l\"\t\t \r:\"\"\n,\"W\"\r\r:false\n\n\t\n}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n  \\\")Y\\\":\\r-0.07070E0,\\\"\\\\\\\\\\\\\\\\l\\\"\\t\\t \\r:\\\"\\\"\\n,\\\"W\\\"\\r\\r:false\\n\\n\\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ')Y' = '-0.0707'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ")Y");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0707, cJSON_double(child));
	}
	{
		// 'W' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "W");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\\\\l' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\\l");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_12161c6c9d475a7b42be9f40538297a3) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n{\t\"r\\\\A\\r\\r\\\"@Q\"\r:-2.087E-0260 \n}'
	const char* json = "\n{\t\"r\\\\A\\r\\r\\\"@Q\"\r:-2.087E-0260 \n}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\\"r\\\\\\\\A\\\\r\\\\r\\\\\\\"@Q\\\"\\r:-2.087E-0260 \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'r\\A\r\r\"@Q' = '-2.087e-260'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "r\\A\r\r\"@Q");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-2.087e-260, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e32e83f1aca9e6359f5f6bb158cad4fa) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t\n {\n  \"Zv\":false }'
	const char* json = "\t\n {\n  \"Zv\":false }";
	std::cerr << "Plain JSON string from model: " << "\\t\\n {\\n  \\\"Zv\\\":false }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Zv' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Zv");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a6b15c302b60bb2c73f426c3b4aac37a) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\t\t  \"\\f\\t\\b0\\/\":\nfalse\r ,\"\\n\"\r\n\t:null } '
	const char* json = "\n{\t\t  \"\\f\\t\\b0\\/\":\nfalse\r ,\"\\n\"\r\n\t:null } ";
	std::cerr << "Plain JSON string from model: " << "\\n{\\t\\t  \\\"\\\\f\\\\t\\\\b0\\\\/\\\":\\nfalse\\r ,\\\"\\\\n\\\"\\r\\n\\t:null } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\f\t\b0/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\t\b0/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f400fea0b2a87dacbe61153726110458) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\t\t{\t\t\r\r\"\\/7J\" \r:\t\r{\n} \t}\t'
	const char* json = "\r\t\t{\t\t\r\r\"\\/7J\" \r:\t\r{\n} \t}\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\t{\\t\\t\\r\\r\\\"\\\\/7J\\\" \\r:\\t\\r{\\n} \\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_4ed57f6d1fe00a0a53f2458ea0f9bca7) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// ElementSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r \t\"\"\t \n\r\t: \r\n\"\\t\\\\<\\t2\"\n,  \r\"\\r.'\\\"Y\\\\\\fK\\r\"\t\r\r:-1\t\t,\r\r\"\\t\":null\t\t\n  \t\t,\t \n\n \"G\\r&Y\" \r\n:\t\r\r\"[\"\r\r\r\n,\"\\r\" \n :true\r\r,\r \"\\n\"\n\t\n:\n[\tfalse,false ] \t\r\n,\n\n \n\"\\n\\n\\t\\r\"\t\n\n :\r[\n   270E+0883\t \r]\t}'
	const char* json = "{\r \t\"\"\t \n\r\t: \r\n\"\\t\\\\<\\t2\"\n,  \r\"\\r.'\\\"Y\\\\\\fK\\r\"\t\r\r:-1\t\t,\r\r\"\\t\":null\t\t\n  \t\t,\t \n\n \"G\\r&Y\" \r\n:\t\r\r\"[\"\r\r\r\n,\"\\r\" \n :true\r\r,\r \"\\n\"\n\t\n:\n[\tfalse,false ] \t\r\n,\n\n \n\"\\n\\n\\t\\r\"\t\n\n :\r[\n   270E+0883\t \r]\t}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t\\\"\\\"\\t \\n\\r\\t: \\r\\n\\\"\\\\t\\\\\\\\<\\\\t2\\\"\\n,  \\r\\\"\\\\r.'\\\\\\\"Y\\\\\\\\\\\\fK\\\\r\\\"\\t\\r\\r:-1\\t\\t,\\r\\r\\\"\\\\t\\\":null\\t\\t\\n  \\t\\t,\\t \\n\\n \\\"G\\\\r&Y\\\" \\r\\n:\\t\\r\\r\\\"[\\\"\\r\\r\\r\\n,\\\"\\\\r\\\" \\n :true\\r\\r,\\r \\\"\\\\n\\\"\\n\\t\\n:\\n[\\tfalse,false ] \\t\\r\\n,\\n\\n \\n\\\"\\\\n\\\\n\\\\t\\\\r\\\"\\t\\n\\n :\\r[\\n   270E+0883\\t \\r]\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\t\\<\t2'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t\\<\t2", cJSON_string(child));
	}
	{
		// '\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\n':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\n':1 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\r' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\n\n\t\r':0 = 'inf'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\n\t\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		// Testing for NaN or Infinity is not implemented
	}
	{
		// 'G\r&Y' = '['
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "G\r&Y");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("[", cJSON_string(child));
	}
	{
		// '\r.'\"Y\\\fK\r' = '-1'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r.'\"Y\\\fK\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-1, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_132303187614861210016a17c6a6a7a7) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r \r{ \t\r\t\"\"\r :\ttrue\n\r } '
	const char* json = "\r \r{ \t\r\t\"\"\r :\ttrue\n\r } ";
	std::cerr << "Plain JSON string from model: " << "\\r \\r{ \\t\\r\\t\\\"\\\"\\r :\\ttrue\\n\\r } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fdf152d4de7cc5432685e01f3ac0b9a4) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \n\n\t\r\n\"\": \n\"]y\"\n\n \r,\n \t\r\t\r\"\\\\\\n \\n-\\tj8wse\\\\\\t\\\\\\/\"\r \r\n\t\t: {  \t\r\n\"=\"\r:9 } ,\t\t\"0\" \t:{\n\r\t\"2g\\/!\\\"23\\/\"\n:null}\t \t}'
	const char* json = "{ \n\n\t\r\n\"\": \n\"]y\"\n\n \r,\n \t\r\t\r\"\\\\\\n \\n-\\tj8wse\\\\\\t\\\\\\/\"\r \r\n\t\t: {  \t\r\n\"=\"\r:9 } ,\t\t\"0\" \t:{\n\r\t\"2g\\/!\\\"23\\/\"\n:null}\t \t}";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\n\\t\\r\\n\\\"\\\": \\n\\\"]y\\\"\\n\\n \\r,\\n \\t\\r\\t\\r\\\"\\\\\\\\\\\\n \\\\n-\\\\tj8wse\\\\\\\\\\\\t\\\\\\\\\\\\/\\\"\\r \\r\\n\\t\\t: {  \\t\\r\\n\\\"=\\\"\\r:9 } ,\\t\\t\\\"0\\\" \\t:{\\n\\r\\t\\\"2g\\\\/!\\\\\\\"23\\\\/\\\"\\n:null}\\t \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = ']y'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("]y", cJSON_string(child));
	}
	{
		// '0':'2g/!\"23/' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "0");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "2g/!\"23/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\\\n \n-\tj8wse\\\t\\/':'=' = '9'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\n \n-\tj8wse\\\t\\/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(9, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ba1822de0ad39352b6fcd678606a2933) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{\n\n\r\"\\t\"\n :\t\t\r\"5U*\\\\\" ,\n\r\r\t\"\\bW{\\t]j8#\"\n:null\t}\n\r'
	const char* json = "\n{\n\n\r\"\\t\"\n :\t\t\r\"5U*\\\\\" ,\n\r\r\t\"\\bW{\\t]j8#\"\n:null\t}\n\r";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\n\\r\\\"\\\\t\\\"\\n :\\t\\t\\r\\\"5U*\\\\\\\\\\\" ,\\n\\r\\r\\t\\\"\\\\bW{\\\\t]j8#\\\"\\n:null\\t}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = '5U*\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("5U*\\", cJSON_string(child));
	}
	{
		// '\bW{\t]j8#' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bW{\t]j8#");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e1f3aa7e5da681fdacb47e10bd6091d1) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\"\\\\\"\n:\t\tnull\n \r\t}\t'
	const char* json = "{\t\"\\\\\"\n:\t\tnull\n \r\t}\t";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\\\\\\\\"\\n:\\t\\tnull\\n \\r\\t}\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a3b07008d92857339fd8aa29780e083f) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: ' \t\t{\n   \"'\"\n\r\n :[]\t \n\n}  \n'
	const char* json = " \t\t{\n   \"'\"\n\r\n :[]\t \n\n}  \n";
	std::cerr << "Plain JSON string from model: " << " \\t\\t{\\n   \\\"'\\\"\\n\\r\\n :[]\\t \\n\\n}  \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_46872c1bbb5ed4c6dfc0d542acd84354) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{\t \"\"\r: \tnull,\r\t\"\\f\\n\\t\\/w>d\"\n: \t-0.0 \r ,\r\n\"\\/\\f(:\\rj\\tp\" :{\"<\\\"|r\"  \n:\tnull\t }\t\r  \n} \t '
	const char* json = "\t{\t \"\"\r: \tnull,\r\t\"\\f\\n\\t\\/w>d\"\n: \t-0.0 \r ,\r\n\"\\/\\f(:\\rj\\tp\" :{\"<\\\"|r\"  \n:\tnull\t }\t\r  \n} \t ";
	std::cerr << "Plain JSON string from model: " << "\\t{\\t \\\"\\\"\\r: \\tnull,\\r\\t\\\"\\\\f\\\\n\\\\t\\\\/w>d\\\"\\n: \\t-0.0 \\r ,\\r\\n\\\"\\\\/\\\\f(:\\\\rj\\\\tp\\\" :{\\\"<\\\\\\\"|r\\\"  \\n:\\tnull\\t }\\t\\r  \\n} \\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\f\n\t/w>d' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f\n\t/w>d");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// '/\f(:\rj\tp':'<\"|r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/\f(:\rj\tp");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "<\"|r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c9d61e0934f649160990435235a4ac91) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\t\t\"T\"\r :null\r}\r'
	const char* json = "{\r\t\t\"T\"\r :null\r}\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\t\\\"T\\\"\\r :null\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'T' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "T");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b5ea5bc4107cfcfc09c0af869a40da6d) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\n\t \n\"z\\\"\"\r :[]\n\r\r \t,\t\n  \r \"+\" \n\n\n:null,\n\r\t\r\n\n\"_\\\\3\\\\\\b\"\r\r\r:\r{}}'
	const char* json = "{\t\n\t \n\"z\\\"\"\r :[]\n\r\r \t,\t\n  \r \"+\" \n\n\n:null,\n\r\t\r\n\n\"_\\\\3\\\\\\b\"\r\r\r:\r{}}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\t \\n\\\"z\\\\\\\"\\\"\\r :[]\\n\\r\\r \\t,\\t\\n  \\r \\\"+\\\" \\n\\n\\n:null,\\n\\r\\t\\r\\n\\n\\\"_\\\\\\\\3\\\\\\\\\\\\b\\\"\\r\\r\\r:\\r{}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '+' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "+");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5bb1b8cea36ece4a4525ac5c93b76f8b) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"\"\n:\n\ntrue\n,\t\r \"\\\"~\\\"\":[]\t\t,\r\r\"K\"\t\n:\r\t\r\"2F\"\t\t  \n,\n \n\"\\r\":false \t}'
	const char* json = "{\"\"\n:\n\ntrue\n,\t\r \"\\\"~\\\"\":[]\t\t,\r\r\"K\"\t\n:\r\t\r\"2F\"\t\t  \n,\n \n\"\\r\":false \t}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\n:\\n\\ntrue\\n,\\t\\r \\\"\\\\\\\"~\\\\\\\"\\\":[]\\t\\t,\\r\\r\\\"K\\\"\\t\\n:\\r\\t\\r\\\"2F\\\"\\t\\t  \\n,\\n \\n\\\"\\\\r\\\":false \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'K' = '2F'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "K");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("2F", cJSON_string(child));
	}
	{
		// '\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1229111debd0eaabcb8f28cca4fa2dee) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n{\n\r\r\"\\fGo\\t\"\t: null\n\r\t}'
	const char* json = "\n{\n\r\r\"\\fGo\\t\"\t: null\n\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\n{\\n\\r\\r\\\"\\\\fGo\\\\t\\\"\\t: null\\n\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\fGo\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fGo\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6537e90dc1d781681fae37161503bf57) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\r\n \"\"\n:\"\\t\"\r\n ,\t\t\"T\":  0\t\r,\"LJ\":\"<\\b#\"\n}\t\r'
	const char* json = "{\n\r\n \"\"\n:\"\\t\"\r\n ,\t\t\"T\":  0\t\r,\"LJ\":\"<\\b#\"\n}\t\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\n \\\"\\\"\\n:\\\"\\\\t\\\"\\r\\n ,\\t\\t\\\"T\\\":  0\\t\\r,\\\"LJ\\\":\\\"<\\\\b#\\\"\\n}\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\t'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\t", cJSON_string(child));
	}
	{
		// 'LJ' = '<\b#'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "LJ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("<\b#", cJSON_string(child));
	}
	{
		// 'T' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "T");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_a168f343fc9fbd1bce161ac54a40b541) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' {\r\r\"\\r\"\r:\tfalse\t \t\t}'
	const char* json = " {\r\r\"\\r\"\r:\tfalse\t \t\t}";
	std::cerr << "Plain JSON string from model: " << " {\\r\\r\\\"\\\\r\\\"\\r:\\tfalse\\t \\t\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_dbcb266f62c7d5452478754a48ecbc5f) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \"!\":false \t }'
	const char* json = "{ \"!\":false \t }";
	std::cerr << "Plain JSON string from model: " << "{ \\\"!\\\":false \\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '!' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "!");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9c699b782905c0b2e98bd5088a50addd) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t\n{\t\n\"\\t`\":true \n\r\r}'
	const char* json = "\t\n{\t\n\"\\t`\":true \n\r\r}";
	std::cerr << "Plain JSON string from model: " << "\\t\\n{\\t\\n\\\"\\\\t`\\\":true \\n\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t`' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t`");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b000d430ba0339856e94f0822f0b2726) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' {\r\"\\tP\"\r\t:null\r \n\t\r\t,\"}\"\r\r\t:\t \r\"\\\"m\\b\\n\"\t, \r\"\"   :  null, \n\"7\"\n\t\t:\t\ntrue,\r\r\n\t \t\")\\t\"\t :\t{\t\"=\" : \r false \r\n,\r\"v\\r\\/\\/\\b`\\rDS\":{ \"M\\\\\\b\\\\X1\\n\":true\n \n\r }\n,\n \"(\\\\\\\\\\f8}\":true\r\t\n  \t}\r,\"\\\\\\f?\\/\"\r \n\n:false\r\n } '
	const char* json = " {\r\"\\tP\"\r\t:null\r \n\t\r\t,\"}\"\r\r\t:\t \r\"\\\"m\\b\\n\"\t, \r\"\"   :  null, \n\"7\"\n\t\t:\t\ntrue,\r\r\n\t \t\")\\t\"\t :\t{\t\"=\" : \r false \r\n,\r\"v\\r\\/\\/\\b`\\rDS\":{ \"M\\\\\\b\\\\X1\\n\":true\n \n\r }\n,\n \"(\\\\\\\\\\f8}\":true\r\t\n  \t}\r,\"\\\\\\f?\\/\"\r \n\n:false\r\n } ";
	std::cerr << "Plain JSON string from model: " << " {\\r\\\"\\\\tP\\\"\\r\\t:null\\r \\n\\t\\r\\t,\\\"}\\\"\\r\\r\\t:\\t \\r\\\"\\\\\\\"m\\\\b\\\\n\\\"\\t, \\r\\\"\\\"   :  null, \\n\\\"7\\\"\\n\\t\\t:\\t\\ntrue,\\r\\r\\n\\t \\t\\\")\\\\t\\\"\\t :\\t{\\t\\\"=\\\" : \\r false \\r\\n,\\r\\\"v\\\\r\\\\/\\\\/\\\\b`\\\\rDS\\\":{ \\\"M\\\\\\\\\\\\b\\\\\\\\X1\\\\n\\\":true\\n \\n\\r }\\n,\\n \\\"(\\\\\\\\\\\\\\\\\\\\f8}\\\":true\\r\\t\\n  \\t}\\r,\\\"\\\\\\\\\\\\f?\\\\/\\\"\\r \\n\\n:false\\r\\n } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\tP' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\tP");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\\\f?/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\f?/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// ')\t':'v\r//\b`\rDS':'M\\\b\\X1\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ")\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "v\r//\b`\rDS");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "M\\\b\\X1\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// ')\t':'=' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ")\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// ')\t':'(\\\\\f8}' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ")\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "(\\\\\f8}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '7' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "7");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '}' = '\"m\b\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\"m\b\n", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5b77eaebb76fa7a363a58332d8fad0c4) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \"\\t\\b\":\t\"\\\\p\\f\\t\\/\\/\"\t\r\r}\n\r'
	const char* json = "{ \"\\t\\b\":\t\"\\\\p\\f\\t\\/\\/\"\t\r\r}\n\r";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\t\\\\b\\\":\\t\\\"\\\\\\\\p\\\\f\\\\t\\\\/\\\\/\\\"\\t\\r\\r}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t\b' = '\\p\f\t//'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\p\f\t//", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1c21e6850f7f63cf6f506e59de0ace4d) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\t\t{  \r\"\"\r:true\n \n\n\r\t,\"C\\bf\":null\n\t\r,\r \r\n\"\\by\\\"\\\\2\\b\"\n\r:false\r } \t '
	const char* json = "\t\t\t{  \r\"\"\r:true\n \n\n\r\t,\"C\\bf\":null\n\t\r,\r \r\n\"\\by\\\"\\\\2\\b\"\n\r:false\r } \t ";
	std::cerr << "Plain JSON string from model: " << "\\t\\t\\t{  \\r\\\"\\\"\\r:true\\n \\n\\n\\r\\t,\\\"C\\\\bf\\\":null\\n\\t\\r,\\r \\r\\n\\\"\\\\by\\\\\\\"\\\\\\\\2\\\\b\\\"\\n\\r:false\\r } \\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\by\"\\2\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\by\"\\2\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'C\bf' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C\bf");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_87518339c4e6162ed0660b628c68c85b) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t\t\t{\n\r\t\n\"\\bj\\f\\/\"\t: true\t \n\t\t\n} \r'
	const char* json = "\t\t\t{\n\r\t\n\"\\bj\\f\\/\"\t: true\t \n\t\t\n} \r";
	std::cerr << "Plain JSON string from model: " << "\\t\\t\\t{\\n\\r\\t\\n\\\"\\\\bj\\\\f\\\\/\\\"\\t: true\\t \\n\\t\\t\\n} \\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\bj\f/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bj\f/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_f8f28dcf2eb957404003d92f12f4ab27) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\n\"#\\nZ\":null\t\r\n\r\t\t\n,\t \r\"\"\n \t\n:0.0e+030\r\n,\"Nw\\b\\n\"\t\r\t:\n\t\r\"\\\\\"\r }\n'
	const char* json = "{\r\n\"#\\nZ\":null\t\r\n\r\t\t\n,\t \r\"\"\n \t\n:0.0e+030\r\n,\"Nw\\b\\n\"\t\r\t:\n\t\r\"\\\\\"\r }\n";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\\"#\\\\nZ\\\":null\\t\\r\\n\\r\\t\\t\\n,\\t \\r\\\"\\\"\\n \\t\\n:0.0e+030\\r\\n,\\\"Nw\\\\b\\\\n\\\"\\t\\r\\t:\\n\\t\\r\\\"\\\\\\\\\\\"\\r }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '#\nZ' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "#\nZ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// 'Nw\b\n' = '\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Nw\b\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\\", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d8ed2bc83056b3531b7151783e418d4d) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\n\"\\r\\f\\\\#K\\b\"  \r:[\n\n]\n,\"\"  :\n\"\\n\"\r\t\r\t \t,\"K\":\"!\" \r\r,\n\t\t\n\"\\f\"\t\n\n:\r\n\t-0e+0,\r\n\t\"\\r{\\b\"\n:\"\\r\\f\"\t\t \t}\r'
	const char* json = "{\t\n\"\\r\\f\\\\#K\\b\"  \r:[\n\n]\n,\"\"  :\n\"\\n\"\r\t\r\t \t,\"K\":\"!\" \r\r,\n\t\t\n\"\\f\"\t\n\n:\r\n\t-0e+0,\r\n\t\"\\r{\\b\"\n:\"\\r\\f\"\t\t \t}\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\n\\\"\\\\r\\\\f\\\\\\\\#K\\\\b\\\"  \\r:[\\n\\n]\\n,\\\"\\\"  :\\n\\\"\\\\n\\\"\\r\\t\\r\\t \\t,\\\"K\\\":\\\"!\\\" \\r\\r,\\n\\t\\t\\n\\\"\\\\f\\\"\\t\\n\\n:\\r\\n\\t-0e+0,\\r\\n\\t\\\"\\\\r{\\\\b\\\"\\n:\\\"\\\\r\\\\f\\\"\\t\\t \\t}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\n", cJSON_string(child));
	}
	{
		// 'K' = '!'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "K");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("!", cJSON_string(child));
	}
	{
		// '\f' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// '\r{\b' = '\r\f'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r{\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r\f", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c8b938f7874064d750c46938e88e2640) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\"\\\\\\n[U$\\n\"\r\r:\t[ { \n\n \n\"\"\n\r\t:null\r\r}\t]\n\r\t,\t\r\t \"\\b\\n\":\r \t7E-0\n}'
	const char* json = "{\t\"\\\\\\n[U$\\n\"\r\r:\t[ { \n\n \n\"\"\n\r\t:null\r\r}\t]\n\r\t,\t\r\t \"\\b\\n\":\r \t7E-0\n}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\\\\\\\\\\n[U$\\\\n\\\"\\r\\r:\\t[ { \\n\\n \\n\\\"\\\"\\n\\r\\t:null\\r\\r}\\t]\\n\\r\\t,\\t\\r\\t \\\"\\\\b\\\\n\\\":\\r \\t7E-0\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\n' = '7.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(7.0, cJSON_double(child));
	}
	{
		// '\\\n[U$\n':0:'' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\n[U$\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_68d7ba2831d7473ae85506028b65b778) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonFalse
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \n\n\"\\t\"\t\n\r:\ttrue\n  ,\r\n\n\n\t\"\" :[false] }\t'
	const char* json = "{ \n\n\"\\t\"\t\n\r:\ttrue\n  ,\r\n\n\n\t\"\" :[false] }\t";
	std::cerr << "Plain JSON string from model: " << "{ \\n\\n\\\"\\\\t\\\"\\t\\n\\r:\\ttrue\\n  ,\\r\\n\\n\\n\\t\\\"\\\" :[false] }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':0 = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d3742c691f62d8c09f1dcd6506db943f) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\n \t\"\\/\" \r\n:\"\" ,\t \r  \t\"\\r\"\t\n:\tfalse\t\r\t }'
	const char* json = "{\n \t\"\\/\" \r\n:\"\" ,\t \r  \t\"\\r\"\t\n:\tfalse\t\r\t }";
	std::cerr << "Plain JSON string from model: " << "{\\n \\t\\\"\\\\/\\\" \\r\\n:\\\"\\\" ,\\t \\r  \\t\\\"\\\\r\\\"\\t\\n:\\tfalse\\t\\r\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\r' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d7ecff36d677906942dae5f5f4afe75e) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// CloseElements
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\n  \t\"\"\n:\n[\n[ \r true\r\n, { \"+\\r\"\r\n\n:\n\">\"\n\n, \"\\n\"\r:null,\n \t\t\r \"\\n+i\\\"#}\\tI\"\r\t\t:\r\r\"\\r~\\r\"\r} \n\t]\t, \t\rtrue\t\n\t]} '
	const char* json = "{\r\n  \t\"\"\n:\n[\n[ \r true\r\n, { \"+\\r\"\r\n\n:\n\">\"\n\n, \"\\n\"\r:null,\n \t\t\r \"\\n+i\\\"#}\\tI\"\r\t\t:\r\r\"\\r~\\r\"\r} \n\t]\t, \t\rtrue\t\n\t]} ";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n  \\t\\\"\\\"\\n:\\n[\\n[ \\r true\\r\\n, { \\\"+\\\\r\\\"\\r\\n\\n:\\n\\\">\\\"\\n\\n, \\\"\\\\n\\\"\\r:null,\\n \\t\\t\\r \\\"\\\\n+i\\\\\\\"#}\\\\tI\\\"\\r\\t\\t:\\r\\r\\\"\\\\r~\\\\r\\\"\\r} \\n\\t]\\t, \\t\\rtrue\\t\\n\\t]} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0:0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '':0:1:'\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':0:1:'\n+i\"#}\tI' = '\r~\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n+i\"#}\tI");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r~\r", cJSON_string(child));
	}
	{
		// '':0:1:'+\r' = '>'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "+\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(">", cJSON_string(child));
	}
	{
		// '':1 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_99e9ec8bb30cee0dfb037b82a4d9bb2c) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\r  \"\\\"\": [\r0.04e04 ,\n null ]  }'
	const char* json = "\r{\r  \"\\\"\": [\r0.04e04 ,\n null ]  }";
	std::cerr << "Plain JSON string from model: " << "\\r{\\r  \\\"\\\\\\\"\\\": [\\r0.04e04 ,\\n null ]  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"':0 = '400.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(400.0, cJSON_double(child));
	}
	{
		// '\"':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7ca849b0c5ae9e0e055dc4f583e5249d) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r\t\r{ \"\\\"\": \"f3\\r\\\\\"\n \n }'
	const char* json = "\r\t\r{ \"\\\"\": \"f3\\r\\\\\"\n \n }";
	std::cerr << "Plain JSON string from model: " << "\\r\\t\\r{ \\\"\\\\\\\"\\\": \\\"f3\\\\r\\\\\\\\\\\"\\n \\n }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"' = 'f3\r\\'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("f3\r\\", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5196aa4a2b7bb01ec7a880042517f0de) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n  \"Q4\"\t    :\n\t\rfalse\t}'
	const char* json = "{\n  \"Q4\"\t    :\n\t\rfalse\t}";
	std::cerr << "Plain JSON string from model: " << "{\\n  \\\"Q4\\\"\\t    :\\n\\t\\rfalse\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Q4' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Q4");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_442338b3fda4594ed7a0e66ce16ae850) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\r{\"\\n~[\"\t\r\t\t \n:  true\t\n\n,\"\" :false ,\t\"%,\\f\\b%\\tz\":\n  \tfalse\n\t\t\n\r\t}'
	const char* json = "\r{\"\\n~[\"\t\r\t\t \n:  true\t\n\n,\"\" :false ,\t\"%,\\f\\b%\\tz\":\n  \tfalse\n\t\t\n\r\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\\"\\\\n~[\\\"\\t\\r\\t\\t \\n:  true\\t\\n\\n,\\\"\\\" :false ,\\t\\\"%,\\\\f\\\\b%\\\\tz\\\":\\n  \\tfalse\\n\\t\\t\\n\\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n~[' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n~[");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '%,\f\b%\tz' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "%,\f\b%\tz");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c4096f4f2f439561a108521f1e3ee8f9) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\t\"\":\n\nfalse}\r'
	const char* json = "{\n\t\"\":\n\nfalse}\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\t\\\"\\\":\\n\\nfalse}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6d8d1318f148c8bd26a465de23507b12) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\t{\n \"aI\\b\\fs\"\t\r\t:{\r\n\"05\\t[\"\t  \r:\n  {}\t \n\t,\r\n\"\\n\\\"\\n7~\"\n\r \r:\rfalse } }\n\t\t'
	const char* json = "\r\t{\n \"aI\\b\\fs\"\t\r\t:{\r\n\"05\\t[\"\t  \r:\n  {}\t \n\t,\r\n\"\\n\\\"\\n7~\"\n\r \r:\rfalse } }\n\t\t";
	std::cerr << "Plain JSON string from model: " << "\\r\\t{\\n \\\"aI\\\\b\\\\fs\\\"\\t\\r\\t:{\\r\\n\\\"05\\\\t[\\\"\\t  \\r:\\n  {}\\t \\n\\t,\\r\\n\\\"\\\\n\\\\\\\"\\\\n7~\\\"\\n\\r \\r:\\rfalse } }\\n\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'aI\b\fs':'\n\"\n7~' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "aI\b\fs");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\"\n7~");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_04c1167304396d347a3c253f2ca14e0d) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{ \t\r\n\r\"\":false\t\r}'
	const char* json = "\t{ \t\r\n\r\"\":false\t\r}";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\t\\r\\n\\r\\\"\\\":false\\t\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_baa9073ac0cf1c4b9b1300e5423bf48d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\"\"\t:null\n\r}'
	const char* json = " {\"\"\t:null\n\r}";
	std::cerr << "Plain JSON string from model: " << " {\\\"\\\"\\t:null\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_517f5ca9140ad6401daf7c4abce65f4c) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\t\n\r\t\r\"M\\\\\\\"d\\fD\\r\"\t:\n {\"n]`\\bJ\"\t\t :\n\t\t[]}}'
	const char* json = "{\r\t\n\r\t\r\"M\\\\\\\"d\\fD\\r\"\t:\n {\"n]`\\bJ\"\t\t :\n\t\t[]}}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t\\n\\r\\t\\r\\\"M\\\\\\\\\\\\\\\"d\\\\fD\\\\r\\\"\\t:\\n {\\\"n]`\\\\bJ\\\"\\t\\t :\\n\\t\\t[]}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_075d19243585cda6a0e4c84fb1c6b7e0) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\t\t\r\"\"\n\r: \nfalse\t\r,\r\r\"\\r\" \n\n:\rnull \t\n\n}\r\r'
	const char* json = "{\t\t\r\"\"\n\r: \nfalse\t\r,\r\r\"\\r\" \n\n:\rnull \t\n\n}\r\r";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\r\\\"\\\"\\n\\r: \\nfalse\\t\\r,\\r\\r\\\"\\\\r\\\" \\n\\n:\\rnull \\t\\n\\n}\\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\r' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_66c243c4158297c39de0ab32c3793616) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\"}Y\"\n:true\n \t,  \t\n\n\"\" \n\t:\t-38.0\n,\t\"pX\\\"\\f\\n\\n\"\n:\rtrue\n\n,\n\t\n\t\r\n\"G\"\n \t: 0}'
	const char* json = "{\t\"}Y\"\n:true\n \t,  \t\n\n\"\" \n\t:\t-38.0\n,\t\"pX\\\"\\f\\n\\n\"\n:\rtrue\n\n,\n\t\n\t\r\n\"G\"\n \t: 0}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"}Y\\\"\\n:true\\n \\t,  \\t\\n\\n\\\"\\\" \\n\\t:\\t-38.0\\n,\\t\\\"pX\\\\\\\"\\\\f\\\\n\\\\n\\\"\\n:\\rtrue\\n\\n,\\n\\t\\n\\t\\r\\n\\\"G\\\"\\n \\t: 0}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-38.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-38.0, cJSON_double(child));
	}
	{
		// 'pX\"\f\n\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "pX\"\f\n\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '}Y' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}Y");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'G' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "G");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_849a72782997f50c0c8188de75510e1c) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\"}\\r\":{\n \"\":\t\"K\"\r\n\t ,\"\\f\"\n\t :[ \t0\r\n\r]\n\n\t\r,\r\n \r\n\"\\n\"\n:\":\\n<\"\n\r  , \"\\\"\"\r: null\r\r\r\r}\n}'
	const char* json = "{\"}\\r\":{\n \"\":\t\"K\"\r\n\t ,\"\\f\"\n\t :[ \t0\r\n\r]\n\n\t\r,\r\n \r\n\"\\n\"\n:\":\\n<\"\n\r  , \"\\\"\"\r: null\r\r\r\r}\n}";
	std::cerr << "Plain JSON string from model: " << "{\\\"}\\\\r\\\":{\\n \\\"\\\":\\t\\\"K\\\"\\r\\n\\t ,\\\"\\\\f\\\"\\n\\t :[ \\t0\\r\\n\\r]\\n\\n\\t\\r,\\r\\n \\r\\n\\\"\\\\n\\\"\\n:\\\":\\\\n<\\\"\\n\\r  , \\\"\\\\\\\"\\\"\\r: null\\r\\r\\r\\r}\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '}\r':'' = 'K'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("K", cJSON_string(child));
	}
	{
		// '}\r':'\"' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '}\r':'\n' = ':\n<'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(":\n<", cJSON_string(child));
	}
	{
		// '}\r':'\f':0 = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "}\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ff3d98384df4e505287e6cb1cf0deccd) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\r \r\n\"\":\n\n\t\rnull \n\t,\n\"K#AZ\"\r  \r:-0.0E-0}'
	const char* json = "{\t\r \r\n\"\":\n\n\t\rnull \n\t,\n\"K#AZ\"\r  \r:-0.0E-0}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r \\r\\n\\\"\\\":\\n\\n\\t\\rnull \\n\\t,\\n\\\"K#AZ\\\"\\r  \\r:-0.0E-0}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'K#AZ' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "K#AZ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_74927b0449ac5d60b3ba6fa1d045cf0c) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n \t\" &\\bV\\/\\t\":null\n}'
	const char* json = "{\n \t\" &\\bV\\/\\t\":null\n}";
	std::cerr << "Plain JSON string from model: " << "{\\n \\t\\\" &\\\\bV\\\\/\\\\t\\\":null\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// ' &\bV/\t' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, " &\bV/\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8f608b08f028405dae82aa2859482eb2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ElementSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Whitespace
	// OpenObject
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// CloseElements
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: ' \n\n{\t \"<\\/\"\n\t: [ null\t,[\n{\n  \n\"\": \n\r {\t\r\n\"\\bY\\n\" :\rtrue\t\r\r} \t\t,\"\\/g\"\r:\n\r\"\\rbBQ\\r3_@1\"\n,\t \n \"hyC\": false\n\n\r}]\n\r\r\r]\r}'
	const char* json = " \n\n{\t \"<\\/\"\n\t: [ null\t,[\n{\n  \n\"\": \n\r {\t\r\n\"\\bY\\n\" :\rtrue\t\r\r} \t\t,\"\\/g\"\r:\n\r\"\\rbBQ\\r3_@1\"\n,\t \n \"hyC\": false\n\n\r}]\n\r\r\r]\r}";
	std::cerr << "Plain JSON string from model: " << " \\n\\n{\\t \\\"<\\\\/\\\"\\n\\t: [ null\\t,[\\n{\\n  \\n\\\"\\\": \\n\\r {\\t\\r\\n\\\"\\\\bY\\\\n\\\" :\\rtrue\\t\\r\\r} \\t\\t,\\\"\\\\/g\\\"\\r:\\n\\r\\\"\\\\rbBQ\\\\r3_@1\\\"\\n,\\t \\n \\\"hyC\\\": false\\n\\n\\r}]\\n\\r\\r\\r]\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '</':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "</");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '</':1:0:'':'\bY\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "</");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bY\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '</':1:0:'/g' = '\rbBQ\r3_@1'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "</");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/g");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\rbBQ\r3_@1", cJSON_string(child));
	}
	{
		// '</':1:0:'hyC' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "</");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "hyC");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e17cf78fae0ae203dd379118e45d3bfa) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{ \t\n\r\r\"\":false\t\n\r}'
	const char* json = "{ \t\n\r\r\"\":false\t\n\r}";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\n\\r\\r\\\"\\\":false\\t\\n\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_862f5d50309acd8da26917c84fe3528e) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenElements
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// Zero
	// Digit
	// Digit
	// Digit
	// Digit
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\"\"\n\t:false\r, \n\"P\"\n\t\n:\n{ \r\"O\":\n-0.017\r} ,\t\r \"\\nd\\\\QwD\"\r:\",\\b~X\\n\\b1\\\\Y\"\n\t\t\n, \n\r\t\"B\": 0.0e+090\r , \t\t\t \"~q*\\nD\"\n\t:\t\r[\n\t\r0E-063011980\t\t]\n\t\t,\n \t\n\"\\t0\"\t\t :\n\rnull}'
	const char* json = "{\t\"\"\n\t:false\r, \n\"P\"\n\t\n:\n{ \r\"O\":\n-0.017\r} ,\t\r \"\\nd\\\\QwD\"\r:\",\\b~X\\n\\b1\\\\Y\"\n\t\t\n, \n\r\t\"B\": 0.0e+090\r , \t\t\t \"~q*\\nD\"\n\t:\t\r[\n\t\r0E-063011980\t\t]\n\t\t,\n \t\n\"\\t0\"\t\t :\n\rnull}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\\"\\\"\\n\\t:false\\r, \\n\\\"P\\\"\\n\\t\\n:\\n{ \\r\\\"O\\\":\\n-0.017\\r} ,\\t\\r \\\"\\\\nd\\\\\\\\QwD\\\"\\r:\\\",\\\\b~X\\\\n\\\\b1\\\\\\\\Y\\\"\\n\\t\\t\\n, \\n\\r\\t\\\"B\\\": 0.0e+090\\r , \\t\\t\\t \\\"~q*\\\\nD\\\"\\n\\t:\\t\\r[\\n\\t\\r0E-063011980\\t\\t]\\n\\t\\t,\\n \\t\\n\\\"\\\\t0\\\"\\t\\t :\\n\\rnull}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '~q*\nD':0 = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "~q*\nD");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// 'B' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "B");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '\nd\\QwD' = ',\b~X\n\b1\\Y'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\nd\\QwD");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ(",\b~X\n\b1\\Y", cJSON_string(child));
	}
	{
		// '\t0' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t0");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'P':'O' = '-0.017'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "P");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "O");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.017, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bf4e68b00eae504e33d7e997c95fbadc) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\t\"x\\\\\\r\\n5;\\/\\t\\t\\n']\\f\\t\\rb\\ry'\\/(\"\t :{\n \n\n\t\"\" \r:\ttrue\n, \t\n\n\"K\"\t\n\n:\r-10.0e0\t\n}\r \n\t}'
	const char* json = "{\t\t\"x\\\\\\r\\n5;\\/\\t\\t\\n']\\f\\t\\rb\\ry'\\/(\"\t :{\n \n\n\t\"\" \r:\ttrue\n, \t\n\n\"K\"\t\n\n:\r-10.0e0\t\n}\r \n\t}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\t\\\"x\\\\\\\\\\\\r\\\\n5;\\\\/\\\\t\\\\t\\\\n']\\\\f\\\\t\\\\rb\\\\ry'\\\\/(\\\"\\t :{\\n \\n\\n\\t\\\"\\\" \\r:\\ttrue\\n, \\t\\n\\n\\\"K\\\"\\t\\n\\n:\\r-10.0e0\\t\\n}\\r \\n\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'x\\\r\n5;/\t\t\n']\f\t\rb\ry'/(':'' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "x\\\r\n5;/\t\t\n']\f\t\rb\ry'/(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'x\\\r\n5;/\t\t\n']\f\t\rb\ry'/(':'K' = '-10.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "x\\\r\n5;/\t\t\n']\f\t\rb\ry'/(");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "K");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-10.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_21474d029d2901de6abd683df7896336) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\r\r\r\n\"\\t\" \r\t: \n[\r\n\t{\r\"\\r\":[]\r\r\t  } \n]\t, \"|\":false\r \t\r}\n'
	const char* json = "\t{\r\r\r\n\"\\t\" \r\t: \n[\r\n\t{\r\"\\r\":[]\r\r\t  } \n]\t, \"|\":false\r \t\r}\n";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\r\\r\\n\\\"\\\\t\\\" \\r\\t: \\n[\\r\\n\\t{\\r\\\"\\\\r\\\":[]\\r\\r\\t  } \\n]\\t, \\\"|\\\":false\\r \\t\\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '|' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "|");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_67ebd8504843448d1f3fae6c30d9e584) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\r\n\t\t\t\"\\f\"\n\t\n:0}\t\t'
	const char* json = "{\r\n\t\t\t\"\\f\"\n\t\n:0}\t\t";
	std::cerr << "Plain JSON string from model: " << "{\\r\\n\\t\\t\\t\\\"\\\\f\\\"\\n\\t\\n:0}\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\f' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_28a4ec8e2ed7727eaff4ca2b1804deec) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\"\"\t:\n{\r\"\\tH\":\t\ttrue\r\r\t\t\t} \r\t}\t\t\t'
	const char* json = "{\"\"\t:\n{\r\"\\tH\":\t\ttrue\r\r\t\t\t} \r\t}\t\t\t";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\"\\t:\\n{\\r\\\"\\\\tH\\\":\\t\\ttrue\\r\\r\\t\\t\\t} \\r\\t}\\t\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'\tH' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\tH");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_23f966450618afb3a9d679e82edc0963) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '  { \r\r\"\\\\\"\n:\r []\n \t} \r '
	const char* json = "  { \r\r\"\\\\\"\n:\r []\n \t} \r ";
	std::cerr << "Plain JSON string from model: " << "  { \\r\\r\\\"\\\\\\\\\\\"\\n:\\r []\\n \\t} \\r " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_52b434eec3ba914c13c4848c8f404fcd) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '  \t{\t\"\\n\":null\n \t}'
	const char* json = "  \t{\t\"\\n\":null\n \t}";
	std::cerr << "Plain JSON string from model: " << "  \\t{\\t\\\"\\\\n\\\":null\\n \\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_bf31443099f478604e241ad2d6799f25) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{\n\r \"\\bUI\\\"w?\"  :\n{\t\t} \n,\t\t \"\\b\\bPl\":\r\r[\"\"\t\t]\n} '
	const char* json = "\r{\n\r \"\\bUI\\\"w?\"  :\n{\t\t} \n,\t\t \"\\b\\bPl\":\r\r[\"\"\t\t]\n} ";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\r \\\"\\\\bUI\\\\\\\"w?\\\"  :\\n{\\t\\t} \\n,\\t\\t \\\"\\\\b\\\\bPl\\\":\\r\\r[\\\"\\\"\\t\\t]\\n} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\b\bPl':0 = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\bPl");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_adabeff37cdc9e80dec8ebdd52d7b3f7) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\n{\t\t\t\"\\n\"\t:true\t}\n '
	const char* json = "\r\n{\t\t\t\"\\n\"\t:true\t}\n ";
	std::cerr << "Plain JSON string from model: " << "\\r\\n{\\t\\t\\t\\\"\\\\n\\\"\\t:true\\t}\\n " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_84f46f60df06abc12f3842fc9e392d2b) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{\n\r\n \t\"\\t\"\r:{\r\r\n\"\\\\\\bLs\\f+S\":null\r \n} \r }\t '
	const char* json = "{\n\r\n \t\"\\t\"\r:{\r\r\n\"\\\\\\bLs\\f+S\":null\r \n} \r }\t ";
	std::cerr << "Plain JSON string from model: " << "{\\n\\r\\n \\t\\\"\\\\t\\\"\\r:{\\r\\r\\n\\\"\\\\\\\\\\\\bLs\\\\f+S\\\":null\\r \\n} \\r }\\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t':'\\\bLs\f+S' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\bLs\f+S");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_fbed9859ec8eb5f2230d8c7e1233ae17) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{ \r\t \"Z\":\r-0.0E03\r,\n\t \";\\\\Lx[*,M\"\r\n:\n\"|FQ\\t#V\" \n}  \n'
	const char* json = "{ \r\t \"Z\":\r-0.0E03\r,\n\t \";\\\\Lx[*,M\"\r\n:\n\"|FQ\\t#V\" \n}  \n";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\t \\\"Z\\\":\\r-0.0E03\\r,\\n\\t \\\";\\\\\\\\Lx[*,M\\\"\\r\\n:\\n\\\"|FQ\\\\t#V\\\" \\n}  \\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'Z' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "Z");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	{
		// ';\\Lx[*,M' = '|FQ\t#V'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ";\\Lx[*,M");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("|FQ\t#V", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_5b59a39b65e5fcb5cd9090e94996eb59) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Digit
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \r\t\n\t\"\\n\\r\\/\\t\\\"\\t\" : -540.0870 }\r'
	const char* json = "{ \r\t\n\t\"\\n\\r\\/\\t\\\"\\t\" : -540.0870 }\r";
	std::cerr << "Plain JSON string from model: " << "{ \\r\\t\\n\\t\\\"\\\\n\\\\r\\\\/\\\\t\\\\\\\"\\\\t\\\" : -540.0870 }\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\n\r/\t\"\t' = '-540.087'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n\r/\t\"\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-540.087, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_cecb804a86378b91e1e7046e4466e04f) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t\n\n{\r\n\t\t\"A\\b5\":93.0801\n\t,\t \r\"\\\"\\n\\r\\b\"\t:\rfalse\t} '
	const char* json = "\t\n\n{\r\n\t\t\"A\\b5\":93.0801\n\t,\t \r\"\\\"\\n\\r\\b\"\t:\rfalse\t} ";
	std::cerr << "Plain JSON string from model: " << "\\t\\n\\n{\\r\\n\\t\\t\\\"A\\\\b5\\\":93.0801\\n\\t,\\t \\r\\\"\\\\\\\"\\\\n\\\\r\\\\b\\\"\\t:\\rfalse\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\"\n\r\b' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"\n\r\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'A\b5' = '93.0801'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "A\b5");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(93.0801, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_acc96e448f6d139d3ad8ab27819c91e0) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\r\t \"\":\r\r\"je\\f#\"\t\r}\r'
	const char* json = "{\r\t \"\":\r\r\"je\\f#\"\t\r}\r";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t \\\"\\\":\\r\\r\\\"je\\\\f#\\\"\\t\\r}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'je\f#'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("je\f#", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_840474a0c75ff179dbee5c50a12cab72) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \t\"\\\"^\"\t\n\t:0\t,\t\n\"\":false\n}'
	const char* json = "{ \t\"\\\"^\"\t\n\t:0\t,\t\n\"\":false\n}";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"\\\\\\\"^\\\"\\t\\n\\t:0\\t,\\t\\n\\\"\\\":false\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\"^' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"^");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ae245005a8134d841638db5997472e75) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Control
	// Character
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\n\n{\r\"\"\n\r\t:null\n ,\n\"T\"\r\r\r:\tnull,\"\\b\"\r \t:-0\r\n\t\n \t,\r  \r\r \r\r\"\\\"S\"\t:\t  \n\"\\r\"\t  ,\n \t\"\\t\\t\\/\\/[\\\\\\r\\b3\"\t\r\n \r\t:\n\tnull \t} '
	const char* json = "\r\n\n{\r\"\"\n\r\t:null\n ,\n\"T\"\r\r\r:\tnull,\"\\b\"\r \t:-0\r\n\t\n \t,\r  \r\r \r\r\"\\\"S\"\t:\t  \n\"\\r\"\t  ,\n \t\"\\t\\t\\/\\/[\\\\\\r\\b3\"\t\r\n \r\t:\n\tnull \t} ";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\n{\\r\\\"\\\"\\n\\r\\t:null\\n ,\\n\\\"T\\\"\\r\\r\\r:\\tnull,\\\"\\\\b\\\"\\r \\t:-0\\r\\n\\t\\n \\t,\\r  \\r\\r \\r\\r\\\"\\\\\\\"S\\\"\\t:\\t  \\n\\\"\\\\r\\\"\\t  ,\\n \\t\\\"\\\\t\\\\t\\\\/\\\\/[\\\\\\\\\\\\r\\\\b3\\\"\\t\\r\\n \\r\\t:\\n\\tnull \\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\b' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\t\t//[\\\r\b3' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t\t//[\\\r\b3");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// 'T' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "T");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\"S' = '\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\"S");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_21082f806979de48ffea64b2359a1de8) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{\r\t\"\\fT\\\"3\\b^\\fM\":\nfalse \t\n}'
	const char* json = "\t{\r\t\"\\fT\\\"3\\b^\\fM\":\nfalse \t\n}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\t\\\"\\\\fT\\\\\\\"3\\\\b^\\\\fM\\\":\\nfalse \\t\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\fT\"3\b^\fM' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fT\"3\b^\fM");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_53138185bb9ed6484fffee32573486b6) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\n\"\\r\\bZ\\\\\\\"6\\fs\\\\\":\n\n-0 ,\n\"\" \t\r\t: \t\n0,\t \n\"^rS)\\\"8*'.\"\t\r:\t[] \r\t}'
	const char* json = "\r{\n\"\\r\\bZ\\\\\\\"6\\fs\\\\\":\n\n-0 ,\n\"\" \t\r\t: \t\n0,\t \n\"^rS)\\\"8*'.\"\t\r:\t[] \r\t}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\n\\\"\\\\r\\\\bZ\\\\\\\\\\\\\\\"6\\\\fs\\\\\\\\\\\":\\n\\n-0 ,\\n\\\"\\\" \\t\\r\\t: \\t\\n0,\\t \\n\\\"^rS)\\\\\\\"8*'.\\\"\\t\\r:\\t[] \\r\\t}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '\r\bZ\\\"6\fs\\' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\r\bZ\\\"6\fs\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_24a1339152804a5284c982c7d43918d3) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\"\\t\": \r0e-0 \r\r}'
	const char* json = "{\"\\t\": \r0e-0 \r\r}";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\t\\\": \\r0e-0 \\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\t' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\t");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c0c98608811b18dd1900555e01dedf30) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{   \"\":false \t\r}\t \t'
	const char* json = "{   \"\":false \t\r}\t \t";
	std::cerr << "Plain JSON string from model: " << "{   \\\"\\\":false \\t\\r}\\t \\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_72f64d2f032661a77fb9122f84c6a45e) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\t{ \t \"\"\t \r:  true,\n\n\"\\n\"\r \r:\n\t\"lO\\\"\" \r}'
	const char* json = "\t{ \t \"\"\t \r:  true,\n\n\"\\n\"\r \r:\n\t\"lO\\\"\" \r}";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\t \\\"\\\"\\t \\r:  true,\\n\\n\\\"\\\\n\\\"\\r \\r:\\n\\t\\\"lO\\\\\\\"\\\" \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\n' = 'lO\"'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("lO\"", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_623d651fdca419c1dbd138c3e959953d) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\t{ \r\"\\bi\\\\\":null\n}\n\r'
	const char* json = "\t{ \r\"\\bi\\\\\":null\n}\n\r";
	std::cerr << "Plain JSON string from model: " << "\\t{ \\r\\\"\\\\bi\\\\\\\\\\\":null\\n}\\n\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\bi\\' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\bi\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c7b3fc14073742bf271a7d49f376e647) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\r\t\t\t\"\\\\^\\nP\\/\":false}\t\t'
	const char* json = " {\r\t\t\t\"\\\\^\\nP\\/\":false}\t\t";
	std::cerr << "Plain JSON string from model: " << " {\\r\\t\\t\\t\\\"\\\\\\\\^\\\\nP\\\\/\\\":false}\\t\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\^\nP/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\^\nP/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_44aef3d5471f4df67eb0efcef1f250b4) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\t \r\"\"\n \r:-20\t\t }'
	const char* json = "{\r\t \r\"\"\n \r:-20\t\t }";
	std::cerr << "Plain JSON string from model: " << "{\\r\\t \\r\\\"\\\"\\n \\r:-20\\t\\t }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-20'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-20, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_be84f37185a37e35871b9f8a2dd3a6a8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// Character
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\t{\n \r \r\"^p\\b89\\\"m\\b\":\t\nnull\r\t,\"|\":null,\t\"\\n\":-0\n\t }\t'
	const char* json = "\t{\n \r \r\"^p\\b89\\\"m\\b\":\t\nnull\r\t,\"|\":null,\t\"\\n\":-0\n\t }\t";
	std::cerr << "Plain JSON string from model: " << "\\t{\\n \\r \\r\\\"^p\\\\b89\\\\\\\"m\\\\b\\\":\\t\\nnull\\r\\t,\\\"|\\\":null,\\t\\\"\\\\n\\\":-0\\n\\t }\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '^p\b89\"m\b' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "^p\b89\"m\b");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\n' = '0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0, cJSON_double(child));
	}
	{
		// '|' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "|");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_7e95fe0fae0d09a15f9a9156ee3929d8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Digit
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{ \n\r\"O\"\n \r\t:\n{\n\r\"\\/\"\r\n \n:0.01\r\n\r}\n\r\r\r,\r\t \"\"\t:\n-550E0 \n}'
	const char* json = "\r{ \n\r\"O\"\n \r\t:\n{\n\r\"\\/\"\r\n \n:0.01\r\n\r}\n\r\r\r,\r\t \"\"\t:\n-550E0 \n}";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\n\\r\\\"O\\\"\\n \\r\\t:\\n{\\n\\r\\\"\\\\/\\\"\\r\\n \\n:0.01\\r\\n\\r}\\n\\r\\r\\r,\\r\\t \\\"\\\"\\t:\\n-550E0 \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-550.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-550.0, cJSON_double(child));
	}
	{
		// 'O':'/' = '0.01'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "O");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.01, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_9edc3f85da198d67d1d90b39604b3591) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{\r\"\"\t \t:\n\n\r[]}'
	const char* json = "\t{\r\"\"\t \t:\n\n\r[]}";
	std::cerr << "Plain JSON string from model: " << "\\t{\\r\\\"\\\"\\t \\t:\\n\\n\\r[]}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_8f1fc456a4e999804540c86f4ca009d3) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Control
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\n\":\\b,\\r9\\frh\" :\t  false\t\r\n, \t\"\\/\"\t:true\n\r,\"\"\t:\nfalse,\n \"@\\f:{\"\n \r:\r\t\rfalse\r\t\r\t\n\n}\r'
	const char* json = "{\n\":\\b,\\r9\\frh\" :\t  false\t\r\n, \t\"\\/\"\t:true\n\r,\"\"\t:\nfalse,\n \"@\\f:{\"\n \r:\r\t\rfalse\r\t\r\t\n\n}\r";
	std::cerr << "Plain JSON string from model: " << "{\\n\\\":\\\\b,\\\\r9\\\\frh\\\" :\\t  false\\t\\r\\n, \\t\\\"\\\\/\\\"\\t:true\\n\\r,\\\"\\\"\\t:\\nfalse,\\n \\\"@\\\\f:{\\\"\\n \\r:\\r\\t\\rfalse\\r\\t\\r\\t\\n\\n}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '/' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// ':\b,\r9\frh' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, ":\b,\r9\frh");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '@\f:{' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "@\f:{");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_635b32b959f0a8f1647cfeed80b5d3cc) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// Character
	// Character
	// Character
	// Control
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonFalse
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n{\"\\\\\\\\\\b^.o>\\\"\\/\"   \r:\r\n \tfalse\t\t }\n'
	const char* json = "\n{\"\\\\\\\\\\b^.o>\\\"\\/\"   \r:\r\n \tfalse\t\t }\n";
	std::cerr << "Plain JSON string from model: " << "\\n{\\\"\\\\\\\\\\\\\\\\\\\\b^.o>\\\\\\\"\\\\/\\\"   \\r:\\r\\n \\tfalse\\t\\t }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\\\\b^.o>\"/' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\\\\b^.o>\"/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_311152b7aa5c7b6bf2c50d9c254f8e06) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// Control
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\n\n\"\\\\k\\/}\" :\rtrue\n\n\t\t\n,  \"\"\t:\n\"\\nzb\\n\\f\\n\\bq\"}'
	const char* json = "{\n\n\"\\\\k\\/}\" :\rtrue\n\n\t\t\n,  \"\"\t:\n\"\\nzb\\n\\f\\n\\bq\"}";
	std::cerr << "Plain JSON string from model: " << "{\\n\\n\\\"\\\\\\\\k\\\\/}\\\" :\\rtrue\\n\\n\\t\\t\\n,  \\\"\\\"\\t:\\n\\\"\\\\nzb\\\\n\\\\f\\\\n\\\\bq\\\"}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\nzb\n\f\n\bq'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\nzb\n\f\n\bq", cJSON_string(child));
	}
	{
		// '\\k/}' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\k/}");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e20663b26792a3973a5a70f602eb92a2) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\t {\r \t\t\"\":\"\\r\"\t  \r}\n'
	const char* json = "\r\t {\r \t\t\"\":\"\\r\"\t  \r}\n";
	std::cerr << "Plain JSON string from model: " << "\\r\\t {\\r \\t\\t\\\"\\\":\\\"\\\\r\\\"\\t  \\r}\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '\r'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\r", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_8ba3ad14b359d328b0e6f1ddd7fe731c) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// CloseValue
	// ElementSeparator
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\"\\/\" :\n\n\"\\fc\"\t \n\t\n,\r\t \"\":[null,null  \r]\r\t\t\n\t} '
	const char* json = "{\"\\/\" :\n\n\"\\fc\"\t \n\t\n,\r\t \"\":[null,null  \r]\r\t\t\n\t} ";
	std::cerr << "Plain JSON string from model: " << "{\\\"\\\\/\\\" :\\n\\n\\\"\\\\fc\\\"\\t \\n\\t\\n,\\r\\t \\\"\\\":[null,null  \\r]\\r\\t\\t\\n\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '/' = '\fc'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\fc", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6066abe24acee2420fdc53413976b072) {
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Whitespace
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{\t\r\r\"\"\r \n:\r\n\rtrue\r, \r\n\"\\rP\\n\"\r: \r0e-017\n  \t} '
	const char* json = "{\t\r\r\"\"\r \n:\r\n\rtrue\r, \r\n\"\\rP\\n\"\r: \r0e-017\n  \t} ";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\r\\\"\\\"\\r \\n:\\r\\n\\rtrue\\r, \\r\\n\\\"\\\\rP\\\\n\\\"\\r: \\r0e-017\\n  \\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\rP\n' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\rP\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_6d674a04ce4010875adafded3f019049) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t{\t\"\":\r{\n}\t\t,\n\n\r\"\\\"\":\n[]}'
	const char* json = " \t{\t\"\":\r{\n}\t\t,\n\n\r\"\\\"\":\n[]}";
	std::cerr << "Plain JSON string from model: " << " \\t{\\t\\\"\\\":\\r{\\n}\\t\\t,\\n\\n\\r\\\"\\\\\\\"\\\":\\n[]}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_d03300679834323e955d76984b94ed9f) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// CloseString
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{ \"\\n\"  \t\n:\t\"\"\n\r,\t \r\"r\\r\"\t\r:\t\n\n50\r \t\n\t} '
	const char* json = "{ \"\\n\"  \t\n:\t\"\"\n\r,\t \r\"r\\r\"\t\r:\t\n\n50\r \t\n\t} ";
	std::cerr << "Plain JSON string from model: " << "{ \\\"\\\\n\\\"  \\t\\n:\\t\\\"\\\"\\n\\r,\\t \\r\\\"r\\\\r\\\"\\t\\r:\\t\\n\\n50\\r \\t\\n\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'r\r' = '50'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "r\r");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(50, cJSON_double(child));
	}
	{
		// '\n' = ''
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_3d28d3a2357351e053037861bf772b9c) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// OpenArray
	// OpenElements
	// OpenValue
	// JsonTrue
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// Whitespace
	// CloseArray
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '\r\n\n{\t  \n\t\"\\ts\\\\B\" : [true,\n{\t }\n\r,true\t\t,\r\r2.0\r\n \r]\r, \r \"\" :null}\n\t\r'
	const char* json = "\r\n\n{\t  \n\t\"\\ts\\\\B\" : [true,\n{\t }\n\r,true\t\t,\r\r2.0\r\n \r]\r, \r \"\" :null}\n\t\r";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\n{\\t  \\n\\t\\\"\\\\ts\\\\\\\\B\\\" : [true,\\n{\\t }\\n\\r,true\\t\\t,\\r\\r2.0\\r\\n \\r]\\r, \\r \\\"\\\" :null}\\n\\t\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '\ts\\B':0 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\ts\\B");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\ts\\B':2 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\ts\\B");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\ts\\B':3 = '2.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\ts\\B");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 3);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(2.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_1c8f08d22ddd507a0082b28c0d94b2d4) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Whitespace
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' \t {\r\n\"\": \r{} \r\n,\t\n\n\"\\/0\\t\\f\\b\\\"\" :\n \tfalse,\n\r\r\t\t\"\\n.\\\\\"\t:\"8\" \n}'
	const char* json = " \t {\r\n\"\": \r{} \r\n,\t\n\n\"\\/0\\t\\f\\b\\\"\" :\n \tfalse,\n\r\r\t\t\"\\n.\\\\\"\t:\"8\" \n}";
	std::cerr << "Plain JSON string from model: " << " \\t {\\r\\n\\\"\\\": \\r{} \\r\\n,\\t\\n\\n\\\"\\\\/0\\\\t\\\\f\\\\b\\\\\\\"\\\" :\\n \\tfalse,\\n\\r\\r\\t\\t\\\"\\\\n.\\\\\\\\\\\"\\t:\\\"8\\\" \\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '/0\t\f\b\"' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/0\t\f\b\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// '\n.\\' = '8'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\n.\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("8", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_031f3036a141fe2d1fd34ead0d2b6a09) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: ' {\n\t\n\r\n\t\"\\f\"\t: null,   \r\t\n\"\" \t:\r\n\ntrue }'
	const char* json = " {\n\t\n\r\n\t\"\\f\"\t: null,   \r\t\n\"\" \t:\r\n\ntrue }";
	std::cerr << "Plain JSON string from model: " << " {\\n\\t\\n\\r\\n\\t\\\"\\\\f\\\"\\t: null,   \\r\\t\\n\\\"\\\" \\t:\\r\\n\\ntrue }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\f' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_90f5e44b6acb7ad8721a933d3ea32de3) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r \t  \"\":{}}'
	const char* json = "{\r \t  \"\":{}}";
	std::cerr << "Plain JSON string from model: " << "{\\r \\t  \\\"\\\":{}}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_e737bbf176afb8e84cd8e2dfb3b2a114) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Character
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// Character
	// Character
	// Character
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// CloseArray
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// CloseFrac
	// OpenExp
	// Zero
	// Digit
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\r\"\"\t\n\n\n:\r\"pr\\b\",\r\n\t\"w\\r]3,U7M\"\n\t \r :{\n\"Th\\fq\":\n [],\"4\\n\"\t\n :false\r\n },\n\"\\r\\r6\\/\"\r:\n\t\r{\n}, \t\r\t\"8\": \t\ntrue\t, \"\\fgJ\": -50.06e065 \r}'
	const char* json = "{\r\"\"\t\n\n\n:\r\"pr\\b\",\r\n\t\"w\\r]3,U7M\"\n\t \r :{\n\"Th\\fq\":\n [],\"4\\n\"\t\n :false\r\n },\n\"\\r\\r6\\/\"\r:\n\t\r{\n}, \t\r\t\"8\": \t\ntrue\t, \"\\fgJ\": -50.06e065 \r}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\"\\t\\n\\n\\n:\\r\\\"pr\\\\b\\\",\\r\\n\\t\\\"w\\\\r]3,U7M\\\"\\n\\t \\r :{\\n\\\"Th\\\\fq\\\":\\n [],\\\"4\\\\n\\\"\\t\\n :false\\r\\n },\\n\\\"\\\\r\\\\r6\\\\/\\\"\\r:\\n\\t\\r{\\n}, \\t\\r\\t\\\"8\\\": \\t\\ntrue\\t, \\\"\\\\fgJ\\\": -50.06e065 \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'pr\b'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("pr\b", cJSON_string(child));
	}
	{
		// '8' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "8");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '\fgJ' = '-5.006e+66'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fgJ");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-5.006e+66, cJSON_double(child));
	}
	{
		// 'w\r]3,U7M':'4\n' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "w\r]3,U7M");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "4\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4c3aa1cad2eaeea4ef1c266033a70d66) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{\t\r\r \t\r \"\"\n\n\r: \n\tfalse\t\t,\r\r\r \"H\\/\\/\":\n true}'
	const char* json = "{\t\r\r \t\r \"\"\n\n\r: \n\tfalse\t\t,\r\r\r \"H\\/\\/\":\n true}";
	std::cerr << "Plain JSON string from model: " << "{\\t\\r\\r \\t\\r \\\"\\\"\\n\\n\\r: \\n\\tfalse\\t\\t,\\r\\r\\r \\\"H\\\\/\\\\/\\\":\\n true}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	{
		// 'H//' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "H//");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d5554716415b98fb28ac6ca0d17267ee) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Whitespace
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: ' {\n\t\"a\"\r:\r\r\t{\n  \"5\" \t:\r\rnull \n}\r\t \t}\n\n'
	const char* json = " {\n\t\"a\"\r:\r\r\t{\n  \"5\" \t:\r\rnull \n}\r\t \t}\n\n";
	std::cerr << "Plain JSON string from model: " << " {\\n\\t\\\"a\\\"\\r:\\r\\r\\t{\\n  \\\"5\\\" \\t:\\r\\rnull \\n}\\r\\t \\t}\\n\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'a':'5' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "a");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "5");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_d5cb19a179127bc008ffabc59f02db8b) {
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// CloseObject
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// Whitespace
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseObject
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '\n{ \t\r\"\"\t: true\t\n\n , \"I\\\"\" :{ \"\\\\\"\t\n \r\t :\r\"P\"\n }\n  \r\n \n,\n \n\n \"\\t\\nwL\"\r\n:\t{\"hb\"\r\t :{ }, \"'\\r\"\n:{\n\r}\t \n\r}\t\r,\t\n\n\n\"C\\f:\"\t\n\r:\n null\n\n\n}\t\n'
	const char* json = "\n{ \t\r\"\"\t: true\t\n\n , \"I\\\"\" :{ \"\\\\\"\t\n \r\t :\r\"P\"\n }\n  \r\n \n,\n \n\n \"\\t\\nwL\"\r\n:\t{\"hb\"\r\t :{ }, \"'\\r\"\n:{\n\r}\t \n\r}\t\r,\t\n\n\n\"C\\f:\"\t\n\r:\n null\n\n\n}\t\n";
	std::cerr << "Plain JSON string from model: " << "\\n{ \\t\\r\\\"\\\"\\t: true\\t\\n\\n , \\\"I\\\\\\\"\\\" :{ \\\"\\\\\\\\\\\"\\t\\n \\r\\t :\\r\\\"P\\\"\\n }\\n  \\r\\n \\n,\\n \\n\\n \\\"\\\\t\\\\nwL\\\"\\r\\n:\\t{\\\"hb\\\"\\r\\t :{ }, \\\"'\\\\r\\\"\\n:{\\n\\r}\\t \\n\\r}\\t\\r,\\t\\n\\n\\n\\\"C\\\\f:\\\"\\t\\n\\r:\\n null\\n\\n\\n}\\t\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// 'I\"':'\\' = 'P'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "I\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("P", cJSON_string(child));
	}
	{
		// 'C\f:' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "C\f:");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e2c526b30d6b710d4bba75792f5b4288) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Character
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// OpenElements
	// OpenValue
	// Null
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// ElementSeparator
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// Whitespace
	// ElementSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// Whitespace
	// CloseObject
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t{  \t\r\"\"\n\r:{\r \n\"\\/L\\n\"\n :[null\r  ,\rnull\n , \t\"2\"\r\t\n]\t}\n\n  }'
	const char* json = "\t{  \t\r\"\"\n\r:{\r \n\"\\/L\\n\"\n :[null\r  ,\rnull\n , \t\"2\"\r\t\n]\t}\n\n  }";
	std::cerr << "Plain JSON string from model: " << "\\t{  \\t\\r\\\"\\\"\\n\\r:{\\r \\n\\\"\\\\/L\\\\n\\\"\\n :[null\\r  ,\\rnull\\n , \\t\\\"2\\\"\\r\\t\\n]\\t}\\n\\n  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':'/L\n':0 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/L\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':'/L\n':1 = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/L\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '':'/L\n':2 = '2'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "/L\n");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 2);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("2", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_212e5a843efcd4e725f605afe40d6cec) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Digit
	// Digit
	// CloseFrac
	// CloseNumber
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '{  \n\"=N\"\r:\rnull\r,\n\t \r\"y\\\"\":80.060373,\r\"5\"\r \n:\"_\"\r\t} '
	const char* json = "{  \n\"=N\"\r:\rnull\r,\n\t \r\"y\\\"\":80.060373,\r\"5\"\r \n:\"_\"\r\t} ";
	std::cerr << "Plain JSON string from model: " << "{  \\n\\\"=N\\\"\\r:\\rnull\\r,\\n\\t \\r\\\"y\\\\\\\"\\\":80.060373,\\r\\\"5\\\"\\r \\n:\\\"_\\\"\\r\\t} " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'y\"' = '80.060373'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "y\"");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(80.060373, cJSON_double(child));
	}
	{
		// '=N' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "=N");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	{
		// '5' = '_'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "5");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("_", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_54b6b7bfaa795868edf60cacfc09db54) {
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// CloseInt
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\n\r{\"\"\t:-5E+0\r }'
	const char* json = "\n\r{\"\"\t:-5E+0\r }";
	std::cerr << "Plain JSON string from model: " << "\\n\\r{\\\"\\\"\\t:-5E+0\\r }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '-5.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-5.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_4a67201a1482e817a7a27cedbc5db1a1) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '{ \t\"\" \n\t:\r{}  }'
	const char* json = "{ \t\"\" \n\t:\r{}  }";
	std::cerr << "Plain JSON string from model: " << "{ \\t\\\"\\\" \\n\\t:\\r{}  }" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_7cf41fd2f2409d48dc3b2baaf78f4189) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Null
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\t\r\t{\"8\":\t \tnull\n}'
	const char* json = "\t\r\t{\"8\":\t \tnull\n}";
	std::cerr << "Plain JSON string from model: " << "\\t\\r\\t{\\\"8\\\":\\t \\tnull\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '8' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "8");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b8cd7a6217ee24cdd18e6a7b88cf9d9e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// JsonTrue
	// CloseValue
	// ClosePair
	// PairSeparator
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenExp
	// Zero
	// Digit
	// CloseExp
	// CloseNumber
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r\n\r{\n\r\n\t\r\"*\": \r true,\t\"|I\"\n:-0e+09 }\n'
	const char* json = "\r\n\r{\n\r\n\t\r\"*\": \r true,\t\"|I\"\n:-0e+09 }\n";
	std::cerr << "Plain JSON string from model: " << "\\r\\n\\r{\\n\\r\\n\\t\\r\\\"*\\\": \\r true,\\t\\\"|I\\\"\\n:-0e+09 }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '*' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "*");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	{
		// '|I' = '-0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "|I");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(-0.0, cJSON_double(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_595f22e3a4bd9715d5a3ad9a5e358333) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenString
	// Character
	// Control
	// Control
	// Control
	// Control
	// Control
	// CloseString
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '\r{\t\n\"\"\t\t: \"T\\\"\\\"\\t\\f\\n\"\r\r}'
	const char* json = "\r{\t\n\"\"\t\t: \"T\\\"\\\"\\t\\f\\n\"\r\r}";
	std::cerr << "Plain JSON string from model: " << "\\r{\\t\\n\\\"\\\"\\t\\t: \\\"T\\\\\\\"\\\\\\\"\\\\t\\\\f\\\\n\\\"\\r\\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'T\"\"\t\f\n'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("T\"\"\t\f\n", cJSON_string(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_c6ce410bc4f76d15ed3b9d2fb327145e) {
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenArray
	// CloseArray
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// Whitespace
	// End
	// JSON: '{  \n\r\n\"\\t\\n\":[]\t\r\n\r \r,\t\n \n \t \"\"\r\t\n\n :\ntrue\t\t\r\r\r}\n\t'
	const char* json = "{  \n\r\n\"\\t\\n\":[]\t\r\n\r \r,\t\n \n \t \"\"\r\t\n\n :\ntrue\t\t\r\r\r}\n\t";
	std::cerr << "Plain JSON string from model: " << "{  \\n\\r\\n\\\"\\\\t\\\\n\\\":[]\\t\\r\\n\\r \\r,\\t\\n \\n \\t \\\"\\\"\\r\\t\\n\\n :\\ntrue\\t\\t\\r\\r\\r}\\n\\t" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_e7144a48bf7201ac34691e33b251b1d6) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// Whitespace
	// Whitespace
	// ClosePair
	// PairSeparator
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenString
	// Control
	// Character
	// Character
	// CloseString
	// CloseValue
	// Whitespace
	// Whitespace
	// ClosePair
	// CloseRoot
	// End
	// JSON: '\n\r\t{ \"\\fE\\b\\\\%\"\r:true\n\r\t\t\r\r,\t\t\"\\\\)\"\n:\"\\nyw\"\n\n}'
	const char* json = "\n\r\t{ \"\\fE\\b\\\\%\"\r:true\n\r\t\t\r\r,\t\t\"\\\\)\"\n:\"\\nyw\"\n\n}";
	std::cerr << "Plain JSON string from model: " << "\\n\\r\\t{ \\\"\\\\fE\\\\b\\\\\\\\%\\\"\\r:true\\n\\r\\t\\t\\r\\r,\\t\\t\\\"\\\\\\\\)\\\"\\n:\\\"\\\\nyw\\\"\\n\\n}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '\\)' = '\nyw'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\\)");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_String, cJSON_type(child));
		ASSERT_STREQ("\nyw", cJSON_string(child));
	}
	{
		// '\fE\b\\%' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\fE\b\\%");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_2dd49c9a9dc91fa92bb665d29aafafe3) {
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Control
	// Control
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// CloseValue
	// ClosePair
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseRoot
	// End
	// JSON: '{\r\"\\b\\r\":\n{}\r\r \r}'
	const char* json = "{\r\"\\b\\r\":\n{}\r\r \r}";
	std::cerr << "Plain JSON string from model: " << "{\\r\\\"\\\\b\\\\r\\\":\\n{}\\r\\r \\r}" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_53eb0a2133486106b3c12be6b376341e) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// Control
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenValue
	// Whitespace
	// OpenArray
	// CloseArray
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// PairSeparator
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// OpenArray
	// OpenElements
	// Whitespace
	// OpenValue
	// OpenNumber
	// OpenInt
	// Digit
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// Digit
	// Zero
	// Digit
	// Zero
	// CloseFrac
	// OpenExp
	// Zero
	// CloseExp
	// CloseNumber
	// CloseValue
	// Whitespace
	// ElementSeparator
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// Whitespace
	// CloseValue
	// CloseElements
	// CloseArray
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\n \n{\r\t\",\\f\\/OU6\\\\d\\b\\/\"\n\r\n:\n\n\t\t[]\t\r\t, \n\"\"\r :\n\t[\t40.08030E+0\r,true\r\n\t]}\r'
	const char* json = "\n \n{\r\t\",\\f\\/OU6\\\\d\\b\\/\"\n\r\n:\n\n\t\t[]\t\r\t, \n\"\"\r :\n\t[\t40.08030E+0\r,true\r\n\t]}\r";
	std::cerr << "Plain JSON string from model: " << "\\n \\n{\\r\\t\\\",\\\\f\\\\/OU6\\\\\\\\d\\\\b\\\\/\\\"\\n\\r\\n:\\n\\n\\t\\t[]\\t\\r\\t, \\n\\\"\\\"\\r :\\n\\t[\\t40.08030E+0\\r,true\\r\\n\\t]}\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '':0 = '40.0803'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 0);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(40.0803, cJSON_double(child));
	}
	{
		// '':1 = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Array, cJSON_type(child));
		child = cJSON_GetArrayItem(child, 1);
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_151d708251100a641790a9a623be90d0) {
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenRoot
	// OpenPair
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// OpenObject
	// CloseObject
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '  \t{\n\n\r\"\\r\"  \r:{}\t\n} \t '
	const char* json = "  \t{\n\n\r\"\\r\"  \r:{}\t\n} \t ";
	std::cerr << "Plain JSON string from model: " << "  \\t{\\n\\n\\r\\\"\\\\r\\\"  \\r:{}\\t\\n} \\t " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	cJSON_Delete(object);
}

TEST(cJSON, subject_1750d03883c98567fd487b791f719eb6) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// OpenPair
	// OpenKey
	// Whitespace
	// OpenString
	// Character
	// Character
	// Character
	// Control
	// Character
	// Control
	// Control
	// Character
	// CloseString
	// Whitespace
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// JsonFalse
	// CloseValue
	// Whitespace
	// ClosePair
	// Whitespace
	// Whitespace
	// CloseRoot
	// Whitespace
	// End
	// JSON: ' {  \"~Q>\\\")\\r\\n>\"\t :false\n  } '
	const char* json = " {  \"~Q>\\\")\\r\\n>\"\t :false\n  } ";
	std::cerr << "Plain JSON string from model: " << " {  \\\"~Q>\\\\\\\")\\\\r\\\\n>\\\"\\t :false\\n  } " << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '~Q>\")\r\n>' = 'False'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "~Q>\")\r\n>");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_False, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_b80170f5015058a53ee836c2be4186e8) {
	// Whitespace
	// OpenRoot
	// Whitespace
	// Whitespace
	// OpenPair
	// OpenKey
	// OpenString
	// Character
	// Control
	// CloseString
	// CloseKey
	// Whitespace
	// KeyValueSeparator
	// OpenValue
	// Whitespace
	// Null
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// End
	// JSON: '\r{ \n\"c\\f\" :\tnull }\n'
	const char* json = "\r{ \n\"c\\f\" :\tnull }\n";
	std::cerr << "Plain JSON string from model: " << "\\r{ \\n\\\"c\\\\f\\\" :\\tnull }\\n" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// 'c\f' = 'None'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "c\f");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_NULL, cJSON_type(child));
	}
	cJSON_Delete(object);
}

TEST(cJSON, subject_ea5e6e8223e5e358116ef153a04c30d9) {
	// OpenRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenPair
	// Whitespace
	// OpenKey
	// OpenString
	// Control
	// Control
	// Control
	// Character
	// CloseString
	// CloseKey
	// KeyValueSeparator
	// Whitespace
	// Whitespace
	// OpenValue
	// JsonTrue
	// Whitespace
	// Whitespace
	// CloseValue
	// ClosePair
	// PairSeparator
	// OpenPair
	// Whitespace
	// Whitespace
	// OpenKey
	// Whitespace
	// Whitespace
	// Whitespace
	// OpenString
	// CloseString
	// Whitespace
	// CloseKey
	// KeyValueSeparator
	// OpenValue
	// OpenNumber
	// OpenInt
	// Zero
	// CloseInt
	// OpenFrac
	// Zero
	// CloseFrac
	// CloseNumber
	// Whitespace
	// Whitespace
	// CloseValue
	// Whitespace
	// ClosePair
	// CloseRoot
	// Whitespace
	// Whitespace
	// Whitespace
	// End
	// JSON: '{  \t\t\"\\b\\\"\\/D\":\r\ttrue\r , \n\n\t\n\"\"\t:0.0\t\t\n} \r\r'
	const char* json = "{  \t\t\"\\b\\\"\\/D\":\r\ttrue\r , \n\n\t\n\"\"\t:0.0\t\t\n} \r\r";
	std::cerr << "Plain JSON string from model: " << "{  \\t\\t\\\"\\\\b\\\\\\\"\\\\/D\\\":\\r\\ttrue\\r , \\n\\n\\t\\n\\\"\\\"\\t:0.0\\t\\t\\n} \\r\\r" << std::endl;
	cJSON* object = cJSON_Parse(json);
	ASSERT_TRUE(NULL != object);
	char* formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	cJSON_Delete(object);
	object = cJSON_Parse(formatted);
	free(formatted);
	ASSERT_TRUE(NULL != object);
	formatted = cJSON_Print(object);
	std::cerr << "cJSON prints the re-parsed object:" << std::endl;
	std::cerr << formatted << std::endl;
	free(formatted);
	{
		// '' = '0.0'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_Number, cJSON_type(child));
		ASSERT_FLOAT_EQ(0.0, cJSON_double(child));
	}
	{
		// '\b\"/D' = 'True'
		cJSON* child = object;
		ASSERT_EQ(cJSON_Object, cJSON_type(child));
		child = cJSON_GetObjectItem(child, "\b\"/D");
		ASSERT_TRUE(NULL != child);
		ASSERT_EQ(cJSON_True, cJSON_type(child));
	}
	cJSON_Delete(object);
}

