#!/bin/bash

############################################################################
# nuttx/tools/new-file
#
#   Copyright (C) 2015 Haltian Ltd. All rights reserved.
#   Author: Roman Saveljev <roman.saveljev@haltian.com>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor the names of its contributors may be
#    used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################
#
# This script generates new C source or header file from the template
# according to
#   http://nuttx.org/Documentation/NuttXCCodingStandard.html#cfilestructure
#
# Usage:
#    new-file [c|h] <filename>
#
# The first optional parameter will tell the kind of file to generate. The
# second argument is mandatory and tells the target file path name. If file
# type is omitted it will be deduced from filename's extension. Source file
# will be generated by default.
#
# Existing files will not be overwritten.
#

die() {
    echo "$@" 1>&2
    exit 1
}

abspath() {
    (cd $(dirname $1) && pwd)
}

[ -n "$2" ] && FILETYPE="$1" && shift
FILENAME=$1

[ -z "$FILETYPE" ] && FILETYPE="${FILENAME##*.}"
[ "$FILETYPE" = c ] || [ "$FILETYPE" = h ] || FILETYPE=c


[ -z "$FILENAME" ] && die "File pathname must be provided on the command line"
[ -e "$FILENAME" ] && die "Refusing to overwite existing $FILENAME"

# Heuristics!
AUTHOR=$(git config user.name)
EMAIL='<'$(git config user.email)'>'
COMPANY=$(git config user.company)
YEAR=$(date +%Y)

# Making it up for the missing parts
: ${AUTHOR:="<Author's name>"}
: ${EMAIL:="<Contact e-mail>"}
: ${COMPANY:="<Copyright holder's name>"}

NUTTX_ROOT=$(abspath $(dirname $0)/../../../)
FILEPATH=$(abspath $FILENAME)

[ -d "$(dirname $FILEPATH)" ] || die "There is no $(firname $FILEPATH) to create requested $(basename $FILEPATH) under"

if [ -z "$RELPATH" ]
then
    RELPATH=${FILEPATH/#$NUTTX_ROOT/}
    if [ "$RELPATH" = $FILEPATH ]
    then
        die "Calculated file relative path lays outside NuttX root ($NUTTX_ROOT). Relative path can be customized through RELPATH environment variable"
    fi
fi

# End with a slash unless it goes under very root of the NuttX
[ -n "$RELPATH" ] && RELPATH=${RELPATH/#\//}/

[ "$FILETYPE" = c ] && cat >$FILENAME <<EOF
/****************************************************************************
 * ${RELPATH}${FILENAME}
 * <Optional one line file description>
 *
 *   Copyright (C) $YEAR $COMPANY. All rights reserved.
 *   Author: $AUTHOR $EMAIL
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/****************************************************************************
 * Included Files
 ****************************************************************************/
All header files are included here.

/****************************************************************************
 * Pre-processor Definitions
 ****************************************************************************/
All C pre-processor macros are defined here.

/****************************************************************************
 * Private Types
 ****************************************************************************/
Any types, enumerations, structures or unions used by the file are defined here.

/****************************************************************************
 * Private Function Prototypes
 ****************************************************************************/
Prototypes of all static functions in the file are provided here.

/****************************************************************************
 * Private Data
 ****************************************************************************/
All static data definitions appear here.

/****************************************************************************
 * Public Data
 ****************************************************************************/
All data definitions with global scope appear here.

/****************************************************************************
 * Private Functions
 ****************************************************************************/

/****************************************************************************
 * Name: <Static function name>
 *
 * Description:
 *   Description of the operation of the static function.
 *
 * Input Parameters:
 *   A list of input parameters, one-per-line, appears here along with a
 *   description of each input parameter.
 *
 * Returned Value:
 *   Description of the value returned by this function (if any),
 *   including an enumeration of all possible error values.
 *
 * Assumptions/Limitations:
 *   Anything else that one might need to know to use this function.
 *
 ****************************************************************************/
All static functions in the file are defined in this grouping. Each is preceded by a function header similar to the above.

/****************************************************************************
 * Public Functions
 ****************************************************************************/

/****************************************************************************
 * Name: <Global function name>
 *
 * Description:
 *   Description of the operation of the function.
 *
 * Input Parameters:
 *   A list of input parameters, one-per-line, appears here along with a
 *   description of each input parameter.
 *
 * Returned Value:
 *   Description of the value returned by this function (if any),
 *   including an enumeration of all possible error values.
 *
 * Assumptions/Limitations:
 *   Anything else that one might need to know to use this function.
 *
 ****************************************************************************/
All global functions in the file are defined here.
EOF

IDEMPOTENCE=${RELPATH}${FILENAME}
IDEMPOTENCE=${IDEMPOTENCE^^}
IDEMPOTENCE=${IDEMPOTENCE//\//_}
IDEMPOTENCE=${IDEMPOTENCE//./_}
IDEMPOTENCE=${IDEMPOTENCE//-/_}

[ "$FILETYPE" = h ] && cat >$FILENAME <<EOF
/****************************************************************************
 * ${RELPATH}${FILENAME}
 * <Optional one line file description>
 *
 *   Copyright (C) $YEAR $COMPANY. All rights reserved.
 *   Author: $AUTHOR $EMAIL
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/
#ifndef __${IDEMPOTENCE}
#define __${IDEMPOTENCE}

/****************************************************************************
 * Included Files
 ****************************************************************************/
All header files are included here.

/****************************************************************************
 * Pre-processor Definitions
 ****************************************************************************/
All C pre-processor macros are defined here.

/****************************************************************************
 * Public Types
 ****************************************************************************/

#ifndef __ASSEMBLY__
Any types, enumerations, structures or unions are defined here.

/****************************************************************************
 * Public Data
 ****************************************************************************/

#ifdef __cplusplus
#define EXTERN extern "C"
extern "C"
{
#else
#define EXTERN extern
#endif

All data declarations with global scope appear here, preceded by the definition EXTERN.

/****************************************************************************
 * Inline Functions
 ****************************************************************************/

/****************************************************************************
 * Name: <Inline function name>
 *
 * Description:
 *   Description of the operation of the inline function.
 *
 * Input Parameters:
 *   A list of input parameters, one-per-line, appears here along with a
 *   description of each input parameter.
 *
 * Returned Value:
 *   Description of the value returned by this function (if any),
 *   including an enumeration of all possible error values.
 *
 * Assumptions/Limitations:
 *   Anything else that one might need to know to use this function.
 *
 ****************************************************************************/
Any static inline functions may be defined in this grouping. Each is preceded by a function header similar to the above.

/****************************************************************************
 * Public Function Prototypes
 ****************************************************************************/

/****************************************************************************
 * Name: <Global function name>
 *
 * Description:
 *   Description of the operation of the function.
 *
 * Input Parameters:
 *   A list of input parameters, one-per-line, appears here along with a
 *   description of each input parameter.
 *
 * Returned Value:
 *   Description of the value returned by this function (if any),
 *   including an enumeration of all possible error values.
 *
 * Assumptions/Limitations:
 *   Anything else that one might need to know to use this function.
 *
 ****************************************************************************/
All global functions in the file are prototyped here. The keyword extern or the definition EXTERN are never used with function prototypes.

#undef EXTERN
#ifdef __cplusplus
}
#endif

#endif /* __ASSEMBLY__ */

#endif /* __${IDEMPOTENCE} */
EOF
